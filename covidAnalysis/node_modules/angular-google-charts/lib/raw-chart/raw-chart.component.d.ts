/// <reference types="google.visualization" />
import { EventEmitter, ElementRef, OnInit, OnChanges, AfterViewInit } from '@angular/core';
import { Observable } from 'rxjs';
import { ChartErrorEvent, ChartEvent } from '../models/events.model';
import { ScriptLoaderService } from '../script-loader/script-loader.service';
import * as ɵngcc0 from '@angular/core';
export declare class RawChartComponent implements OnInit, OnChanges, AfterViewInit {
    protected element: ElementRef;
    protected loaderService: ScriptLoaderService;
    chartData: google.visualization.ChartSpecs;
    formatter: google.visualization.DefaultFormatter | Array<{
        formatter: google.visualization.DefaultFormatter;
        colIndex: number;
    }>;
    dynamicResize: boolean;
    error: EventEmitter<ChartErrorEvent>;
    ready: EventEmitter<{}>;
    select: EventEmitter<ChartEvent>;
    mouseenter: EventEmitter<ChartEvent>;
    mouseleave: EventEmitter<ChartEvent>;
    wrapper: google.visualization.ChartWrapper;
    constructor(element: ElementRef, loaderService: ScriptLoaderService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(): void;
    getChartElement(): HTMLElement;
    protected createChart(): void;
    protected loadNeededPackages(): Observable<any>;
    protected updateChart(): void;
    protected formatData(dataTable: google.visualization.DataTable): void;
    private addResizeListener;
    private removeChartEvents;
    private registerChartEvents;
    private registerChartEvent;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RawChartComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<RawChartComponent, "raw-chart", ["raw-chart"], { "dynamicResize": "dynamicResize"; "chartData": "chartData"; "formatter": "formatter"; }, { "error": "error"; "ready": "ready"; "select": "select"; "mouseenter": "mouseenter"; "mouseleave": "mouseleave"; }, never, never>;
}

//# sourceMappingURL=raw-chart.component.d.ts.map