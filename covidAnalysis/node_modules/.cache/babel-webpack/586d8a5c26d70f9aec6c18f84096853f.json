{"ast":null,"code":"/**\n * Serial chart module.\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\n\nimport { Chart, ChartDataItem } from \"../Chart\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { Container } from \"../../core/Container\";\nimport { Series } from \"../series/Series\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { ColorSet } from \"../../core/utils/ColorSet\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\n * ============================================================================\n * DATA ITEM\n * ============================================================================\n * @hidden\n */\n\n/**\n * Defines a [[DataItem]] for [[SerialChart]].\n *\n * @see {@link DataItem}\n */\n\nvar SerialChartDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(SerialChartDataItem, _super);\n  /**\n   * Constructor\n   */\n\n\n  function SerialChartDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"SerialChartDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return SerialChartDataItem;\n}(ChartDataItem);\n\nexport { SerialChartDataItem };\n/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * A base class for all series-based charts, like XY, Pie, etc.\n *\n * Is not useful on its own.\n *\n * @see {@link ISerialChartEvents} for a list of available Events\n * @see {@link ISerialChartAdapters} for a list of available Adapters\n */\n\nvar SerialChart =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(SerialChart, _super);\n  /**\n   * Constructor\n   */\n\n\n  function SerialChart() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"SerialChart\";\n    _this.colors = new ColorSet(); // Create a container for series\n\n    var seriesContainer = _this.chartContainer.createChild(Container);\n\n    seriesContainer.shouldClone = false;\n    seriesContainer.width = percent(100);\n    seriesContainer.height = percent(100);\n    seriesContainer.isMeasured = false;\n    seriesContainer.layout = \"none\";\n    seriesContainer.zIndex = 2;\n    _this.seriesContainer = seriesContainer; // Create a container for bullets\n\n    var bulletsContainer = _this.chartContainer.createChild(Container);\n\n    bulletsContainer.shouldClone = false;\n    bulletsContainer.width = percent(100);\n    bulletsContainer.height = percent(100);\n    bulletsContainer.isMeasured = false;\n    bulletsContainer.zIndex = 3;\n    bulletsContainer.layout = \"none\";\n    _this.bulletsContainer = bulletsContainer; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  SerialChart.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    if (this.colors) {\n      this.colors.dispose();\n    }\n  };\n  /**\n   * Sets defaults that instantiate some objects that rely on parent, so they\n   * cannot be set in constructor\n   */\n\n\n  SerialChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Serial chart\");\n    }\n  };\n\n  Object.defineProperty(SerialChart.prototype, \"series\", {\n    /**\n     * A list of chart's series.\n     *\n     * @return Chart's series\n     */\n    get: function get() {\n      var _this = this;\n\n      if (!this._series) {\n        this._series = new ListTemplate(this.createSeries());\n\n        this._series.events.on(\"inserted\", function (event) {\n          _this.handleSeriesAdded(event);\n        }, undefined, false);\n\n        this._series.events.on(\"removed\", function (event) {\n          var series = event.oldValue;\n\n          _this.dataUsers.removeValue(series);\n\n          _this.dataUsers.each(function (dataUser) {\n            dataUser.invalidateDataItems();\n          });\n\n          if (series.autoDispose) {\n            series.dispose();\n          }\n\n          _this.feedLegend();\n        }, undefined, false);\n\n        this._disposers.push(new ListDisposer(this._series));\n\n        this._disposers.push(this._series.template);\n      }\n\n      return this._series;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Decorates a new [[Series]] object with required parameters when it is\n   * added to the chart.\n   *\n   * @ignore Exclude from docs\n   * @param event  Event\n   */\n\n  SerialChart.prototype.handleSeriesAdded = function (event) {\n    var _this = this;\n\n    var series = event.newValue;\n\n    if (series.isDisposed()) {\n      return;\n    }\n\n    series.chart = this;\n    series.parent = this.seriesContainer;\n    series.bulletsContainer.parent = this.bulletsContainer;\n\n    this._dataUsers.moveValue(series);\n\n    series.addDisposer(new Disposer(function () {\n      _this.dataUsers.removeValue(series);\n    }));\n    this.feedLegend();\n  };\n  /**\n   * Setups the legend to use the chart's data.\n   * @ignore\n   */\n\n\n  SerialChart.prototype.feedLegend = function () {\n    var legend = this.legend;\n\n    if (legend) {\n      var legendData_1 = [];\n      $iter.each(this.series.iterator(), function (series) {\n        if (!series.hiddenInLegend) {\n          legendData_1.push(series);\n        }\n      });\n      legend.dataFields.name = \"name\";\n      legend.data = legendData_1;\n    }\n  };\n  /**\n   * Creates and returns a new Series, suitable for this chart type.\n   *\n   * @return New series\n   */\n\n\n  SerialChart.prototype.createSeries = function () {\n    return new Series();\n  };\n\n  Object.defineProperty(SerialChart.prototype, \"colors\", {\n    /**\n     * @return Color list\n     */\n    get: function get() {\n      return this.getPropertyValue(\"colors\");\n    },\n\n    /**\n     * Chart's color list.\n     *\n     * This list can be used by a number of serial items, like applying a new\n     * color for each Series added. Or, applying a new color for each slice\n     * of a Pie chart.\n     *\n     * Please see [[ColorSet]] for information on how you can set up to generate\n     * unique colors.\n     *\n     * A theme you are using may override default pre-defined colors.\n     *\n     * @param value Color list\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"colors\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Copies all parameters from another [[SerialChart]].\n   *\n   * @param source Source SerialChart\n   */\n\n  SerialChart.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.series.copyFrom(source.series);\n  };\n\n  return SerialChart;\n}(Chart);\n\nexport { SerialChart };\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n *\n * @ignore\n */\n\nregistry.registeredClasses[\"SerialChart\"] = SerialChart;","map":{"version":3,"sources":["../../../../../src/.internal/charts/types/SerialChart.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Serial chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { IListEvents, ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Series } from \"../series/Series\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SerialChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SerialChartDataItem extends ChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SerialChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SerialChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SerialChart]].\r\n */\r\nexport interface ISerialChartDataFields extends IChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SerialChart]]\r\n */\r\nexport interface ISerialChartProperties extends IChartProperties {\r\n\r\n\t/**\r\n\t * A set of colors to be used for chart elements, like Series, Slices, etc.\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[SerialChart]].\r\n */\r\nexport interface ISerialChartEvents extends IChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SerialChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISerialChartAdapters extends IChartAdapters, ISerialChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all series-based charts, like XY, Pie, etc.\r\n *\r\n * Is not useful on its own.\r\n *\r\n * @see {@link ISerialChartEvents} for a list of available Events\r\n * @see {@link ISerialChartAdapters} for a list of available Adapters\r\n */\r\nexport class SerialChart extends Chart {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: ISerialChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISerialChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISerialChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISerialChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: Series;\r\n\r\n\t/**\r\n\t * Holds a list of [[Series]] displayed on the chart.\r\n\t */\r\n\tprotected _series: ListTemplate<this[\"_seriesType\"]>\r\n\r\n\t/**\r\n\t * Holds the reference to the container actual series are drawn in.\r\n\t */\r\n\tpublic readonly seriesContainer: Container;\r\n\r\n\t/**\r\n\t * Holds a reference to the container series' bullets are drawn in.\r\n\t */\r\n\tpublic readonly bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SerialChart\";\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\r\n\t\t// Create a container for series\r\n\t\tlet seriesContainer: Container = this.chartContainer.createChild(Container);\r\n\t\tseriesContainer.shouldClone = false;\r\n\t\tseriesContainer.width = percent(100);\r\n\t\tseriesContainer.height = percent(100);\r\n\t\tseriesContainer.isMeasured = false;\r\n\t\tseriesContainer.layout = \"none\";\r\n\t\tseriesContainer.zIndex = 2;\r\n\t\tthis.seriesContainer = seriesContainer;\r\n\r\n\t\t// Create a container for bullets\r\n\t\tlet bulletsContainer: Container = this.chartContainer.createChild(Container);\r\n\t\tbulletsContainer.shouldClone = false;\r\n\t\tbulletsContainer.width = percent(100);\r\n\t\tbulletsContainer.height = percent(100);\r\n\t\tbulletsContainer.isMeasured = false;\r\n\t\tbulletsContainer.zIndex = 3;\r\n\t\tbulletsContainer.layout = \"none\";\r\n\t\tthis.bulletsContainer = bulletsContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\r\n\t\tif (this.colors) {\r\n\t\t\tthis.colors.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Serial chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A list of chart's series.\r\n\t *\r\n\t * @return Chart's series\r\n\t */\r\n\tpublic get series(): ListTemplate<this[\"_seriesType\"]> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new ListTemplate<this[\"_seriesType\"]>(this.createSeries());\r\n\t\t\tthis._series.events.on(\"inserted\", (event)=>{\r\n\t\t\t\tthis.handleSeriesAdded(event);\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._series.events.on(\"removed\", (event) => {\r\n\t\t\t\tlet series = event.oldValue;\r\n\t\t\t\tthis.dataUsers.removeValue(series);\r\n\t\t\t\tthis.dataUsers.each((dataUser)=>{\r\n\t\t\t\t\tdataUser.invalidateDataItems();\r\n\t\t\t\t})\r\n\t\t\t\tif(series.autoDispose){\r\n\t\t\t\t\tseries.dispose();\r\n\t\t\t\t}\r\n\t\t\t\tthis.feedLegend();\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._series));\r\n\t\t\tthis._disposers.push(this._series.template);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[Series]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<Series>[\"inserted\"]): void {\r\n\t\tlet series: Series = event.newValue;\r\n\t\tif(series.isDisposed()){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tseries.chart = this;\r\n\t\tseries.parent = this.seriesContainer;\r\n\r\n\t\tseries.bulletsContainer.parent = this.bulletsContainer;\r\n\r\n\t\tthis._dataUsers.moveValue(series);\r\n\t\tseries.addDisposer(new Disposer(()=>{\r\n\t\t\tthis.dataUsers.removeValue(series);\r\n\t\t}))\r\n\r\n\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: Array<this[\"_seriesType\"]> = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif(!series.hiddenInLegend){\r\n\t\t\t\t\tlegendData.push(series);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for this chart type.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new Series();\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's color list.\r\n\t *\r\n\t * This list can be used by a number of serial items, like applying a new\r\n\t * color for each Series added. Or, applying a new color for each slice\r\n\t * of a Pie chart.\r\n\t *\r\n\t * Please see [[ColorSet]] for information on how you can set up to generate\r\n\t * unique colors.\r\n\t *\r\n\t * A theme you are using may override default pre-defined colors.\r\n\t *\r\n\t * @param value Color list\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color list\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[SerialChart]].\r\n\t *\r\n\t * @param source Source SerialChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.series.copyFrom(source.series);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SerialChart\"] = SerialChart;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}