{"ast":null,"code":"/*\n    StackBlur - a fast almost Gaussian Blur For Canvas\n\n    Version:     0.5\n    Author:        Mario Klingemann\n    Contact:     mario@quasimondo.com\n    Website:    http://www.quasimondo.com/StackBlurForCanvas\n    Twitter:    @quasimondo\n\n    In case you find this class useful - especially in commercial projects -\n    I am not totally unhappy for a small donation to my PayPal account\n    mario@quasimondo.de\n\n    Or support me on flattr:\n    https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript\n\n    Copyright (c) 2010 Mario Klingemann\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without\n    restriction, including without limitation the rights to use,\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following\n    conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n    */\nvar mul_table = [512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292, 289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259];\nvar shg_table = [9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24];\n\nfunction processImage(img, canvas, radius, blurAlphaChannel) {\n  if (typeof img == 'string') {\n    var img = document.getElementById(img);\n  } else if (typeof HTMLImageElement !== 'undefined' && !img instanceof HTMLImageElement) {\n    return;\n  }\n\n  var w = img.naturalWidth;\n  var h = img.naturalHeight;\n\n  if (typeof canvas == 'string') {\n    var canvas = document.getElementById(canvas);\n  } else if (typeof HTMLCanvasElement !== 'undefined' && !canvas instanceof HTMLCanvasElement) {\n    return;\n  }\n\n  canvas.style.width = w + 'px';\n  canvas.style.height = h + 'px';\n  canvas.width = w;\n  canvas.height = h;\n  var context = canvas.getContext('2d');\n  context.clearRect(0, 0, w, h);\n  context.drawImage(img, 0, 0);\n  if (isNaN(radius) || radius < 1) return;\n  if (blurAlphaChannel) processCanvasRGBA(canvas, 0, 0, w, h, radius);else processCanvasRGB(canvas, 0, 0, w, h, radius);\n}\n\nfunction getImageDataFromCanvas(canvas, top_x, top_y, width, height) {\n  if (typeof canvas == 'string') var canvas = document.getElementById(canvas);else if (typeof HTMLCanvasElement !== 'undefined' && !canvas instanceof HTMLCanvasElement) return;\n  var context = canvas.getContext('2d');\n  var imageData;\n\n  try {\n    try {\n      imageData = context.getImageData(top_x, top_y, width, height);\n    } catch (e) {\n      throw new Error(\"unable to access local image data: \" + e);\n      return;\n    }\n  } catch (e) {\n    throw new Error(\"unable to access image data: \" + e);\n  }\n\n  return imageData;\n}\n\nfunction processCanvasRGBA(canvas, top_x, top_y, width, height, radius) {\n  if (isNaN(radius) || radius < 1) return;\n  radius |= 0;\n  var imageData = getImageDataFromCanvas(canvas, top_x, top_y, width, height);\n  imageData = processImageDataRGBA(imageData, top_x, top_y, width, height, radius);\n  canvas.getContext('2d').putImageData(imageData, top_x, top_y);\n}\n\nfunction processImageDataRGBA(imageData, top_x, top_y, width, height, radius) {\n  var pixels = imageData.data;\n  var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum, r_out_sum, g_out_sum, b_out_sum, a_out_sum, r_in_sum, g_in_sum, b_in_sum, a_in_sum, pr, pg, pb, pa, rbs;\n  var div = radius + radius + 1;\n  var w4 = width << 2;\n  var widthMinus1 = width - 1;\n  var heightMinus1 = height - 1;\n  var radiusPlus1 = radius + 1;\n  var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;\n  var stackStart = new BlurStack();\n  var stack = stackStart;\n\n  for (i = 1; i < div; i++) {\n    stack = stack.next = new BlurStack();\n    if (i == radiusPlus1) var stackEnd = stack;\n  }\n\n  stack.next = stackStart;\n  var stackIn = null;\n  var stackOut = null;\n  yw = yi = 0;\n  var mul_sum = mul_table[radius];\n  var shg_sum = shg_table[radius];\n\n  for (y = 0; y < height; y++) {\n    r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;\n    r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n    g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);\n    b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);\n    a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);\n    r_sum += sumFactor * pr;\n    g_sum += sumFactor * pg;\n    b_sum += sumFactor * pb;\n    a_sum += sumFactor * pa;\n    stack = stackStart;\n\n    for (i = 0; i < radiusPlus1; i++) {\n      stack.r = pr;\n      stack.g = pg;\n      stack.b = pb;\n      stack.a = pa;\n      stack = stack.next;\n    }\n\n    for (i = 1; i < radiusPlus1; i++) {\n      p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n      r_sum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - i);\n      g_sum += (stack.g = pg = pixels[p + 1]) * rbs;\n      b_sum += (stack.b = pb = pixels[p + 2]) * rbs;\n      a_sum += (stack.a = pa = pixels[p + 3]) * rbs;\n      r_in_sum += pr;\n      g_in_sum += pg;\n      b_in_sum += pb;\n      a_in_sum += pa;\n      stack = stack.next;\n    }\n\n    stackIn = stackStart;\n    stackOut = stackEnd;\n\n    for (x = 0; x < width; x++) {\n      pixels[yi + 3] = pa = a_sum * mul_sum >> shg_sum;\n\n      if (pa != 0) {\n        pa = 255 / pa;\n        pixels[yi] = (r_sum * mul_sum >> shg_sum) * pa;\n        pixels[yi + 1] = (g_sum * mul_sum >> shg_sum) * pa;\n        pixels[yi + 2] = (b_sum * mul_sum >> shg_sum) * pa;\n      } else {\n        pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;\n      }\n\n      r_sum -= r_out_sum;\n      g_sum -= g_out_sum;\n      b_sum -= b_out_sum;\n      a_sum -= a_out_sum;\n      r_out_sum -= stackIn.r;\n      g_out_sum -= stackIn.g;\n      b_out_sum -= stackIn.b;\n      a_out_sum -= stackIn.a;\n      p = yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1) << 2;\n      r_in_sum += stackIn.r = pixels[p];\n      g_in_sum += stackIn.g = pixels[p + 1];\n      b_in_sum += stackIn.b = pixels[p + 2];\n      a_in_sum += stackIn.a = pixels[p + 3];\n      r_sum += r_in_sum;\n      g_sum += g_in_sum;\n      b_sum += b_in_sum;\n      a_sum += a_in_sum;\n      stackIn = stackIn.next;\n      r_out_sum += pr = stackOut.r;\n      g_out_sum += pg = stackOut.g;\n      b_out_sum += pb = stackOut.b;\n      a_out_sum += pa = stackOut.a;\n      r_in_sum -= pr;\n      g_in_sum -= pg;\n      b_in_sum -= pb;\n      a_in_sum -= pa;\n      stackOut = stackOut.next;\n      yi += 4;\n    }\n\n    yw += width;\n  }\n\n  for (x = 0; x < width; x++) {\n    g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;\n    yi = x << 2;\n    r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n    g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);\n    b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);\n    a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);\n    r_sum += sumFactor * pr;\n    g_sum += sumFactor * pg;\n    b_sum += sumFactor * pb;\n    a_sum += sumFactor * pa;\n    stack = stackStart;\n\n    for (i = 0; i < radiusPlus1; i++) {\n      stack.r = pr;\n      stack.g = pg;\n      stack.b = pb;\n      stack.a = pa;\n      stack = stack.next;\n    }\n\n    yp = width;\n\n    for (i = 1; i <= radius; i++) {\n      yi = yp + x << 2;\n      r_sum += (stack.r = pr = pixels[yi]) * (rbs = radiusPlus1 - i);\n      g_sum += (stack.g = pg = pixels[yi + 1]) * rbs;\n      b_sum += (stack.b = pb = pixels[yi + 2]) * rbs;\n      a_sum += (stack.a = pa = pixels[yi + 3]) * rbs;\n      r_in_sum += pr;\n      g_in_sum += pg;\n      b_in_sum += pb;\n      a_in_sum += pa;\n      stack = stack.next;\n\n      if (i < heightMinus1) {\n        yp += width;\n      }\n    }\n\n    yi = x;\n    stackIn = stackStart;\n    stackOut = stackEnd;\n\n    for (y = 0; y < height; y++) {\n      p = yi << 2;\n      pixels[p + 3] = pa = a_sum * mul_sum >> shg_sum;\n\n      if (pa > 0) {\n        pa = 255 / pa;\n        pixels[p] = (r_sum * mul_sum >> shg_sum) * pa;\n        pixels[p + 1] = (g_sum * mul_sum >> shg_sum) * pa;\n        pixels[p + 2] = (b_sum * mul_sum >> shg_sum) * pa;\n      } else {\n        pixels[p] = pixels[p + 1] = pixels[p + 2] = 0;\n      }\n\n      r_sum -= r_out_sum;\n      g_sum -= g_out_sum;\n      b_sum -= b_out_sum;\n      a_sum -= a_out_sum;\n      r_out_sum -= stackIn.r;\n      g_out_sum -= stackIn.g;\n      b_out_sum -= stackIn.b;\n      a_out_sum -= stackIn.a;\n      p = x + ((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width << 2;\n      r_sum += r_in_sum += stackIn.r = pixels[p];\n      g_sum += g_in_sum += stackIn.g = pixels[p + 1];\n      b_sum += b_in_sum += stackIn.b = pixels[p + 2];\n      a_sum += a_in_sum += stackIn.a = pixels[p + 3];\n      stackIn = stackIn.next;\n      r_out_sum += pr = stackOut.r;\n      g_out_sum += pg = stackOut.g;\n      b_out_sum += pb = stackOut.b;\n      a_out_sum += pa = stackOut.a;\n      r_in_sum -= pr;\n      g_in_sum -= pg;\n      b_in_sum -= pb;\n      a_in_sum -= pa;\n      stackOut = stackOut.next;\n      yi += width;\n    }\n  }\n\n  return imageData;\n}\n\nfunction processCanvasRGB(canvas, top_x, top_y, width, height, radius) {\n  if (isNaN(radius) || radius < 1) return;\n  radius |= 0;\n  var imageData = getImageDataFromCanvas(canvas, top_x, top_y, width, height);\n  imageData = processImageDataRGB(imageData, top_x, top_y, width, height, radius);\n  canvas.getContext('2d').putImageData(imageData, top_x, top_y);\n}\n\nfunction processImageDataRGB(imageData, top_x, top_y, width, height, radius) {\n  var pixels = imageData.data;\n  var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, r_out_sum, g_out_sum, b_out_sum, r_in_sum, g_in_sum, b_in_sum, pr, pg, pb, rbs;\n  var div = radius + radius + 1;\n  var w4 = width << 2;\n  var widthMinus1 = width - 1;\n  var heightMinus1 = height - 1;\n  var radiusPlus1 = radius + 1;\n  var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;\n  var stackStart = new BlurStack();\n  var stack = stackStart;\n\n  for (i = 1; i < div; i++) {\n    stack = stack.next = new BlurStack();\n    if (i == radiusPlus1) var stackEnd = stack;\n  }\n\n  stack.next = stackStart;\n  var stackIn = null;\n  var stackOut = null;\n  yw = yi = 0;\n  var mul_sum = mul_table[radius];\n  var shg_sum = shg_table[radius];\n\n  for (y = 0; y < height; y++) {\n    r_in_sum = g_in_sum = b_in_sum = r_sum = g_sum = b_sum = 0;\n    r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n    g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);\n    b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);\n    r_sum += sumFactor * pr;\n    g_sum += sumFactor * pg;\n    b_sum += sumFactor * pb;\n    stack = stackStart;\n\n    for (i = 0; i < radiusPlus1; i++) {\n      stack.r = pr;\n      stack.g = pg;\n      stack.b = pb;\n      stack = stack.next;\n    }\n\n    for (i = 1; i < radiusPlus1; i++) {\n      p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n      r_sum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - i);\n      g_sum += (stack.g = pg = pixels[p + 1]) * rbs;\n      b_sum += (stack.b = pb = pixels[p + 2]) * rbs;\n      r_in_sum += pr;\n      g_in_sum += pg;\n      b_in_sum += pb;\n      stack = stack.next;\n    }\n\n    stackIn = stackStart;\n    stackOut = stackEnd;\n\n    for (x = 0; x < width; x++) {\n      pixels[yi] = r_sum * mul_sum >> shg_sum;\n      pixels[yi + 1] = g_sum * mul_sum >> shg_sum;\n      pixels[yi + 2] = b_sum * mul_sum >> shg_sum;\n      r_sum -= r_out_sum;\n      g_sum -= g_out_sum;\n      b_sum -= b_out_sum;\n      r_out_sum -= stackIn.r;\n      g_out_sum -= stackIn.g;\n      b_out_sum -= stackIn.b;\n      p = yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1) << 2;\n      r_in_sum += stackIn.r = pixels[p];\n      g_in_sum += stackIn.g = pixels[p + 1];\n      b_in_sum += stackIn.b = pixels[p + 2];\n      r_sum += r_in_sum;\n      g_sum += g_in_sum;\n      b_sum += b_in_sum;\n      stackIn = stackIn.next;\n      r_out_sum += pr = stackOut.r;\n      g_out_sum += pg = stackOut.g;\n      b_out_sum += pb = stackOut.b;\n      r_in_sum -= pr;\n      g_in_sum -= pg;\n      b_in_sum -= pb;\n      stackOut = stackOut.next;\n      yi += 4;\n    }\n\n    yw += width;\n  }\n\n  for (x = 0; x < width; x++) {\n    g_in_sum = b_in_sum = r_in_sum = g_sum = b_sum = r_sum = 0;\n    yi = x << 2;\n    r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n    g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);\n    b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);\n    r_sum += sumFactor * pr;\n    g_sum += sumFactor * pg;\n    b_sum += sumFactor * pb;\n    stack = stackStart;\n\n    for (i = 0; i < radiusPlus1; i++) {\n      stack.r = pr;\n      stack.g = pg;\n      stack.b = pb;\n      stack = stack.next;\n    }\n\n    yp = width;\n\n    for (i = 1; i <= radius; i++) {\n      yi = yp + x << 2;\n      r_sum += (stack.r = pr = pixels[yi]) * (rbs = radiusPlus1 - i);\n      g_sum += (stack.g = pg = pixels[yi + 1]) * rbs;\n      b_sum += (stack.b = pb = pixels[yi + 2]) * rbs;\n      r_in_sum += pr;\n      g_in_sum += pg;\n      b_in_sum += pb;\n      stack = stack.next;\n\n      if (i < heightMinus1) {\n        yp += width;\n      }\n    }\n\n    yi = x;\n    stackIn = stackStart;\n    stackOut = stackEnd;\n\n    for (y = 0; y < height; y++) {\n      p = yi << 2;\n      pixels[p] = r_sum * mul_sum >> shg_sum;\n      pixels[p + 1] = g_sum * mul_sum >> shg_sum;\n      pixels[p + 2] = b_sum * mul_sum >> shg_sum;\n      r_sum -= r_out_sum;\n      g_sum -= g_out_sum;\n      b_sum -= b_out_sum;\n      r_out_sum -= stackIn.r;\n      g_out_sum -= stackIn.g;\n      b_out_sum -= stackIn.b;\n      p = x + ((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width << 2;\n      r_sum += r_in_sum += stackIn.r = pixels[p];\n      g_sum += g_in_sum += stackIn.g = pixels[p + 1];\n      b_sum += b_in_sum += stackIn.b = pixels[p + 2];\n      stackIn = stackIn.next;\n      r_out_sum += pr = stackOut.r;\n      g_out_sum += pg = stackOut.g;\n      b_out_sum += pb = stackOut.b;\n      r_in_sum -= pr;\n      g_in_sum -= pg;\n      b_in_sum -= pb;\n      stackOut = stackOut.next;\n      yi += width;\n    }\n  }\n\n  return imageData;\n}\n\nfunction BlurStack() {\n  this.r = 0;\n  this.g = 0;\n  this.b = 0;\n  this.a = 0;\n  this.next = null;\n}\n\nmodule.exports = {\n  image: processImage,\n  canvasRGBA: processCanvasRGBA,\n  canvasRGB: processCanvasRGB,\n  imageDataRGBA: processImageDataRGBA,\n  imageDataRGB: processImageDataRGB\n};","map":{"version":3,"sources":["/Users/nehanavgale/Desktop/UMKCStudy/Sem 4/BIgData/BigData_Programming/Covid_Data_Analysis/covidAnalysis/node_modules/stackblur-canvas/src/stackblur.js"],"names":["mul_table","shg_table","processImage","img","canvas","radius","blurAlphaChannel","document","getElementById","HTMLImageElement","w","naturalWidth","h","naturalHeight","HTMLCanvasElement","style","width","height","context","getContext","clearRect","drawImage","isNaN","processCanvasRGBA","processCanvasRGB","getImageDataFromCanvas","top_x","top_y","imageData","getImageData","e","Error","processImageDataRGBA","putImageData","pixels","data","x","y","i","p","yp","yi","yw","r_sum","g_sum","b_sum","a_sum","r_out_sum","g_out_sum","b_out_sum","a_out_sum","r_in_sum","g_in_sum","b_in_sum","a_in_sum","pr","pg","pb","pa","rbs","div","w4","widthMinus1","heightMinus1","radiusPlus1","sumFactor","stackStart","BlurStack","stack","next","stackEnd","stackIn","stackOut","mul_sum","shg_sum","r","g","b","a","processImageDataRGB","module","exports","image","canvasRGBA","canvasRGB","imageDataRGBA","imageDataRGB"],"mappings":"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","sourcesContent":["/*\n    StackBlur - a fast almost Gaussian Blur For Canvas\n\n    Version:     0.5\n    Author:        Mario Klingemann\n    Contact:     mario@quasimondo.com\n    Website:    http://www.quasimondo.com/StackBlurForCanvas\n    Twitter:    @quasimondo\n\n    In case you find this class useful - especially in commercial projects -\n    I am not totally unhappy for a small donation to my PayPal account\n    mario@quasimondo.de\n\n    Or support me on flattr:\n    https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript\n\n    Copyright (c) 2010 Mario Klingemann\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without\n    restriction, including without limitation the rights to use,\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following\n    conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n    */\n\n\nvar mul_table = [\n    512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,\n    454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,\n    482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,\n    437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,\n    497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,\n    320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,\n    446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,\n    329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,\n    505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,\n    399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,\n    324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,\n    268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,\n    451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,\n    385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,\n    332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,\n    289,287,285,282,280,278,275,273,271,269,267,265,263,261,259];\n\n\nvar shg_table = [\n    9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17,\n    17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19,\n    19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20,\n    20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21,\n    21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n    21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22,\n    22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n    22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23,\n    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n    23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24 ];\n\n\nfunction processImage(img, canvas, radius, blurAlphaChannel)\n{\n    if (typeof(img) == 'string') {\n        var img = document.getElementById(img);\n    }\n    else if (typeof HTMLImageElement !== 'undefined' && !img instanceof HTMLImageElement) {\n        return;\n    }\n    var w = img.naturalWidth;\n    var h = img.naturalHeight;\n\n    if (typeof(canvas) == 'string') {\n        var canvas = document.getElementById(canvas);\n    }\n    else if (typeof HTMLCanvasElement !== 'undefined' && !canvas instanceof HTMLCanvasElement) {\n        return;\n    }\n\n    canvas.style.width  = w + 'px';\n    canvas.style.height = h + 'px';\n    canvas.width = w;\n    canvas.height = h;\n\n    var context = canvas.getContext('2d');\n    context.clearRect(0, 0, w, h);\n    context.drawImage(img, 0, 0);\n\n    if (isNaN(radius) || radius < 1) return;\n\n    if (blurAlphaChannel)\n        processCanvasRGBA(canvas, 0, 0, w, h, radius);\n    else\n        processCanvasRGB(canvas, 0, 0, w, h, radius);\n}\n\nfunction getImageDataFromCanvas(canvas, top_x, top_y, width, height)\n{\n    if (typeof(canvas) == 'string')\n        var canvas  = document.getElementById(canvas);\n    else if (typeof HTMLCanvasElement !== 'undefined' && !canvas instanceof HTMLCanvasElement)\n        return;\n\n    var context = canvas.getContext('2d');\n    var imageData;\n\n    try {\n        try {\n            imageData = context.getImageData(top_x, top_y, width, height);\n        } catch(e) {\n            throw new Error(\"unable to access local image data: \" + e);\n            return;\n        }\n    } catch(e) {\n        throw new Error(\"unable to access image data: \" + e);\n    }\n\n    return imageData;\n}\n\nfunction processCanvasRGBA(canvas, top_x, top_y, width, height, radius)\n{\n    if (isNaN(radius) || radius < 1) return;\n    radius |= 0;\n\n    var imageData = getImageDataFromCanvas(canvas, top_x, top_y, width, height);\n\n    imageData = processImageDataRGBA(imageData, top_x, top_y, width, height, radius);\n\n    canvas.getContext('2d').putImageData(imageData, top_x, top_y);\n}\n\nfunction processImageDataRGBA(imageData, top_x, top_y, width, height, radius)\n{\n    var pixels = imageData.data;\n\n    var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum,\n        r_out_sum, g_out_sum, b_out_sum, a_out_sum,\n        r_in_sum, g_in_sum, b_in_sum, a_in_sum,\n        pr, pg, pb, pa, rbs;\n\n    var div = radius + radius + 1;\n    var w4 = width << 2;\n    var widthMinus1  = width - 1;\n    var heightMinus1 = height - 1;\n    var radiusPlus1  = radius + 1;\n    var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;\n\n    var stackStart = new BlurStack();\n    var stack = stackStart;\n    for (i = 1; i < div; i++)\n    {\n        stack = stack.next = new BlurStack();\n        if (i == radiusPlus1) var stackEnd = stack;\n    }\n    stack.next = stackStart;\n    var stackIn = null;\n    var stackOut = null;\n\n    yw = yi = 0;\n\n    var mul_sum = mul_table[radius];\n    var shg_sum = shg_table[radius];\n\n    for (y = 0; y < height; y++)\n    {\n        r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;\n\n        r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n        g_out_sum = radiusPlus1 * (pg = pixels[yi+1]);\n        b_out_sum = radiusPlus1 * (pb = pixels[yi+2]);\n        a_out_sum = radiusPlus1 * (pa = pixels[yi+3]);\n\n        r_sum += sumFactor * pr;\n        g_sum += sumFactor * pg;\n        b_sum += sumFactor * pb;\n        a_sum += sumFactor * pa;\n\n        stack = stackStart;\n\n        for (i = 0; i < radiusPlus1; i++)\n        {\n            stack.r = pr;\n            stack.g = pg;\n            stack.b = pb;\n            stack.a = pa;\n            stack = stack.next;\n        }\n\n        for (i = 1; i < radiusPlus1; i++)\n        {\n            p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n            r_sum += (stack.r = (pr = pixels[p])) * (rbs = radiusPlus1 - i);\n            g_sum += (stack.g = (pg = pixels[p+1])) * rbs;\n            b_sum += (stack.b = (pb = pixels[p+2])) * rbs;\n            a_sum += (stack.a = (pa = pixels[p+3])) * rbs;\n\n            r_in_sum += pr;\n            g_in_sum += pg;\n            b_in_sum += pb;\n            a_in_sum += pa;\n\n            stack = stack.next;\n        }\n\n\n        stackIn = stackStart;\n        stackOut = stackEnd;\n        for (x = 0; x < width; x++)\n        {\n            pixels[yi+3] = pa = (a_sum * mul_sum) >> shg_sum;\n            if (pa != 0)\n            {\n                pa = 255 / pa;\n                pixels[yi]   = ((r_sum * mul_sum) >> shg_sum) * pa;\n                pixels[yi+1] = ((g_sum * mul_sum) >> shg_sum) * pa;\n                pixels[yi+2] = ((b_sum * mul_sum) >> shg_sum) * pa;\n            } else {\n                pixels[yi] = pixels[yi+1] = pixels[yi+2] = 0;\n            }\n\n            r_sum -= r_out_sum;\n            g_sum -= g_out_sum;\n            b_sum -= b_out_sum;\n            a_sum -= a_out_sum;\n\n            r_out_sum -= stackIn.r;\n            g_out_sum -= stackIn.g;\n            b_out_sum -= stackIn.b;\n            a_out_sum -= stackIn.a;\n\n            p =  (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;\n\n            r_in_sum += (stackIn.r = pixels[p]);\n            g_in_sum += (stackIn.g = pixels[p+1]);\n            b_in_sum += (stackIn.b = pixels[p+2]);\n            a_in_sum += (stackIn.a = pixels[p+3]);\n\n            r_sum += r_in_sum;\n            g_sum += g_in_sum;\n            b_sum += b_in_sum;\n            a_sum += a_in_sum;\n\n            stackIn = stackIn.next;\n\n            r_out_sum += (pr = stackOut.r);\n            g_out_sum += (pg = stackOut.g);\n            b_out_sum += (pb = stackOut.b);\n            a_out_sum += (pa = stackOut.a);\n\n            r_in_sum -= pr;\n            g_in_sum -= pg;\n            b_in_sum -= pb;\n            a_in_sum -= pa;\n\n            stackOut = stackOut.next;\n\n            yi += 4;\n        }\n        yw += width;\n    }\n\n\n    for (x = 0; x < width; x++)\n    {\n        g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;\n\n        yi = x << 2;\n        r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n        g_out_sum = radiusPlus1 * (pg = pixels[yi+1]);\n        b_out_sum = radiusPlus1 * (pb = pixels[yi+2]);\n        a_out_sum = radiusPlus1 * (pa = pixels[yi+3]);\n\n        r_sum += sumFactor * pr;\n        g_sum += sumFactor * pg;\n        b_sum += sumFactor * pb;\n        a_sum += sumFactor * pa;\n\n        stack = stackStart;\n\n        for (i = 0; i < radiusPlus1; i++)\n        {\n            stack.r = pr;\n            stack.g = pg;\n            stack.b = pb;\n            stack.a = pa;\n            stack = stack.next;\n        }\n\n        yp = width;\n\n        for (i = 1; i <= radius; i++)\n        {\n            yi = (yp + x) << 2;\n\n            r_sum += (stack.r = (pr = pixels[yi])) * (rbs = radiusPlus1 - i);\n            g_sum += (stack.g = (pg = pixels[yi+1])) * rbs;\n            b_sum += (stack.b = (pb = pixels[yi+2])) * rbs;\n            a_sum += (stack.a = (pa = pixels[yi+3])) * rbs;\n\n            r_in_sum += pr;\n            g_in_sum += pg;\n            b_in_sum += pb;\n            a_in_sum += pa;\n\n            stack = stack.next;\n\n            if(i < heightMinus1)\n            {\n                yp += width;\n            }\n        }\n\n        yi = x;\n        stackIn = stackStart;\n        stackOut = stackEnd;\n        for (y = 0; y < height; y++)\n        {\n            p = yi << 2;\n            pixels[p+3] = pa = (a_sum * mul_sum) >> shg_sum;\n            if (pa > 0)\n            {\n                pa = 255 / pa;\n                pixels[p]   = ((r_sum * mul_sum) >> shg_sum) * pa;\n                pixels[p+1] = ((g_sum * mul_sum) >> shg_sum) * pa;\n                pixels[p+2] = ((b_sum * mul_sum) >> shg_sum) * pa;\n            } else {\n                pixels[p] = pixels[p+1] = pixels[p+2] = 0;\n            }\n\n            r_sum -= r_out_sum;\n            g_sum -= g_out_sum;\n            b_sum -= b_out_sum;\n            a_sum -= a_out_sum;\n\n            r_out_sum -= stackIn.r;\n            g_out_sum -= stackIn.g;\n            b_out_sum -= stackIn.b;\n            a_out_sum -= stackIn.a;\n\n            p = (x + (((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width)) << 2;\n\n            r_sum += (r_in_sum += (stackIn.r = pixels[p]));\n            g_sum += (g_in_sum += (stackIn.g = pixels[p+1]));\n            b_sum += (b_in_sum += (stackIn.b = pixels[p+2]));\n            a_sum += (a_in_sum += (stackIn.a = pixels[p+3]));\n\n            stackIn = stackIn.next;\n\n            r_out_sum += (pr = stackOut.r);\n            g_out_sum += (pg = stackOut.g);\n            b_out_sum += (pb = stackOut.b);\n            a_out_sum += (pa = stackOut.a);\n\n            r_in_sum -= pr;\n            g_in_sum -= pg;\n            b_in_sum -= pb;\n            a_in_sum -= pa;\n\n            stackOut = stackOut.next;\n\n            yi += width;\n        }\n    }\n    return imageData;\n}\n\nfunction processCanvasRGB(canvas, top_x, top_y, width, height, radius)\n{\n    if (isNaN(radius) || radius < 1) return;\n    radius |= 0;\n\n    var imageData = getImageDataFromCanvas(canvas, top_x, top_y, width, height);\n    imageData = processImageDataRGB(imageData, top_x, top_y, width, height, radius);\n\n    canvas.getContext('2d').putImageData(imageData, top_x, top_y);\n}\n\nfunction processImageDataRGB(imageData, top_x, top_y, width, height, radius)\n{\n    var pixels = imageData.data;\n\n    var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum,\n        r_out_sum, g_out_sum, b_out_sum,\n        r_in_sum, g_in_sum, b_in_sum,\n        pr, pg, pb, rbs;\n\n    var div = radius + radius + 1;\n    var w4 = width << 2;\n    var widthMinus1  = width - 1;\n    var heightMinus1 = height - 1;\n    var radiusPlus1  = radius + 1;\n    var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;\n\n    var stackStart = new BlurStack();\n    var stack = stackStart;\n    for (i = 1; i < div; i++)\n    {\n        stack = stack.next = new BlurStack();\n        if (i == radiusPlus1) var stackEnd = stack;\n    }\n    stack.next = stackStart;\n    var stackIn = null;\n    var stackOut = null;\n\n    yw = yi = 0;\n\n    var mul_sum = mul_table[radius];\n    var shg_sum = shg_table[radius];\n\n    for (y = 0; y < height; y++)\n    {\n        r_in_sum = g_in_sum = b_in_sum = r_sum = g_sum = b_sum = 0;\n\n        r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n        g_out_sum = radiusPlus1 * (pg = pixels[yi+1]);\n        b_out_sum = radiusPlus1 * (pb = pixels[yi+2]);\n\n        r_sum += sumFactor * pr;\n        g_sum += sumFactor * pg;\n        b_sum += sumFactor * pb;\n\n        stack = stackStart;\n\n        for (i = 0; i < radiusPlus1; i++)\n        {\n            stack.r = pr;\n            stack.g = pg;\n            stack.b = pb;\n            stack = stack.next;\n        }\n\n        for (i = 1; i < radiusPlus1; i++)\n        {\n            p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n            r_sum += (stack.r = (pr = pixels[p])) * (rbs = radiusPlus1 - i);\n            g_sum += (stack.g = (pg = pixels[p+1])) * rbs;\n            b_sum += (stack.b = (pb = pixels[p+2])) * rbs;\n\n            r_in_sum += pr;\n            g_in_sum += pg;\n            b_in_sum += pb;\n\n            stack = stack.next;\n        }\n\n\n        stackIn = stackStart;\n        stackOut = stackEnd;\n        for (x = 0; x < width; x++)\n        {\n            pixels[yi]   = (r_sum * mul_sum) >> shg_sum;\n            pixels[yi+1] = (g_sum * mul_sum) >> shg_sum;\n            pixels[yi+2] = (b_sum * mul_sum) >> shg_sum;\n\n            r_sum -= r_out_sum;\n            g_sum -= g_out_sum;\n            b_sum -= b_out_sum;\n\n            r_out_sum -= stackIn.r;\n            g_out_sum -= stackIn.g;\n            b_out_sum -= stackIn.b;\n\n            p =  (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;\n\n            r_in_sum += (stackIn.r = pixels[p]);\n            g_in_sum += (stackIn.g = pixels[p+1]);\n            b_in_sum += (stackIn.b = pixels[p+2]);\n\n            r_sum += r_in_sum;\n            g_sum += g_in_sum;\n            b_sum += b_in_sum;\n\n            stackIn = stackIn.next;\n\n            r_out_sum += (pr = stackOut.r);\n            g_out_sum += (pg = stackOut.g);\n            b_out_sum += (pb = stackOut.b);\n\n            r_in_sum -= pr;\n            g_in_sum -= pg;\n            b_in_sum -= pb;\n\n            stackOut = stackOut.next;\n\n            yi += 4;\n        }\n        yw += width;\n    }\n\n\n    for (x = 0; x < width; x++)\n    {\n        g_in_sum = b_in_sum = r_in_sum = g_sum = b_sum = r_sum = 0;\n\n        yi = x << 2;\n        r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n        g_out_sum = radiusPlus1 * (pg = pixels[yi+1]);\n        b_out_sum = radiusPlus1 * (pb = pixels[yi+2]);\n\n        r_sum += sumFactor * pr;\n        g_sum += sumFactor * pg;\n        b_sum += sumFactor * pb;\n\n        stack = stackStart;\n\n        for (i = 0; i < radiusPlus1; i++)\n        {\n            stack.r = pr;\n            stack.g = pg;\n            stack.b = pb;\n            stack = stack.next;\n        }\n\n        yp = width;\n\n        for (i = 1; i <= radius; i++)\n        {\n            yi = (yp + x) << 2;\n\n            r_sum += (stack.r = (pr = pixels[yi])) * (rbs = radiusPlus1 - i);\n            g_sum += (stack.g = (pg = pixels[yi+1])) * rbs;\n            b_sum += (stack.b = (pb = pixels[yi+2])) * rbs;\n\n            r_in_sum += pr;\n            g_in_sum += pg;\n            b_in_sum += pb;\n\n            stack = stack.next;\n\n            if(i < heightMinus1)\n            {\n                yp += width;\n            }\n        }\n\n        yi = x;\n        stackIn = stackStart;\n        stackOut = stackEnd;\n        for (y = 0; y < height; y++)\n        {\n            p = yi << 2;\n            pixels[p]   = (r_sum * mul_sum) >> shg_sum;\n            pixels[p+1] = (g_sum * mul_sum) >> shg_sum;\n            pixels[p+2] = (b_sum * mul_sum) >> shg_sum;\n\n            r_sum -= r_out_sum;\n            g_sum -= g_out_sum;\n            b_sum -= b_out_sum;\n\n            r_out_sum -= stackIn.r;\n            g_out_sum -= stackIn.g;\n            b_out_sum -= stackIn.b;\n\n            p = (x + (((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width)) << 2;\n\n            r_sum += (r_in_sum += (stackIn.r = pixels[p]));\n            g_sum += (g_in_sum += (stackIn.g = pixels[p+1]));\n            b_sum += (b_in_sum += (stackIn.b = pixels[p+2]));\n\n            stackIn = stackIn.next;\n\n            r_out_sum += (pr = stackOut.r);\n            g_out_sum += (pg = stackOut.g);\n            b_out_sum += (pb = stackOut.b);\n\n            r_in_sum -= pr;\n            g_in_sum -= pg;\n            b_in_sum -= pb;\n\n            stackOut = stackOut.next;\n\n            yi += width;\n        }\n    }\n\n    return imageData;\n}\n\nfunction BlurStack()\n{\n    this.r = 0;\n    this.g = 0;\n    this.b = 0;\n    this.a = 0;\n    this.next = null;\n}\n\nmodule.exports = {\n    image: processImage,\n    canvasRGBA: processCanvasRGBA,\n    canvasRGB: processCanvasRGB,\n    imageDataRGBA: processImageDataRGBA,\n    imageDataRGB: processImageDataRGB\n};\n"]},"metadata":{},"sourceType":"script"}