{"ast":null,"code":"/**\n * Radar column series module.\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\n\nimport { ColumnSeries, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\nimport { visualProperties } from \"../../core/Sprite\";\nimport { RadarColumn } from \"../elements/RadarColumn\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $object from \"../../core/utils/Object\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $array from \"../../core/utils/Array\";\n/**\n * ============================================================================\n * DATA ITEM\n * ============================================================================\n * @hidden\n */\n\n/**\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\n *\n * @see {@link DataItem}\n */\n\nvar RadarColumnSeriesDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(RadarColumnSeriesDataItem, _super);\n  /**\n   * Constructor\n   */\n\n\n  function RadarColumnSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ColumnSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return RadarColumnSeriesDataItem;\n}(ColumnSeriesDataItem);\n\nexport { RadarColumnSeriesDataItem };\n/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Defines [[Series]] for a 3D column graph.\n *\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\n * @todo Example\n * @important\n */\n\nvar RadarColumnSeries =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(RadarColumnSeries, _super);\n  /**\n   * Constructor\n   */\n\n\n  function RadarColumnSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"RadarColumnSeries\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\n   * Creates and returns a RadarColumn element to use as column in radar chart.\n   *\n   * @return RadarColumn.\n   */\n\n\n  RadarColumnSeries.prototype.createColumnTemplate = function () {\n    return new RadarColumn();\n  };\n  /**\n   * (Re)validates the whole series, effectively causing it to redraw.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  RadarColumnSeries.prototype.validate = function () {\n    // so that radius would be updated\n    if (this.chart.invalid) {\n      this.chart.validate();\n    }\n\n    _super.prototype.validate.call(this);\n  };\n  /**\n   * Validates data item's element, effectively redrawing it.\n   *\n   * @ignore Exclude from docs\n   * @param dataItem  Data item\n   */\n\n\n  RadarColumnSeries.prototype.validateDataElementReal = function (dataItem) {\n    var _this = this;\n\n    var startAngle = this.chart.startAngle;\n    var endAngle = this.chart.endAngle;\n    var yField = this.yField;\n    var yOpenField = this.yOpenField;\n    var xField = this.xField;\n    var xOpenField = this.xOpenField;\n    var lAngle;\n    var rAngle;\n    var tRadius;\n    var bRadius;\n    var startLocation = this.getStartLocation(dataItem);\n    var endLocation = this.getEndLocation(dataItem);\n    var cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\n    var template = this.columns.template;\n    var percentWidth = template.percentWidth;\n\n    if ($type.isNaN(percentWidth)) {\n      percentWidth = 100;\n    }\n\n    var offset = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\n    startLocation += offset;\n    endLocation -= offset;\n\n    if (this.baseAxis == this.xAxis) {\n      tRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"),\n        y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\")\n      });\n      bRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"),\n        y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\")\n      });\n      lAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\n      rAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\n      startAngle = startAngle + startLocation * cellAngle;\n      endAngle = endAngle - (1 - endLocation) * cellAngle;\n    } else {\n      tRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"),\n        y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\")\n      });\n      bRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"),\n        y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\")\n      });\n      lAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\n      rAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\n    }\n\n    if (rAngle < lAngle) {\n      var temp = rAngle;\n      rAngle = lAngle;\n      lAngle = temp;\n    }\n\n    lAngle = $math.fitToRange(lAngle, startAngle, endAngle);\n    rAngle = $math.fitToRange(rAngle, startAngle, endAngle);\n    var radarColumn = dataItem.column;\n\n    if (!radarColumn) {\n      radarColumn = this.columns.create();\n      dataItem.column = radarColumn;\n      $object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\n      dataItem.addSprite(radarColumn);\n      this.setColumnStates(radarColumn);\n    }\n\n    var slice = radarColumn.radarColumn;\n    slice.startAngle = lAngle;\n    var arc = rAngle - lAngle;\n\n    if (arc > 0) {\n      slice.arc = arc;\n      slice.radius = tRadius;\n      slice.innerRadius = bRadius;\n      radarColumn.__disabled = false;\n      radarColumn.parent = this.columnsContainer;\n      $iter.each(this.axisRanges.iterator(), function (axisRange) {\n        var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\n\n        if (!rangeColumn) {\n          rangeColumn = _this.columns.create();\n          $object.forceCopyProperties(_this.columns.template, rangeColumn, visualProperties);\n          $object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\n\n          if (rangeColumn.dataItem) {\n            $array.remove(rangeColumn.dataItem.sprites, rangeColumn);\n          }\n\n          dataItem.addSprite(rangeColumn);\n\n          _this.setColumnStates(rangeColumn);\n\n          dataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\n        }\n\n        var slice = radarColumn.radarColumn;\n        slice.startAngle = lAngle;\n        slice.arc = arc;\n        slice.radius = tRadius;\n        slice.innerRadius = bRadius;\n\n        if (slice.invalid) {\n          slice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\n        }\n\n        rangeColumn.__disabled = false;\n        rangeColumn.parent = _this.columnsContainer;\n      });\n    } else {\n      this.disableUnusedColumns(dataItem);\n    }\n  };\n  /**\n   * Returns an [[IPoint]] coordinates of the specific Serie's data point.\n   *\n   * @param    dataItem   Data item\n   * @param    xKey       Name of X data field\n   * @param    yKey       Name of Y data field\n   * @param    locationX  X location\n   * @param    locationY  Y location\n   * @param    stackKeyX  ?\n   * @param    stackKeyY  ?\n   * @returns             Coordinates\n   */\n\n\n  RadarColumnSeries.prototype.getPoint = function (dataItem, xKey, yKey, locationX, locationY, stackKeyX, stackKeyY) {\n    if (!stackKeyX) {\n      stackKeyX = \"valueX\";\n    }\n\n    if (!stackKeyY) {\n      stackKeyY = \"valueY\";\n    }\n\n    var x = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\n    var y = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\n    var radius = $math.getDistance({\n      x: x,\n      y: y\n    }); // hack to be able to determine angle later\n\n    if (radius == 0) {\n      radius = 0.00001;\n    }\n\n    var angle = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\n    return {\n      x: radius * $math.cos(angle),\n      y: radius * $math.sin(angle)\n    };\n  };\n  /**\n   * Returns an SVG path to be used as a mask for the series.\n   *\n   * @return SVG path\n   */\n\n\n  RadarColumnSeries.prototype.getMaskPath = function () {\n    var renderer = this.yAxis.renderer;\n    return $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\n  };\n\n  return RadarColumnSeries;\n}(ColumnSeries);\n\nexport { RadarColumnSeries };\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n *\n * @ignore\n */\n\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/charts/series/RadarColumnSeries.ts"],"names":[],"mappings":"AAAA;;AAEG;;AAEH;;;;;AAKG;;AACH,SAAS,YAAT,EAAqH,oBAArH,QAAiJ,wBAAjJ;AACA,SAAiB,gBAAjB,QAAyC,mBAAzC;AAGA,SAAS,WAAT,QAA4B,yBAA5B;AACA,SAAS,QAAT,QAAyB,qBAAzB;AACA,OAAO,KAAK,KAAZ,MAAuB,2BAAvB;AACA,OAAO,KAAK,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAK,OAAZ,MAAyB,yBAAzB;AACA,OAAO,KAAK,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAK,KAAZ,MAAuB,2BAAvB;AACA,OAAO,KAAK,MAAZ,MAAwB,wBAAxB;AAEA;;;;;AAKG;;AAEH;;;;AAIG;;AACH,IAAA,yBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA+C,EAAA,OAAA,CAAA,SAAA,CAAA,yBAAA,EAAA,MAAA;AAa9C;;AAEG;;;AACH,WAAA,yBAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;AAEC,IAAA,KAAI,CAAC,SAAL,GAAiB,sBAAjB;;AACA,IAAA,KAAI,CAAC,UAAL;;;AACA;;AACF,SAAA,yBAAA;AAAC,CArBD,CAA+C,oBAA/C,CAAA;;;AAsDA;;;;;AAKG;;AAEH;;;;;;;AAOG;;AACH,IAAA,iBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuC,EAAA,OAAA,CAAA,SAAA,CAAA,iBAAA,EAAA,MAAA;AAmCtC;;AAEG;;;AACH,WAAA,iBAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;AAEC,IAAA,KAAI,CAAC,SAAL,GAAiB,mBAAjB;;AACA,IAAA,KAAI,CAAC,UAAL;;;AACA;AAED;;;;AAIG;;;AACO,EAAA,iBAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AACC,WAAO,IAAI,WAAJ,EAAP;AACA,GAFS;AAIV;;;;AAIG;;;AACI,EAAA,iBAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AAEC;AACA,QAAI,KAAK,KAAL,CAAW,OAAf,EAAwB;AACvB,WAAK,KAAL,CAAW,QAAX;AACA;;AAED,IAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd;AACA,GARM;AAUP;;;;;AAKG;;;AACI,EAAA,iBAAA,CAAA,SAAA,CAAA,uBAAA,GAAP,UAA+B,QAA/B,EAA0D;AAA1D,QAAA,KAAA,GAAA,IAAA;;AACC,QAAI,UAAU,GAAG,KAAK,KAAL,CAAW,UAA5B;AACA,QAAI,QAAQ,GAAG,KAAK,KAAL,CAAW,QAA1B;AAEA,QAAI,MAAM,GAAW,KAAK,MAA1B;AACA,QAAI,UAAU,GAAW,KAAK,UAA9B;AACA,QAAI,MAAM,GAAW,KAAK,MAA1B;AACA,QAAI,UAAU,GAAW,KAAK,UAA9B;AAEA,QAAI,MAAJ;AACA,QAAI,MAAJ;AAEA,QAAI,OAAJ;AACA,QAAI,OAAJ;AAEA,QAAI,aAAa,GAAG,KAAK,gBAAL,CAAsB,QAAtB,CAApB;AACA,QAAI,WAAW,GAAG,KAAK,cAAL,CAAoB,QAApB,CAAlB;AAEA,QAAI,SAAS,GAAG,CAAC,QAAQ,GAAG,UAAZ,KAA2B,KAAK,SAAL,CAAe,MAAf,IAAyB,KAAK,GAAL,GAAW,KAAK,KAAzC,CAA3B,CAAhB;AAEA,QAAI,QAAQ,GAAW,KAAK,OAAL,CAAa,QAApC;AAEA,QAAI,YAAY,GAAW,QAAQ,CAAC,YAApC;;AAEA,QAAI,KAAK,CAAC,KAAN,CAAY,YAAZ,CAAJ,EAA+B;AAC9B,MAAA,YAAY,GAAG,GAAf;AACA;;AAED,QAAI,MAAM,GAAW,KAAK,CAAC,KAAN,CAAY,CAAC,WAAW,GAAG,aAAf,KAAiC,IAAI,YAAY,GAAG,GAApD,IAA2D,CAAvE,EAA0E,CAA1E,CAArB;AACA,IAAA,aAAa,IAAI,MAAjB;AACA,IAAA,WAAW,IAAI,MAAf;;AAEA,QAAI,KAAK,QAAL,IAAiB,KAAK,KAA1B,EAAiC;AAChC,MAAA,OAAO,GAAG,KAAK,CAAC,WAAN,CAAkB;AAAE,QAAA,CAAC,EAAE,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,MAA1B,EAAkC,QAAQ,CAAC,SAAT,CAAmB,MAAnB,CAAlC,EAA8D,QAA9D,CAAL;AAA8E,QAAA,CAAC,EAAE,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,MAA1B,EAAkC,QAAQ,CAAC,SAAT,CAAmB,MAAnB,CAAlC,EAA8D,QAA9D;AAAjF,OAAlB,CAAV;AACA,MAAA,OAAO,GAAG,KAAK,CAAC,WAAN,CAAkB;AAAE,QAAA,CAAC,EAAE,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,UAA1B,EAAsC,QAAQ,CAAC,SAAT,CAAmB,UAAnB,CAAtC,EAAsE,QAAtE,CAAL;AAAsF,QAAA,CAAC,EAAE,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,UAA1B,EAAsC,QAAQ,CAAC,SAAT,CAAmB,UAAnB,CAAtC,EAAsE,QAAtE;AAAzF,OAAlB,CAAV;AAEA,MAAA,MAAM,GAAG,KAAK,KAAL,CAAW,QAAX,CAAoB,QAApB,EAA8B,UAA9B,EAA0C,aAA1C,EAAyD,QAAzD,CAAT;AACA,MAAA,MAAM,GAAG,KAAK,KAAL,CAAW,QAAX,CAAoB,QAApB,EAA8B,MAA9B,EAAsC,WAAtC,EAAmD,QAAnD,CAAT;AAEA,MAAA,UAAU,GAAG,UAAU,GAAG,aAAa,GAAG,SAA1C;AACA,MAAA,QAAQ,GAAG,QAAQ,GAAG,CAAC,IAAI,WAAL,IAAoB,SAA1C;AACA,KATD,MAUK;AACJ,MAAA,OAAO,GAAG,KAAK,CAAC,WAAN,CAAkB;AAAE,QAAA,CAAC,EAAE,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,MAA1B,EAAkC,aAAlC,EAAiD,QAAjD,CAAL;AAAiE,QAAA,CAAC,EAAE,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,MAA1B,EAAkC,aAAlC,EAAiD,QAAjD;AAApE,OAAlB,CAAV;AACA,MAAA,OAAO,GAAG,KAAK,CAAC,WAAN,CAAkB;AAAE,QAAA,CAAC,EAAE,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,UAA1B,EAAsC,WAAtC,EAAmD,QAAnD,CAAL;AAAmE,QAAA,CAAC,EAAE,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,UAA1B,EAAsC,WAAtC,EAAmD,QAAnD;AAAtE,OAAlB,CAAV;AAEA,MAAA,MAAM,GAAG,KAAK,KAAL,CAAW,QAAX,CAAoB,QAApB,EAA8B,MAA9B,EAAsC,QAAQ,CAAC,SAAT,CAAmB,MAAnB,CAAtC,EAAkE,QAAlE,CAAT;AAEA,MAAA,MAAM,GAAG,KAAK,KAAL,CAAW,QAAX,CAAoB,QAApB,EAA8B,UAA9B,EAA0C,QAAQ,CAAC,SAAT,CAAmB,UAAnB,CAA1C,EAA0E,QAA1E,CAAT;AACA;;AAED,QAAI,MAAM,GAAG,MAAb,EAAqB;AACpB,UAAI,IAAI,GAAG,MAAX;AACA,MAAA,MAAM,GAAG,MAAT;AACA,MAAA,MAAM,GAAG,IAAT;AACA;;AAED,IAAA,MAAM,GAAG,KAAK,CAAC,UAAN,CAAiB,MAAjB,EAAyB,UAAzB,EAAqC,QAArC,CAAT;AACA,IAAA,MAAM,GAAG,KAAK,CAAC,UAAN,CAAiB,MAAjB,EAAyB,UAAzB,EAAqC,QAArC,CAAT;AAEA,QAAI,WAAW,GAAG,QAAQ,CAAC,MAA3B;;AACA,QAAI,CAAC,WAAL,EAAkB;AACjB,MAAA,WAAW,GAAG,KAAK,OAAL,CAAa,MAAb,EAAd;AACA,MAAA,QAAQ,CAAC,MAAT,GAAkB,WAAlB;AACA,MAAA,OAAO,CAAC,mBAAR,CAA4B,KAAK,OAAL,CAAa,QAAzC,EAAmD,WAAnD,EAAgE,gBAAhE;AACA,MAAA,QAAQ,CAAC,SAAT,CAAmB,WAAnB;AACA,WAAK,eAAL,CAAqB,WAArB;AACA;;AAED,QAAI,KAAK,GAAG,WAAW,CAAC,WAAxB;AAEA,IAAA,KAAK,CAAC,UAAN,GAAmB,MAAnB;AAEA,QAAI,GAAG,GAAG,MAAM,GAAG,MAAnB;;AAEA,QAAI,GAAG,GAAG,CAAV,EAAa;AACZ,MAAA,KAAK,CAAC,GAAN,GAAY,GAAZ;AACA,MAAA,KAAK,CAAC,MAAN,GAAe,OAAf;AACA,MAAA,KAAK,CAAC,WAAN,GAAoB,OAApB;AACA,MAAA,WAAW,CAAC,UAAZ,GAAyB,KAAzB;AAEA,MAAA,WAAW,CAAC,MAAZ,GAAqB,KAAK,gBAA1B;AAEA,MAAA,KAAK,CAAC,IAAN,CAAW,KAAK,UAAL,CAAgB,QAAhB,EAAX,EAAuC,UAAC,SAAD,EAAU;AAChD,YAAI,WAAW,GAAG,QAAQ,CAAC,aAAT,CAAuB,MAAvB,CAA8B,SAAS,CAAC,GAAxC,CAAlB;;AACA,YAAI,CAAC,WAAL,EAAkB;AACjB,UAAA,WAAW,GAAG,KAAI,CAAC,OAAL,CAAa,MAAb,EAAd;AAEA,UAAA,OAAO,CAAC,mBAAR,CAA4B,KAAI,CAAC,OAAL,CAAa,QAAzC,EAAmD,WAAnD,EAAgE,gBAAhE;AACA,UAAA,OAAO,CAAC,cAAR,CAAuB,SAAS,CAAC,QAAjC,EAA2C,WAA3C,EAAwD,gBAAxD,EAJiB,CAI0D;;AAE3E,cAAI,WAAW,CAAC,QAAhB,EAA0B;AACzB,YAAA,MAAM,CAAC,MAAP,CAAc,WAAW,CAAC,QAAZ,CAAqB,OAAnC,EAA4C,WAA5C;AACA;;AAED,UAAA,QAAQ,CAAC,SAAT,CAAmB,WAAnB;;AACA,UAAA,KAAI,CAAC,eAAL,CAAqB,WAArB;;AACA,UAAA,QAAQ,CAAC,aAAT,CAAuB,MAAvB,CAA8B,SAAS,CAAC,GAAxC,EAA6C,WAA7C;AACA;;AAED,YAAI,KAAK,GAAG,WAAW,CAAC,WAAxB;AACA,QAAA,KAAK,CAAC,UAAN,GAAmB,MAAnB;AACA,QAAA,KAAK,CAAC,GAAN,GAAY,GAAZ;AACA,QAAA,KAAK,CAAC,MAAN,GAAe,OAAf;AACA,QAAA,KAAK,CAAC,WAAN,GAAoB,OAApB;;AAEA,YAAI,KAAK,CAAC,OAAV,EAAmB;AAClB,UAAA,KAAK,CAAC,QAAN,GADkB,CACA;AAClB;;AAED,QAAA,WAAW,CAAC,UAAZ,GAAyB,KAAzB;AACA,QAAA,WAAW,CAAC,MAAZ,GAAqB,KAAI,CAAC,gBAA1B;AACA,OA7BD;AA8BA,KAtCD,MAuCK;AACJ,WAAK,oBAAL,CAA0B,QAA1B;AACA;AACD,GArHM;AAuHP;;;;;;;;;;;AAWG;;;AACI,EAAA,iBAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,QAAhB,EAAqD,IAArD,EAAmE,IAAnE,EAAiF,SAAjF,EAAqG,SAArG,EAAyH,SAAzH,EAA6I,SAA7I,EAA+J;AAE9J,QAAI,CAAC,SAAL,EAAgB;AACf,MAAA,SAAS,GAAG,QAAZ;AACA;;AACD,QAAI,CAAC,SAAL,EAAgB;AACf,MAAA,SAAS,GAAG,QAAZ;AACA;;AAED,QAAI,CAAC,GAAW,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,IAA1B,EAAgC,SAAhC,EAA2C,SAA3C,CAAhB;AACA,QAAI,CAAC,GAAW,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB,EAA0B,IAA1B,EAAgC,SAAhC,EAA2C,SAA3C,CAAhB;AAEA,QAAI,MAAM,GAAW,KAAK,CAAC,WAAN,CAAkB;AAAE,MAAA,CAAC,EAAE,CAAL;AAAQ,MAAA,CAAC,EAAE;AAAX,KAAlB,CAArB,CAZ8J,CAa9J;;AACA,QAAG,MAAM,IAAI,CAAb,EAAe;AACd,MAAA,MAAM,GAAG,OAAT;AACA;;AAED,QAAI,KAAK,GAAW,KAAK,KAAL,CAAW,QAAX,CAAoB,QAApB,EAA8B,IAA9B,EAAoC,SAApC,EAA+C,SAA/C,CAApB;AAEA,WAAO;AAAE,MAAA,CAAC,EAAE,MAAM,GAAG,KAAK,CAAC,GAAN,CAAU,KAAV,CAAd;AAAgC,MAAA,CAAC,EAAE,MAAM,GAAG,KAAK,CAAC,GAAN,CAAU,KAAV;AAA5C,KAAP;AACA,GArBM;AAwBP;;;;AAIG;;;AACO,EAAA,iBAAA,CAAA,SAAA,CAAA,WAAA,GAAV,YAAA;AACC,QAAI,QAAQ,GAA2C,KAAK,KAAL,CAAW,QAAlE;AACA,WAAO,KAAK,CAAC,GAAN,CAAU,QAAQ,CAAC,UAAnB,EAA+B,QAAQ,CAAC,QAAT,GAAoB,QAAQ,CAAC,UAA5D,EAAwE,QAAQ,CAAC,WAAjF,EAA8F,QAAQ,CAAC,gBAAvG,CAAP;AACA,GAHS;;AAKX,SAAA,iBAAA;AAAC,CA/OD,CAAuC,YAAvC,CAAA;;;AAiPA;;;;;AAKG;;AACH,QAAQ,CAAC,iBAAT,CAA2B,mBAA3B,IAAkD,iBAAlD;AACA,QAAQ,CAAC,iBAAT,CAA2B,2BAA3B,IAA0D,yBAA1D","sourcesContent":["/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\r\n\t\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\t\t\t\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\r\n\t\tif (arc > 0) {\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = radarColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = this.columnsContainer;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\t\t// hack to be able to determine angle later\r\n\t\tif(radius == 0){\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}