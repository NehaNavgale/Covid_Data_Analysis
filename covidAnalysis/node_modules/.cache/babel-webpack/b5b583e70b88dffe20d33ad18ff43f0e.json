{"ast":null,"code":"/**\n * A module with functionality for buildin a scrollbar with an XY graph in it.\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\n\nimport { Scrollbar } from \"../../core/elements/Scrollbar\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { List } from \"../../core/utils/List\";\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\nimport { XYChart } from \"../types/XYChart\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * A special version of the Scrollbar that has an XY chart in it.\n *\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\n *\n * However, can be used as standalone element.\n *\n * @see {@link IXYChartScrollbarEvents} for a list of available events\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\n * @important\n */\n\nvar XYChartScrollbar =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(XYChartScrollbar, _super);\n  /**\n   * Constructor\n   */\n\n\n  function XYChartScrollbar() {\n    var _this = _super.call(this) || this;\n    /**\n     * A chart element Scrollbar is for.\n     */\n\n\n    _this._chart = new MutableValueDisposer();\n    _this.className = \"XYChartScrollbar\";\n    var interfaceColors = new InterfaceColorSet();\n\n    _this.padding(0, 0, 0, 0);\n\n    var scrollbarChart = _this.createChild(XYChart);\n\n    scrollbarChart.shouldClone = false;\n    scrollbarChart.margin(0, 0, 0, 0);\n    scrollbarChart.padding(0, 0, 0, 0);\n    scrollbarChart.interactionsEnabled = false;\n    _this._scrollbarChart = scrollbarChart;\n\n    _this._disposers.push(_this._scrollbarChart);\n\n    _this.minHeight = 60;\n    _this.minWidth = 60;\n\n    var unselectedOverlay = _this.createChild(Sprite);\n\n    unselectedOverlay.shouldClone = false;\n    unselectedOverlay.setElement(_this.paper.add(\"path\"));\n    unselectedOverlay.fill = interfaceColors.getFor(\"background\");\n    unselectedOverlay.fillOpacity = 0.8;\n    unselectedOverlay.interactionsEnabled = false;\n    unselectedOverlay.isMeasured = false;\n    unselectedOverlay.toBack();\n    _this._unselectedOverlay = unselectedOverlay;\n\n    _this._disposers.push(_this._unselectedOverlay);\n\n    scrollbarChart.toBack();\n\n    _this.background.cornerRadius(0, 0, 0, 0);\n\n    var thumbBackground = _this.thumb.background;\n    thumbBackground.cornerRadius(0, 0, 0, 0);\n    thumbBackground.fillOpacity = 0;\n    thumbBackground.fill = interfaceColors.getFor(\"background\");\n    var hoverState = thumbBackground.states.getKey(\"hover\");\n\n    if (hoverState) {\n      hoverState.properties.fillOpacity = 0.2;\n    }\n\n    var downState = thumbBackground.states.getKey(\"down\");\n\n    if (downState) {\n      downState.properties.fillOpacity = 0.4;\n    }\n\n    _this._disposers.push(_this._chart);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(XYChartScrollbar.prototype, \"series\", {\n    /**\n     * A list of series that are used to draw graph(s) on the scrollbar.\n     *\n     * @readonly\n     * @return Series\n     */\n    get: function get() {\n      if (!this._series) {\n        this._series = new List();\n\n        this._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false));\n\n        this._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false));\n      }\n\n      return this._series;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Decorates a new series when they are pushed into a `series` list.\n   *\n   * @param event Event\n   */\n\n  XYChartScrollbar.prototype.handleSeriesAdded = function (event) {\n    var sourceSeries = event.newValue;\n    var scrollbarChart = this.scrollbarChart;\n    scrollbarChart.zoomOutButton.disabled = true;\n    this.chart = sourceSeries.chart;\n    var addXAxis = true;\n    var addYAxis = true; // check if we haven't added clone of x or y axis before\n\n    $iter.each(this.series.iterator(), function (series) {\n      if (series != sourceSeries) {\n        if (series.xAxis == sourceSeries.xAxis) {\n          addXAxis = false;\n        }\n\n        if (series.yAxis == sourceSeries.yAxis) {\n          addYAxis = false;\n        }\n      }\n    });\n    var interfaceColors = new InterfaceColorSet();\n    var series = sourceSeries.clone();\n\n    if (addXAxis) {\n      var xAxis = sourceSeries.xAxis.clone();\n      scrollbarChart.xAxes.moveValue(xAxis);\n      xAxis.title.disabled = true;\n      xAxis.rangeChangeDuration = 0;\n      xAxis.id = sourceSeries.uid;\n      var renderer = xAxis.renderer;\n      renderer.ticks.template.disabled = true;\n      renderer.inside = true;\n      renderer.labels.template.inside = true;\n      renderer.line.strokeOpacity = 0;\n      renderer.minLabelPosition = 0.02;\n      renderer.maxLabelPosition = 0.98;\n      renderer.line.disabled = true;\n      renderer.axisFills.template.disabled = true;\n      renderer.baseGrid.disabled = true;\n      renderer.grid.template.strokeOpacity = 0.05;\n      renderer.minWidth = undefined;\n      renderer.minHeight = undefined;\n      renderer.padding(0, 0, 0, 0);\n      renderer.chart = scrollbarChart;\n      renderer.margin(0, 0, 0, 0);\n      var labelsTemplate = renderer.labels.template;\n      labelsTemplate.fillOpacity = 0.5;\n      series.xAxis = xAxis;\n    } else {// @todo find clone, otherwise there might be probs with multiple axes\n    }\n\n    if (addYAxis) {\n      var yAxis = sourceSeries.yAxis.clone();\n      scrollbarChart.yAxes.moveValue(yAxis);\n      yAxis.title.disabled = true;\n      yAxis.rangeChangeDuration = 0;\n      var renderer = yAxis.renderer;\n      renderer.ticks.template.disabled = true;\n      renderer.inside = true;\n      renderer.labels.template.inside = true;\n      renderer.line.strokeOpacity = 0;\n      renderer.minLabelPosition = 0.02;\n      renderer.maxLabelPosition = 0.98;\n      renderer.line.disabled = true;\n      renderer.axisFills.template.disabled = true;\n      renderer.grid.template.stroke = interfaceColors.getFor(\"background\");\n      renderer.baseGrid.disabled = true;\n      renderer.grid.template.strokeOpacity = 0.05;\n      renderer.minWidth = undefined;\n      renderer.minHeight = undefined;\n      renderer.chart = scrollbarChart;\n      renderer.padding(0, 0, 0, 0);\n      renderer.margin(0, 0, 0, 0);\n      var labelsTemplate = renderer.labels.template;\n      labelsTemplate.fillOpacity = 0.5;\n      series.yAxis = yAxis;\n    } else {// @todo find clone, otherwise there might be probs with multiple axes\n    }\n\n    series.rangeChangeDuration = 0;\n    series.interpolationDuration = 0;\n    series.defaultState.transitionDuration = 0;\n    series.showOnInit = false;\n\n    this._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this, false)); // data might be set drectly on series\n\n\n    this._disposers.push(sourceSeries.events.on(\"datavalidated\", function () {\n      if (series.data != sourceSeries.data) {\n        // data setter doesn't check this\n        series.data = sourceSeries.data;\n      }\n    }, undefined, false));\n\n    series.defaultState.properties.visible = true;\n    series.filters.push(new DesaturateFilter());\n    scrollbarChart.series.push(series);\n    this.updateByOrientation();\n  };\n  /**\n   * @ignore\n   */\n\n\n  XYChartScrollbar.prototype.updateByOrientation = function () {\n    var _this = this;\n\n    if (this._scrollbarChart) {\n      $iter.each(this._scrollbarChart.xAxes.iterator(), function (xAxis) {\n        var renderer = xAxis.renderer;\n\n        if (_this.orientation == \"vertical\") {\n          renderer.grid.template.disabled = true;\n          renderer.labels.template.disabled = true;\n          renderer.minGridDistance = 10;\n        } else {\n          renderer.grid.template.disabled = false;\n          renderer.labels.template.disabled = false;\n          renderer.minGridDistance = xAxis.clonedFrom.renderer.minGridDistance;\n        }\n      });\n      $iter.each(this._scrollbarChart.yAxes.iterator(), function (yAxis) {\n        var renderer = yAxis.renderer;\n\n        if (_this.orientation == \"horizontal\") {\n          renderer.grid.template.disabled = true;\n          renderer.labels.template.disabled = true;\n          renderer.minGridDistance = 10;\n        } else {\n          renderer.grid.template.disabled = false;\n          renderer.labels.template.disabled = false;\n          renderer.minGridDistance = yAxis.clonedFrom.renderer.minGridDistance;\n        }\n      });\n    }\n  };\n  /**\n   * Cleans up after series are removed from Scrollbar.\n   *\n   * @param event  Event\n   */\n\n\n  XYChartScrollbar.prototype.handleSeriesRemoved = function (event) {\n    var sourceSeries = event.oldValue;\n    sourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\n  };\n\n  Object.defineProperty(XYChartScrollbar.prototype, \"scrollbarChart\", {\n    /**\n     * A chart element that is used to display graphs in the Scrollbar.\n     *\n     * This is not the same as `chart`. It's a totally independent instance of\n     * [[XYChart]] with separate config, series, etc.\n     *\n     * It can be configured just like any other [[XYChart]].\n     *\n     * @readonly\n     * @return Scrollbar's internal chart\n     */\n    get: function get() {\n      return this._scrollbarChart;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChartScrollbar.prototype, \"chart\", {\n    /**\n     * @return Chart\n     */\n    get: function get() {\n      return this._chart.get();\n    },\n\n    /**\n     * A chart that Scrollbar belongs to.\n     *\n     * @param chart  Chart\n     */\n    set: function set(chart) {\n      if (this._chart.get() !== chart) {\n        this._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this, false));\n\n        this.handleDataChanged();\n        this._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Updates Scrollbar's internal chart's data when the main chart's data\n   * changes.\n   *\n   * @ignore Exclude from docs\n   */\n\n  XYChartScrollbar.prototype.handleDataChanged = function () {\n    //@todo: what if raw data changed?\n    if (this.chart.data != this.scrollbarChart.data) {\n      this.scrollbarChart.data = this.chart.data;\n    }\n  };\n  /**\n   * Zooms out all axes on the internal chart.\n   */\n\n\n  XYChartScrollbar.prototype.zoomOutAxes = function () {\n    var scrollbarChart = this.scrollbarChart;\n    $iter.each(scrollbarChart.xAxes.iterator(), function (x) {\n      x.zoom({\n        start: 0,\n        end: 1\n      }, true, true);\n    });\n    $iter.each(scrollbarChart.yAxes.iterator(), function (y) {\n      y.zoom({\n        start: 0,\n        end: 1\n      }, true, true);\n    });\n  };\n  /**\n   * Updates scrollbar thumb.\n   */\n\n\n  XYChartScrollbar.prototype.updateThumb = function () {\n    _super.prototype.updateThumb.call(this);\n\n    if (this._unselectedOverlay) {\n      var thumb = this.thumb;\n      var x = thumb.pixelX || 0;\n      var y = thumb.pixelY || 0;\n      var w = thumb.pixelWidth || 0;\n      var h = thumb.pixelHeight || 0;\n      var path = \"\";\n\n      if (this.orientation == \"horizontal\") {\n        path = $path.rectToPath({\n          x: -1,\n          y: 0,\n          width: x,\n          height: h\n        });\n        path += $path.rectToPath({\n          x: x + w,\n          y: 0,\n          width: (this.pixelWidth || 0) - x - w,\n          height: h\n        });\n      } else {\n        path = $path.rectToPath({\n          x: 0,\n          y: 0,\n          width: w,\n          height: y\n        });\n        path += $path.rectToPath({\n          x: 0,\n          y: y + h,\n          width: w,\n          height: (this.pixelHeight || 0) - y - h\n        });\n      }\n\n      this._unselectedOverlay.path = path;\n    }\n  };\n  /**\n   * Processes JSON-based config before it is applied to the object.\n   *\n   * @ignore Exclude from docs\n   * @param config  Config\n   */\n\n\n  XYChartScrollbar.prototype.processConfig = function (config) {\n    if (config) {\n      if ($type.hasValue(config.series) && $type.isArray(config.series)) {\n        for (var i = 0, len = config.series.length; i < len; i++) {\n          var series = config.series[i];\n\n          if ($type.hasValue(series) && $type.isString(series)) {\n            if (this.map.hasKey(series)) {\n              config.series[i] = this.map.getKey(series);\n            } else {\n              throw Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\n            }\n          }\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  return XYChartScrollbar;\n}(Scrollbar);\n\nexport { XYChartScrollbar };\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n *\n * @ignore\n */\n\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;","map":{"version":3,"sources":["../../../../../src/.internal/charts/elements/XYChartScrollbar.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.setElement(this.paper.add(\"path\"));\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false));\r\n\t\t\tthis._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false));\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\txAxis.id = sourceSeries.uid;\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.labels.template.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\t\t\trenderer.minWidth = undefined;\r\n\t\t\trenderer.minHeight = undefined;\r\n\t\t\trenderer.padding(0,0,0,0);\r\n\t\t\trenderer.chart = scrollbarChart;\r\n\t\t\trenderer.margin(0,0,0,0);\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.labels.template.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\t\t\trenderer.minWidth = undefined;\r\n\t\t\trenderer.minHeight = undefined;\t\t\r\n\t\t\trenderer.chart = scrollbarChart;\r\n\t\t\trenderer.padding(0,0,0,0);\r\n\t\t\trenderer.margin(0,0,0,0);\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\t\tseries.showOnInit = false;\r\n\r\n\t\tthis._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this, false));\r\n\r\n\t\t// data might be set drectly on series\r\n\t\tthis._disposers.push(sourceSeries.events.on(\"datavalidated\", () => {\r\n\t\t\tif (series.data != sourceSeries.data) { // data setter doesn't check this\r\n\t\t\t\tseries.data = sourceSeries.data;\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tseries.filters.push(new DesaturateFilter());\r\n\t\tscrollbarChart.series.push(series);\r\n\r\n\t\tthis.updateByOrientation();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\tif (this._scrollbarChart) {\r\n\t\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\r\n\t\t\t\t\trenderer.minGridDistance = xAxis.clonedFrom.renderer.minGridDistance;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\r\n\t\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\r\n\t\t\t\t\trenderer.minGridDistance = yAxis.clonedFrom.renderer.minGridDistance;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this, false));\r\n\t\t\tthis.handleDataChanged();\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\t//@todo: what if raw data changed?\r\n\t\tif (this.chart.data != this.scrollbarChart.data) {\r\n\t\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t */\r\n\tprotected updateThumb() {\r\n\t\tsuper.updateThumb();\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX || 0;\r\n\t\t\tlet y: number = thumb.pixelY || 0;\r\n\t\t\tlet w: number = thumb.pixelWidth || 0;\r\n\t\t\tlet h: number = thumb.pixelHeight || 0;\r\n\r\n\t\t\tlet path: string = \"\";\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: (this.pixelWidth || 0) - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: (this.pixelHeight || 0) - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}