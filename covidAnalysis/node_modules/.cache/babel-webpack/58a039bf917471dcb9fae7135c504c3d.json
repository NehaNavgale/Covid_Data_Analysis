{"ast":null,"code":"/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Represents a relative value. (percent)\n */\nvar Percent =\n/** @class */\nfunction () {\n  /**\n   * Constructor.\n   *\n   * @param percent  Percent value\n   */\n  function Percent(percent) {\n    this._value = percent;\n  }\n\n  Object.defineProperty(Percent.prototype, \"value\", {\n    /**\n     * Relative value.\n     *\n     * E.g. 100% is 1, 50% is 0.5, etc.\n     *\n     * This is useful to apply transformations to other values. E.g.:\n     *\n     * ```TypeScript\n     * let value = 256;\n     * let percent = new am4core.Percent(50);\n     * console.log(value * percent.value); // outputs 128\n     * ```\n     * ```JavaScript\n     * var value = 256;\n     * var percent = new am4core.Percent(50);\n     * console.log(value * percent.value); // outputs 128\n     * ```\n     *\n     * @readonly\n     * @return Relative value\n     */\n    get: function get() {\n      return this._value / 100;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Percent.prototype, \"percent\", {\n    /**\n     * Value in percent.\n     *\n     * @return Percent\n     */\n    get: function get() {\n      return this._value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Percent.prototype.toString = function () {\n    return \"\" + this._value + \"%\";\n  };\n\n  return Percent;\n}();\n\nexport { Percent };\n/**\n * Converts numeric percent value to a proper [[Percent]] object.\n *\n * ```TypeScript\n * pieSeries.radius = am4core.percent(80);\n * ```\n * ```JavaScript\n * pieSeries.radius = am4core.percent(80);\n * ```\n *\n * @param value  Percent\n * @return Percent object\n */\n\nexport function percent(value) {\n  return new Percent(value);\n}\n/**\n * Checks if value is a [[Percent]] object.\n *\n * @ignore Exclude from docs\n * @param value  Input value\n * @return Is percent?\n */\n\nexport function isPercent(value) {\n  return value instanceof Percent;\n}","map":{"version":3,"sources":["../../../../../src/.internal/core/utils/Percent.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAEH;;AAEG;AACH,IAAA,OAAA;AAAA;AAAA,YAAA;AAOC;;;;AAIG;AACH,WAAA,OAAA,CAAY,OAAZ,EAA2B;AAC1B,SAAK,MAAL,GAAc,OAAd;AACA;;AAuBD,EAAA,MAAA,CAAA,cAAA,CAAW,OAAA,CAAA,SAAX,EAAW,OAAX,EAAgB;AArBhB;;;;;;;;;;;;;;;;;;;;AAoBG;SACH,eAAA;AACC,aAAO,KAAK,MAAL,GAAc,GAArB;AACA,KAFe;oBAAA;;AAAA,GAAhB;AASA,EAAA,MAAA,CAAA,cAAA,CAAW,OAAA,CAAA,SAAX,EAAW,SAAX,EAAkB;AALlB;;;;AAIG;SACH,eAAA;AACC,aAAO,KAAK,MAAZ;AACA,KAFiB;oBAAA;;AAAA,GAAlB;;AAIO,EAAA,OAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AACC,WAAO,KAAK,KAAK,MAAV,GAAmB,GAA1B;AACA,GAFM;;AAQR,SAAA,OAAA;AAAC,CA1DD,EAAA;;;AA6DA;;;;;;;;;;;;AAYG;;AACH,OAAM,SAAA,OAAA,CAAkB,KAAlB,EAA+B;AACpC,SAAO,IAAI,OAAJ,CAAY,KAAZ,CAAP;AACA;AAGD;;;;;;AAMG;;AACH,OAAM,SAAA,SAAA,CAAoB,KAApB,EAA8B;AACnC,SAAO,KAAK,YAAY,OAAxB;AACA","sourcesContent":["/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Represents a relative value. (percent)\n */\nexport class Percent {\n\n\t/**\n\t * Value in percent.\n\t */\n\tprotected _value: number;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param percent  Percent value\n\t */\n\tconstructor(percent: number) {\n\t\tthis._value = percent;\n\t}\n\n\t/**\n\t * Relative value.\n\t *\n\t * E.g. 100% is 1, 50% is 0.5, etc.\n\t *\n\t * This is useful to apply transformations to other values. E.g.:\n\t *\n\t * ```TypeScript\n\t * let value = 256;\n\t * let percent = new am4core.Percent(50);\n\t * console.log(value * percent.value); // outputs 128\n\t * ```\n\t * ```JavaScript\n\t * var value = 256;\n\t * var percent = new am4core.Percent(50);\n\t * console.log(value * percent.value); // outputs 128\n\t * ```\n\t *\n\t * @readonly\n\t * @return Relative value\n\t */\n\tpublic get value(): number {\n\t\treturn this._value / 100;\n\t}\n\n\t/**\n\t * Value in percent.\n\t *\n\t * @return Percent\n\t */\n\tpublic get percent(): number {\n\t\treturn this._value;\n\t}\n\n\tpublic toString(): string {\n\t\treturn \"\" + this._value + \"%\";\n\t}\n\n\t/*public toNumber(): number {\n\t\treturn this.percent;\n\t}*/\n\n}\n\n\n/**\n * Converts numeric percent value to a proper [[Percent]] object.\n *\n * ```TypeScript\n * pieSeries.radius = am4core.percent(80);\n * ```\n * ```JavaScript\n * pieSeries.radius = am4core.percent(80);\n * ```\n *\n * @param value  Percent\n * @return Percent object\n */\nexport function percent(value: number): Percent {\n\treturn new Percent(value);\n}\n\n\n/**\n * Checks if value is a [[Percent]] object.\n *\n * @ignore Exclude from docs\n * @param value  Input value\n * @return Is percent?\n */\nexport function isPercent(value: any): boolean {\n\treturn value instanceof Percent;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}