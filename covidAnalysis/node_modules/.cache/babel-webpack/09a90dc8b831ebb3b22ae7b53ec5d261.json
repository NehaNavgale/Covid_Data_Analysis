{"ast":null,"code":"/**\n * Responsive functionality module.\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\n\nimport { BaseObjectEvents } from \"../Base\";\nimport { List } from \"../utils/List\";\nimport { Adapter } from \"../utils/Adapter\";\nimport { registry } from \"../Registry\";\nimport * as $iter from \"../utils/Iterator\";\nimport * as $array from \"../utils/Array\";\nimport * as $type from \"../utils/Type\";\n/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Responsive is responsible for overriding certain properties when conditions\n * are met.\n *\n * This class is used to dynamically apply and change certain chart properties\n * based on the current values of properties.\n *\n * Mainly, this is used with [[Sprite]]'s dimensional properties, like\n * `pixelWidth` and `pixelHeight`. However, it can be used to dynamically\n * change any property, based on any other property's value.\n *\n * A default responsive rules are disabled.\n *\n * To enable, set `enabled = false`. E.g.:\n *\n * ```TypeScript\n * chart.responsive.enabled = true;\n * ```\n * ```JavaScript\n * chart.responsive.enabled = true;\n * ```\n *\n * @see {@link IResponsiveEvents} for a list of available events\n * @see {@link IResponsiveAdapters} for a list of available Adapters\n * @todo Add default rules\n * @todo Watch for rule modification\n * @important\n */\n\nvar Responsive =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Responsive, _super);\n  /**\n   * Constructor\n   */\n\n\n  function Responsive() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\n     * Holds a list of responsive rules organized by object type.\n     */\n\n\n    _this._rules = new List();\n    /**\n     * Holds the list of the default responsive rules.\n     * @deprecated\n     */\n    //protected _defaultRules = new List<IResponsiveRule>();\n\n    /**\n     * Holds the list of currently applied rules.\n     */\n\n    _this._appliedRules = {};\n    /**\n     * Use default rules in addition to the user-defined ones?\n     */\n\n    _this._useDefault = true;\n    /**\n     * Adapter.\n     */\n\n    _this.adapter = new Adapter(_this);\n    /**\n     * Indicates of responsive rules application is enabled.\n     */\n\n    _this._enabled = false;\n    /**\n     * Collection of objects and state ids that do not have any properties set.\n     */\n\n    _this._noStates = [];\n    _this.className = \"Responsive\"; // Set up rules list events\n\n    _this.rules.events.on(\"inserted\", _this.checkRules, true);\n\n    _this.rules.events.on(\"removed\", _this.checkRules, true);\n\n    _this._disposers.push(_this.rules.events); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(Responsive.prototype, \"component\", {\n    /**\n     * @return Target object\n     */\n    get: function get() {\n      return this._component;\n    },\n\n    /**\n     * A target object that responsive rules will need to be applied to.\n     *\n     * @param value  Target object\n     */\n    set: function set(value) {\n      // Check if it's the same\n      if (value == this._component) {\n        return;\n      } // Check if we already have a set up component and remove its events\n\n\n      if (this._sizeEventDisposer) {\n        this.removeDispose(this._sizeEventDisposer);\n      } // Set\n\n\n      this._component = value; // Set up resize monitoring events\n\n      this._sizeEventDisposer = $type.getValue(this.component).events.on(\"sizechanged\", this.checkRules, this);\n\n      this._disposers.push(this._sizeEventDisposer); // Enable resoponsive\n\n\n      this.enabled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Responsive.prototype, \"enabled\", {\n    /**\n     * @return Apply responsive rules?\n     */\n    get: function get() {\n      return this.adapter.apply(\"enabled\", this._enabled);\n    },\n\n    /**\n     * Should responsive rules be checked against and applied?\n     *\n     * @default false\n     * @param value  Apply responsive rules?\n     */\n    set: function set(value) {\n      if (this._enabled != value) {\n        this._enabled = value; // Run `applyRules` so that any currently applied rules can be reset\n\n        this.applyRules();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Responsive.prototype, \"useDefault\", {\n    /**\n     * @return Use default rules?\n     */\n    get: function get() {\n      return this.adapter.apply(\"useDefault\", this._useDefault);\n    },\n\n    /**\n     * Should default responsive rules be applied in addition to user-defined\n     * ones.\n     *\n     * User-defined rules will take precedence over default rules whenever they\n     * produce conflicting settings.\n     *\n     * @default true\n     * @param value  Use default rules?\n     */\n    set: function set(value) {\n      if (this._useDefault != value) {\n        this._useDefault = true; // Run `applyRules` so that any currently applied rules can be reset\n\n        this.applyRules();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Responsive.prototype, \"rules\", {\n    /**\n     * @return User-defined rules\n     */\n    get: function get() {\n      return this.adapter.apply(\"rules\", this._rules);\n    },\n\n    /**\n     * User-defined responsive rules.\n     *\n     * User-defined rules will take precedence over default rules whenever they\n     * produce conflicting settings.\n     *\n     * Use `allRules` to get all applicable rules including default and\n     * user-defined ones.\n     *\n     * @param value  User-defined rules\n     */\n    set: function set(value) {\n      this._rules = value;\n      this._enabled = true;\n      this.applyRules();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Responsive.prototype, \"defaultRules\", {\n    /**\n     * Default responsive rules.\n     *\n     * @readonly\n     * @return List of responsive rules\n     */\n    get: function get() {\n      return this.adapter.apply(\"defaultRules\", defaultRules);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Responsive.prototype, \"allRules\", {\n    /**\n     * Returns all rules: default rules (if not disabled) combined with\n     * user-defined ones.\n     *\n     * @readonly\n     * @return List of all applicable rules\n     */\n    get: function get() {\n      // Create empty list\n      var rules = new List(); // Add default rules if not disabled\n      // A code, requesting `allRules` must ensure loading of default rules\n      // by calling `loadDefaultRules()`\n\n      if (this.useDefault) {\n        rules.copyFrom(this.defaultRules);\n      } // Add user-defined ones\n\n\n      rules.copyFrom(this.rules);\n      return this.adapter.apply(\"allRules\", rules);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Checks if rule by the particular id currently applied.\n   *\n   * @param ruleId  Rule ID\n   * @return Is currently applied?\n   */\n\n  Responsive.prototype.isApplied = function (ruleId) {\n    var rule = this._appliedRules[ruleId];\n    return $type.hasValue(rule) ? rule : false;\n  };\n  /**\n   * Checks which responsive rules currently satisfy their conditions and\n   * should be applied, or unapplied.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  Responsive.prototype.checkRules = function () {\n    // Check if default rules need to be loaded\n    // If needed, we wait until it's loaded and then call `checkRules` again\n    // This is not needed anymore since we are now populating public variable\n    // `defaultRules` by each class indidividually\n\n    /*if (this.useDefault && this.defaultRules.length == 0) {\n        this.loadDefaultRules().then((res) => {\n            this._defaultRules.setAll(res.default);\n            this.checkRules();\n        });\n        return;\n    }*/\n    var _this = this; // Check if there are any rules\n\n\n    var rules = this.allRules;\n\n    if (!rules || rules.length == 0) {\n      return;\n    } // Init a list of rules to be applied\n\n\n    var rulesChanged = false;\n    var component = $type.getValue(this.component); // Check which rules match\n\n    $iter.each(rules.iterator(), function (rule) {\n      // Check if rule has an id\n      if (!rule.id) {\n        rule.id = registry.getUniqueId();\n      } // Init indicator if this rule should be applied\n\n\n      var apply = rule.relevant(component); // Let's check if this rule needs to be applied\n\n      if (apply && !_this.isApplied(rule.id) || !apply && _this.isApplied(rule.id)) {\n        rulesChanged = true;\n      }\n\n      _this._appliedRules[rule.id] = apply;\n    }); // Check if we need to re-apply the rules\n\n    if (rulesChanged) {\n      this.applyRules();\n    }\n  };\n  /**\n   * Applies current rules to the object.\n   *\n   * @ignore Exclude from docs\n   * @param target Target object\n   * @todo Better type check\n   */\n\n\n  Responsive.prototype.applyRules = function (target) {\n    var _this = this; // If no target supplied, we assume the top-level element\n\n\n    var newTarget = $type.hasValue(target) ? target : $type.getValue(this.component); // Check each rule\n\n    var defaultStateApplied = false;\n\n    if (this.enabled) {\n      $iter.each(this.allRules.iterator(), function (rule) {\n        // Get relevant state\n        var state = _this.getState(rule, newTarget); // If there's a state, it means it needs to be applied\n\n\n        if (state) {\n          // Check if default state was already applied to this element.\n          // We don't want to go resetting default states to ALL element,\n          // if they don't have responsive states.\n          if (!defaultStateApplied) {\n            // Nope, reset states (instantly).\n            //console.log(\"Applying default state to \" + newTarget.className + \" (\" + newTarget.uid + \"): \" + JSON.stringify(newTarget.defaultState.properties));\n            newTarget.applyCurrentState(0);\n            defaultStateApplied = true;\n          } // Is this rule currently applied?\n\n\n          if (_this.isApplied($type.getValue(rule.id))) {\n            // Yes. Apply the responsive state\n            //console.log(\"Applying state to \" + newTarget.className + \" (\" + newTarget.uid + \"): \" + JSON.stringify(state.properties));\n            newTarget.setState(state);\n          }\n        }\n      });\n    } // Apply rules to the children\n\n\n    if (newTarget.children) {\n      $iter.each(newTarget.children.iterator(), function (child) {\n        _this.applyRules(child);\n      });\n    }\n  };\n  /**\n   * Applies specific oresponsive overrides to the element.\n   *\n   * @ignore Exclude from docs\n   * @param rule    Responsive rule\n   * @param target  Target element\n   * @deprecated\n   * @hidden\n   */\n\n  /*\tpublic applyRule(rule: IResponsiveRule, target: any): void {\n           // Construct state id\n          //let stateId = \"responsive-\" + rule.id;\n           // Check if we need to create a state for the element\n          let state = this.getState(rule, target);\n           // Apply the state\n          if (state) {\n              //if (target.className == \"Container\" && target.parent.className == \"ZoomControl\") {\n              console.log(\"Applying state to \" + target.className + \" (\" + target.uid + \"): \" + JSON.stringify(state.properties));\n              //}\n              target.setState(state);\n          }\n       }*/\n\n  /**\n   * Returns a relative state for the rule/target, or `undefined` if no state is\n   * needed.\n   *\n   * @param rule    [description]\n   * @param target  [description]\n   * @return [description]\n   */\n\n\n  Responsive.prototype.getState = function (rule, target) {\n    var stateId = \"responsive-\" + rule.id;\n    var tmpId = target.uid + \"_\" + stateId;\n\n    if ($array.indexOf(this._noStates, tmpId) !== -1) {\n      return;\n    } else if (!target.states.hasKey(stateId)) {\n      var state = rule.state(target, stateId);\n\n      if (!state) {\n        this._noStates.push(tmpId);\n      }\n\n      return state;\n    } else {\n      return target.states.getKey(stateId);\n    }\n  };\n  /**\n   * Gets a value from an element.\n   *\n   * @ignore Exclude from docs\n   * @param target    Target object\n   * @param property  Property\n   * @return Property value\n   */\n\n\n  Responsive.prototype.getValue = function (target, property) {\n    // This is a bit hacky, first we check if the property exist.\n    // If it doesn't we try accessing target's property directly\n    var value = target.getPropertyValue(property);\n\n    if (!$type.hasValue(value) && $type.hasValue(target[property])) {\n      value = target[property];\n    }\n\n    return value;\n  };\n\n  return Responsive;\n}(BaseObjectEvents);\n\nexport { Responsive };\n/**\n * [defaultRules description]\n *\n * @todo description\n */\n\nexport var defaultRules = new List();\ndefaultRules.events.on(\"inserted\", function (ev) {\n  ev.newValue.id = registry.getUniqueId();\n});\n/**\n *\n * @todo description\n */\n\nvar ResponsiveBreakpoints =\n/** @class */\nfunction () {\n  function ResponsiveBreakpoints() {} // Breakpoint functions (for use in `relevant` clause of the responsive rules)\n\n\n  ResponsiveBreakpoints.widthXXS = function (container) {\n    return container.pixelWidth <= ResponsiveBreakpoints.XXS;\n  };\n\n  ResponsiveBreakpoints.widthXS = function (container) {\n    return container.pixelWidth <= ResponsiveBreakpoints.XS;\n  };\n\n  ResponsiveBreakpoints.widthS = function (container) {\n    return container.pixelWidth <= ResponsiveBreakpoints.S;\n  };\n\n  ResponsiveBreakpoints.widthM = function (container) {\n    return container.pixelWidth <= ResponsiveBreakpoints.M;\n  };\n\n  ResponsiveBreakpoints.widthL = function (container) {\n    return container.pixelWidth <= ResponsiveBreakpoints.L;\n  };\n\n  ResponsiveBreakpoints.widthXL = function (container) {\n    return container.pixelWidth <= ResponsiveBreakpoints.XL;\n  };\n\n  ResponsiveBreakpoints.widthXXL = function (container) {\n    return container.pixelWidth <= ResponsiveBreakpoints.XXL;\n  };\n\n  ResponsiveBreakpoints.heightXXS = function (container) {\n    return container.pixelHeight <= ResponsiveBreakpoints.XXS;\n  };\n\n  ResponsiveBreakpoints.heightXS = function (container) {\n    return container.pixelHeight <= ResponsiveBreakpoints.XS;\n  };\n\n  ResponsiveBreakpoints.heightS = function (container) {\n    return container.pixelHeight <= ResponsiveBreakpoints.S;\n  };\n\n  ResponsiveBreakpoints.heightM = function (container) {\n    return container.pixelHeight <= ResponsiveBreakpoints.M;\n  };\n\n  ResponsiveBreakpoints.heightL = function (container) {\n    return container.pixelHeight <= ResponsiveBreakpoints.L;\n  };\n\n  ResponsiveBreakpoints.heightXL = function (container) {\n    return container.pixelHeight <= ResponsiveBreakpoints.XL;\n  };\n\n  ResponsiveBreakpoints.heightXXL = function (container) {\n    return container.pixelHeight <= ResponsiveBreakpoints.XXL;\n  };\n\n  ResponsiveBreakpoints.isXXS = function (container) {\n    return container.pixelWidth <= ResponsiveBreakpoints.XXS && container.pixelHeight <= ResponsiveBreakpoints.XXS;\n  };\n\n  ResponsiveBreakpoints.isXS = function (container) {\n    return container.pixelWidth <= ResponsiveBreakpoints.XS && container.pixelHeight <= ResponsiveBreakpoints.XS;\n  };\n\n  ResponsiveBreakpoints.isS = function (container) {\n    return container.pixelWidth <= ResponsiveBreakpoints.S && container.pixelHeight <= ResponsiveBreakpoints.S;\n  };\n\n  ResponsiveBreakpoints.isM = function (container) {\n    return container.pixelWidth <= ResponsiveBreakpoints.M && container.pixelHeight <= ResponsiveBreakpoints.M;\n  };\n\n  ResponsiveBreakpoints.isL = function (container) {\n    return container.pixelWidth <= ResponsiveBreakpoints.L && container.pixelHeight <= ResponsiveBreakpoints.L;\n  };\n\n  ResponsiveBreakpoints.isXL = function (container) {\n    return container.pixelWidth <= ResponsiveBreakpoints.XL && container.pixelHeight <= ResponsiveBreakpoints.XL;\n  };\n\n  ResponsiveBreakpoints.isXXL = function (container) {\n    return container.pixelWidth <= ResponsiveBreakpoints.XXL && container.pixelHeight <= ResponsiveBreakpoints.XXL;\n  };\n\n  ResponsiveBreakpoints.maybeXXS = function (container) {\n    return container.pixelWidth <= ResponsiveBreakpoints.XXS || container.pixelHeight <= ResponsiveBreakpoints.XXS;\n  };\n\n  ResponsiveBreakpoints.maybeXS = function (container) {\n    return container.pixelWidth <= ResponsiveBreakpoints.XS || container.pixelHeight <= ResponsiveBreakpoints.XS;\n  };\n\n  ResponsiveBreakpoints.maybeS = function (container) {\n    return container.pixelWidth <= ResponsiveBreakpoints.S || container.pixelHeight <= ResponsiveBreakpoints.S;\n  };\n\n  ResponsiveBreakpoints.maybeM = function (container) {\n    return container.pixelWidth <= ResponsiveBreakpoints.M || container.pixelHeight <= ResponsiveBreakpoints.M;\n  };\n\n  ResponsiveBreakpoints.maybeL = function (container) {\n    return container.pixelWidth <= ResponsiveBreakpoints.L || container.pixelHeight <= ResponsiveBreakpoints.L;\n  };\n\n  ResponsiveBreakpoints.maybeXL = function (container) {\n    return container.pixelWidth <= ResponsiveBreakpoints.XL || container.pixelHeight <= ResponsiveBreakpoints.XL;\n  };\n\n  ResponsiveBreakpoints.maybeXXL = function (container) {\n    return container.pixelWidth <= ResponsiveBreakpoints.XXL || container.pixelHeight <= ResponsiveBreakpoints.XXL;\n  }; // Named pixel breakpoints\n\n\n  ResponsiveBreakpoints.XXS = 100;\n  ResponsiveBreakpoints.XS = 200;\n  ResponsiveBreakpoints.S = 300;\n  ResponsiveBreakpoints.M = 400;\n  ResponsiveBreakpoints.L = 600;\n  ResponsiveBreakpoints.XL = 800;\n  ResponsiveBreakpoints.XXL = 1000;\n  return ResponsiveBreakpoints;\n}();\n\nexport { ResponsiveBreakpoints };","map":{"version":3,"sources":["../../../../../src/.internal/core/utils/Responsive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Responsive functionality module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObjectEvents, IBaseObjectEvents } from \"../Base\";\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters } from \"../Sprite\";\r\nimport { SpriteState } from \"../SpriteState\";\r\nimport { Container } from \"../Container\";\r\nimport { Component } from \"../Component\";\r\nimport { List } from \"../utils/List\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport { IDisposer } from \"../utils/Disposer\";\r\nimport { registry } from \"../Registry\";\r\nimport { Optional } from \"../utils/Type\";\r\nimport * as $iter from \"../utils/Iterator\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines an interface for the responsive rule, i.e. what overrides need to\r\n * be applied when certain conditions are matched.\r\n *\r\n * @important\r\n */\r\nexport interface IResponsiveRule {\r\n\r\n\t/**\r\n\t * A function which determines if this rule is relevant to current\r\n\t * conditions.\r\n\t *\r\n\t * Whenever the chrt size changes, this function will be run to determine\r\n\t * whether this rule needs to be applied.\r\n\t */\r\n\trelevant(target: Container): boolean;\r\n\r\n\t/**\r\n\t * A function which creates and returns a [[SpriteState]] that needs to be\r\n\t * set whenever rule should be applied.\r\n\t *\r\n\t * This is run only once.\r\n\t *\r\n\t * Once state is created, it is added to the Sprite's available states and\r\n\t * applied as necessary.\r\n\t */\r\n\tstate(target: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>>;\r\n\r\n\t/**\r\n\t * ID of the rule.\r\n\t */\r\n\tid?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Responsive]].\r\n */\r\nexport interface IResponsiveEvents extends IBaseObjectEvents {\r\n\r\n\t/**\r\n\t * Invoked when a list of applicable rules for the current resolution\r\n\t * changes.\r\n\t */\r\n\truleschanged: {},\r\n\r\n\t/**\r\n\t * Invoked after each rule is applied to the actual element.\r\n\t */\r\n\truleapplied: {\r\n\r\n\t\t/**\r\n\t\t * A rule that was just applied.\r\n\t\t */\r\n\t\t\"rule\": IResponsiveRule\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Responsive]] class.\r\n *\r\n * Includes both the [[Adapter]] definitions and properties.\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IResponsiveAdapters {\r\n\r\n\t/**\r\n\t * Are responsive features enabled?\r\n\t */\r\n\tenabled: boolean;\r\n\r\n\t/**\r\n\t * Use default rules?\r\n\t *\r\n\t * If this is set `false`, only user-defined rules will be applied.\r\n\t */\r\n\tuseDefault: boolean;\r\n\r\n\t/**\r\n\t * A list of user-defined rules.\r\n\t */\r\n\trules: List<IResponsiveRule>;\r\n\r\n\t/**\r\n\t * A list of default rules.\r\n\t */\r\n\tdefaultRules: List<IResponsiveRule>;\r\n\r\n\t/**\r\n\t * A list of **all** rules - user-defined and default combined.\r\n\t */\r\n\tallRules: List<IResponsiveRule>;\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Responsive is responsible for overriding certain properties when conditions\r\n * are met.\r\n *\r\n * This class is used to dynamically apply and change certain chart properties\r\n * based on the current values of properties.\r\n *\r\n * Mainly, this is used with [[Sprite]]'s dimensional properties, like\r\n * `pixelWidth` and `pixelHeight`. However, it can be used to dynamically\r\n * change any property, based on any other property's value.\r\n *\r\n * A default responsive rules are disabled.\r\n *\r\n * To enable, set `enabled = false`. E.g.:\r\n *\r\n * ```TypeScript\r\n * chart.responsive.enabled = true;\r\n * ```\r\n * ```JavaScript\r\n * chart.responsive.enabled = true;\r\n * ```\r\n *\r\n * @see {@link IResponsiveEvents} for a list of available events\r\n * @see {@link IResponsiveAdapters} for a list of available Adapters\r\n * @todo Add default rules\r\n * @todo Watch for rule modification\r\n * @important\r\n */\r\nexport class Responsive extends BaseObjectEvents {\r\n\r\n\t/**\r\n\t * Holds a list of responsive rules organized by object type.\r\n\t */\r\n\tprotected _rules = new List<IResponsiveRule>();\r\n\r\n\t/**\r\n\t * Holds the list of the default responsive rules.\r\n\t * @deprecated\r\n\t */\r\n\t//protected _defaultRules = new List<IResponsiveRule>();\r\n\r\n\t/**\r\n\t * Holds the list of currently applied rules.\r\n\t */\r\n\tprotected _appliedRules: { [index: string]: boolean } = {};\r\n\r\n\t/**\r\n\t * Use default rules in addition to the user-defined ones?\r\n\t */\r\n\tprotected _useDefault = true;\r\n\r\n\t/**\r\n\t * A target object responsive rules apply to.\r\n\t */\r\n\tprotected _component: $type.Optional<Component>;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IResponsiveEvents;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IResponsiveAdapters;\r\n\r\n\t/**\r\n\t * Adapter.\r\n\t */\r\n\tpublic adapter = new Adapter<this, IResponsiveAdapters>(this);\r\n\r\n\t/**\r\n\t * Indicates of responsive rules application is enabled.\r\n\t */\r\n\tprotected _enabled = false;\r\n\r\n\t/**\r\n\t * Holds a disposer for size events.\r\n\t */\r\n\tprivate _sizeEventDisposer: $type.Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * Collection of objects and state ids that do not have any properties set.\r\n\t */\r\n\tprivate _noStates: string[] = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Responsive\";\r\n\r\n\t\t// Set up rules list events\r\n\t\tthis.rules.events.on(\"inserted\", this.checkRules, true);\r\n\t\tthis.rules.events.on(\"removed\", this.checkRules, true);\r\n\t\tthis._disposers.push(this.rules.events);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A target object that responsive rules will need to be applied to.\r\n\t *\r\n\t * @param value  Target object\r\n\t */\r\n\tpublic set component(value: $type.Optional<Component>) {\r\n\r\n\t\t// Check if it's the same\r\n\t\tif (value == this._component) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Check if we already have a set up component and remove its events\r\n\t\tif (this._sizeEventDisposer) {\r\n\t\t\tthis.removeDispose(this._sizeEventDisposer);\r\n\t\t}\r\n\r\n\t\t// Set\r\n\t\tthis._component = value;\r\n\r\n\t\t// Set up resize monitoring events\r\n\t\tthis._sizeEventDisposer = $type.getValue(this.component).events.on(\"sizechanged\", this.checkRules, this);\r\n\t\tthis._disposers.push(this._sizeEventDisposer);\r\n\r\n\t\t// Enable resoponsive\r\n\t\tthis.enabled = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @return Target object\r\n\t */\r\n\tpublic get component(): $type.Optional<Component> {\r\n\t\treturn this._component;\r\n\t}\r\n\r\n\t/**\r\n\t * Should responsive rules be checked against and applied?\r\n\t *\r\n\t * @default false\r\n\t * @param value  Apply responsive rules?\r\n\t */\r\n\tpublic set enabled(value: boolean) {\r\n\t\tif (this._enabled != value) {\r\n\t\t\tthis._enabled = value;\r\n\r\n\t\t\t// Run `applyRules` so that any currently applied rules can be reset\r\n\t\t\tthis.applyRules();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Apply responsive rules?\r\n\t */\r\n\tpublic get enabled(): boolean {\r\n\t\treturn this.adapter.apply(\"enabled\", this._enabled);\r\n\t}\r\n\r\n\t/**\r\n\t * Should default responsive rules be applied in addition to user-defined\r\n\t * ones.\r\n\t *\r\n\t * User-defined rules will take precedence over default rules whenever they\r\n\t * produce conflicting settings.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Use default rules?\r\n\t */\r\n\tpublic set useDefault(value: boolean) {\r\n\t\tif (this._useDefault != value) {\r\n\t\t\tthis._useDefault = true;\r\n\r\n\t\t\t// Run `applyRules` so that any currently applied rules can be reset\r\n\t\t\tthis.applyRules();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use default rules?\r\n\t */\r\n\tpublic get useDefault(): boolean {\r\n\t\treturn this.adapter.apply(\"useDefault\", this._useDefault);\r\n\t}\r\n\r\n\t/**\r\n\t * User-defined responsive rules.\r\n\t *\r\n\t * User-defined rules will take precedence over default rules whenever they\r\n\t * produce conflicting settings.\r\n\t *\r\n\t * Use `allRules` to get all applicable rules including default and\r\n\t * user-defined ones.\r\n\t *\r\n\t * @param value  User-defined rules\r\n\t */\r\n\tpublic set rules(value: List<IResponsiveRule>) {\r\n\t\tthis._rules = value;\r\n\t\tthis._enabled = true;\r\n\t\tthis.applyRules();\r\n\t}\r\n\r\n\t/**\r\n\t * @return User-defined rules\r\n\t */\r\n\tpublic get rules(): List<IResponsiveRule> {\r\n\t\treturn this.adapter.apply(\"rules\", this._rules);\r\n\t}\r\n\r\n\t/**\r\n\t * Default responsive rules.\r\n\t *\r\n\t * @readonly\r\n\t * @return List of responsive rules\r\n\t */\r\n\tpublic get defaultRules(): List<IResponsiveRule> {\r\n\t\treturn this.adapter.apply(\"defaultRules\", defaultRules);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns all rules: default rules (if not disabled) combined with\r\n\t * user-defined ones.\r\n\t *\r\n\t * @readonly\r\n\t * @return List of all applicable rules\r\n\t */\r\n\tpublic get allRules(): List<IResponsiveRule> {\r\n\r\n\t\t// Create empty list\r\n\t\tlet rules = new List<IResponsiveRule>();\r\n\r\n\t\t// Add default rules if not disabled\r\n\t\t// A code, requesting `allRules` must ensure loading of default rules\r\n\t\t// by calling `loadDefaultRules()`\r\n\t\tif (this.useDefault) {\r\n\t\t\trules.copyFrom(this.defaultRules);\r\n\t\t}\r\n\r\n\t\t// Add user-defined ones\r\n\t\trules.copyFrom(this.rules);\r\n\r\n\t\treturn this.adapter.apply(\"allRules\", rules);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if rule by the particular id currently applied.\r\n\t *\r\n\t * @param ruleId  Rule ID\r\n\t * @return Is currently applied?\r\n\t */\r\n\tprotected isApplied(ruleId: string): boolean {\r\n\t\tconst rule = this._appliedRules[ruleId];\r\n\t\treturn $type.hasValue(rule) ? rule : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks which responsive rules currently satisfy their conditions and\r\n\t * should be applied, or unapplied.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic checkRules(): void {\r\n\r\n\t\t// Check if default rules need to be loaded\r\n\t\t// If needed, we wait until it's loaded and then call `checkRules` again\r\n\t\t// This is not needed anymore since we are now populating public variable\r\n\t\t// `defaultRules` by each class indidividually\r\n\t\t/*if (this.useDefault && this.defaultRules.length == 0) {\r\n\t\t\tthis.loadDefaultRules().then((res) => {\r\n\t\t\t\tthis._defaultRules.setAll(res.default);\r\n\t\t\t\tthis.checkRules();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}*/\r\n\r\n\t\t// Check if there are any rules\r\n\t\tlet rules = this.allRules;\r\n\t\tif (!rules || rules.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Init a list of rules to be applied\r\n\t\tlet rulesChanged: boolean = false;\r\n\r\n\t\tconst component = $type.getValue(this.component);\r\n\r\n\t\t// Check which rules match\r\n\t\t$iter.each(rules.iterator(), (rule) => {\r\n\r\n\t\t\t// Check if rule has an id\r\n\t\t\tif (!rule.id) {\r\n\t\t\t\trule.id = registry.getUniqueId();\r\n\t\t\t}\r\n\r\n\t\t\t// Init indicator if this rule should be applied\r\n\t\t\tlet apply = rule.relevant(component);\r\n\r\n\t\t\t// Let's check if this rule needs to be applied\r\n\t\t\tif ((apply && !this.isApplied(rule.id)) || (!apply && this.isApplied(rule.id))) {\r\n\t\t\t\trulesChanged = true;\r\n\t\t\t}\r\n\t\t\tthis._appliedRules[rule.id] = apply;\r\n\r\n\t\t});\r\n\r\n\t\t// Check if we need to re-apply the rules\r\n\t\tif (rulesChanged) {\r\n\t\t\tthis.applyRules();\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Applies current rules to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param target Target object\r\n\t * @todo Better type check\r\n\t */\r\n\tpublic applyRules(target?: Container): void {\r\n\t\t// If no target supplied, we assume the top-level element\r\n\t\tconst newTarget = ($type.hasValue(target)\r\n\t\t\t? target\r\n\t\t\t: $type.getValue(this.component));\r\n\r\n\t\t// Check each rule\r\n\t\tlet defaultStateApplied = false;\r\n\t\tif (this.enabled) {\r\n\t\t\t$iter.each(this.allRules.iterator(), (rule) => {\r\n\r\n\t\t\t\t// Get relevant state\r\n\t\t\t\tlet state = this.getState(rule, newTarget);\r\n\r\n\t\t\t\t// If there's a state, it means it needs to be applied\r\n\t\t\t\tif (state) {\r\n\r\n\t\t\t\t\t// Check if default state was already applied to this element.\r\n\t\t\t\t\t// We don't want to go resetting default states to ALL element,\r\n\t\t\t\t\t// if they don't have responsive states.\r\n\t\t\t\t\tif (!defaultStateApplied) {\r\n\r\n\t\t\t\t\t\t// Nope, reset states (instantly).\r\n\t\t\t\t\t\t//console.log(\"Applying default state to \" + newTarget.className + \" (\" + newTarget.uid + \"): \" + JSON.stringify(newTarget.defaultState.properties));\r\n\t\t\t\t\t\tnewTarget.applyCurrentState(0);\r\n\t\t\t\t\t\tdefaultStateApplied = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Is this rule currently applied?\r\n\t\t\t\t\tif (this.isApplied($type.getValue(rule.id))) {\r\n\t\t\t\t\t\t// Yes. Apply the responsive state\r\n\t\t\t\t\t\t//console.log(\"Applying state to \" + newTarget.className + \" (\" + newTarget.uid + \"): \" + JSON.stringify(state.properties));\r\n\t\t\t\t\t\tnewTarget.setState(state);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Apply rules to the children\r\n\t\tif (newTarget.children) {\r\n\t\t\t$iter.each(newTarget.children.iterator(), (child) => {\r\n\t\t\t\tthis.applyRules(child as Container);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Applies specific oresponsive overrides to the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param rule    Responsive rule\r\n\t * @param target  Target element\r\n\t * @deprecated\r\n\t * @hidden\r\n\t */\r\n\t/*\tpublic applyRule(rule: IResponsiveRule, target: any): void {\r\n\r\n\t\t\t// Construct state id\r\n\t\t\t//let stateId = \"responsive-\" + rule.id;\r\n\r\n\t\t\t// Check if we need to create a state for the element\r\n\t\t\tlet state = this.getState(rule, target);\r\n\r\n\t\t\t// Apply the state\r\n\t\t\tif (state) {\r\n\t\t\t\t//if (target.className == \"Container\" && target.parent.className == \"ZoomControl\") {\r\n\t\t\t\tconsole.log(\"Applying state to \" + target.className + \" (\" + target.uid + \"): \" + JSON.stringify(state.properties));\r\n\t\t\t\t//}\r\n\t\t\t\ttarget.setState(state);\r\n\t\t\t}\r\n\r\n\t\t}*/\r\n\r\n\t/**\r\n\t * Returns a relative state for the rule/target, or `undefined` if no state is\r\n\t * needed.\r\n\t *\r\n\t * @param rule    [description]\r\n\t * @param target  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getState(rule: IResponsiveRule, target: any): Optional<SpriteState<any, any>> {\r\n\t\tlet stateId = \"responsive-\" + rule.id;\r\n\t\tlet tmpId = target.uid + \"_\" + stateId;\r\n\t\tif ($array.indexOf(this._noStates, tmpId) !== -1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse if (!target.states.hasKey(stateId)) {\r\n\t\t\tlet state = rule.state(target, stateId);\r\n\t\t\tif (!state) {\r\n\t\t\t\tthis._noStates.push(tmpId);\r\n\t\t\t}\r\n\t\t\treturn state;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn target.states.getKey(stateId);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Gets a value from an element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param target    Target object\r\n\t * @param property  Property\r\n\t * @return Property value\r\n\t */\r\n\tpublic getValue(target: any, property: string): any {\r\n\t\t// This is a bit hacky, first we check if the property exist.\r\n\t\t// If it doesn't we try accessing target's property directly\r\n\t\tlet value: any = target.getPropertyValue(property);\r\n\t\tif (!$type.hasValue(value) && $type.hasValue(target[property])) {\r\n\t\t\tvalue = target[property];\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * [defaultRules description]\r\n * \r\n * @todo description\r\n */\r\nexport let defaultRules = new List<IResponsiveRule>();\r\ndefaultRules.events.on(\"inserted\", (ev) => {\r\n\tev.newValue.id = registry.getUniqueId();\r\n});\r\n\r\n/**\r\n * \r\n * @todo description\r\n */\r\nexport class ResponsiveBreakpoints {\r\n\r\n\t// Named pixel breakpoints\r\n\tstatic XXS = 100;\r\n\tstatic XS = 200;\r\n\tstatic S = 300;\r\n\tstatic M = 400;\r\n\tstatic L = 600;\r\n\tstatic XL = 800;\r\n\tstatic XXL = 1000;\r\n\r\n\t// Breakpoint functions (for use in `relevant` clause of the responsive rules)\r\n\r\n\tstatic widthXXS(container: Container): boolean {\r\n\t\treturn container.pixelWidth <= ResponsiveBreakpoints.XXS;\r\n\t}\r\n\r\n\tstatic widthXS(container: Container): boolean {\r\n\t\treturn container.pixelWidth <= ResponsiveBreakpoints.XS;\r\n\t}\r\n\r\n\tstatic widthS(container: Container): boolean {\r\n\t\treturn container.pixelWidth <= ResponsiveBreakpoints.S;\r\n\t}\r\n\r\n\tstatic widthM(container: Container): boolean {\r\n\t\treturn container.pixelWidth <= ResponsiveBreakpoints.M;\r\n\t}\r\n\r\n\tstatic widthL(container: Container): boolean {\r\n\t\treturn container.pixelWidth <= ResponsiveBreakpoints.L;\r\n\t}\r\n\r\n\tstatic widthXL(container: Container): boolean {\r\n\t\treturn container.pixelWidth <= ResponsiveBreakpoints.XL;\r\n\t}\r\n\r\n\tstatic widthXXL(container: Container): boolean {\r\n\t\treturn container.pixelWidth <= ResponsiveBreakpoints.XXL;\r\n\t}\r\n\r\n\r\n\tstatic heightXXS(container: Container): boolean {\r\n\t\treturn container.pixelHeight <= ResponsiveBreakpoints.XXS;\r\n\t}\r\n\r\n\tstatic heightXS(container: Container): boolean {\r\n\t\treturn container.pixelHeight <= ResponsiveBreakpoints.XS;\r\n\t}\r\n\r\n\tstatic heightS(container: Container): boolean {\r\n\t\treturn container.pixelHeight <= ResponsiveBreakpoints.S;\r\n\t}\r\n\r\n\tstatic heightM(container: Container): boolean {\r\n\t\treturn container.pixelHeight <= ResponsiveBreakpoints.M;\r\n\t}\r\n\r\n\tstatic heightL(container: Container): boolean {\r\n\t\treturn container.pixelHeight <= ResponsiveBreakpoints.L;\r\n\t}\r\n\r\n\tstatic heightXL(container: Container): boolean {\r\n\t\treturn container.pixelHeight <= ResponsiveBreakpoints.XL;\r\n\t}\r\n\r\n\tstatic heightXXL(container: Container): boolean {\r\n\t\treturn container.pixelHeight <= ResponsiveBreakpoints.XXL;\r\n\t}\r\n\r\n\r\n\tstatic isXXS(container: Container): boolean {\r\n\t\treturn (container.pixelWidth <= ResponsiveBreakpoints.XXS) && (container.pixelHeight <= ResponsiveBreakpoints.XXS);\r\n\t}\r\n\r\n\tstatic isXS(container: Container): boolean {\r\n\t\treturn (container.pixelWidth <= ResponsiveBreakpoints.XS) && (container.pixelHeight <= ResponsiveBreakpoints.XS);\r\n\t}\r\n\r\n\tstatic isS(container: Container): boolean {\r\n\t\treturn (container.pixelWidth <= ResponsiveBreakpoints.S) && (container.pixelHeight <= ResponsiveBreakpoints.S);\r\n\t}\r\n\r\n\tstatic isM(container: Container): boolean {\r\n\t\treturn (container.pixelWidth <= ResponsiveBreakpoints.M) && (container.pixelHeight <= ResponsiveBreakpoints.M);\r\n\t}\r\n\r\n\tstatic isL(container: Container): boolean {\r\n\t\treturn (container.pixelWidth <= ResponsiveBreakpoints.L) && (container.pixelHeight <= ResponsiveBreakpoints.L);\r\n\t}\r\n\r\n\tstatic isXL(container: Container): boolean {\r\n\t\treturn (container.pixelWidth <= ResponsiveBreakpoints.XL) && (container.pixelHeight <= ResponsiveBreakpoints.XL);\r\n\t}\r\n\r\n\tstatic isXXL(container: Container): boolean {\r\n\t\treturn (container.pixelWidth <= ResponsiveBreakpoints.XXL) && (container.pixelHeight <= ResponsiveBreakpoints.XXL);\r\n\t}\r\n\r\n\r\n\tstatic maybeXXS(container: Container): boolean {\r\n\t\treturn (container.pixelWidth <= ResponsiveBreakpoints.XXS) || (container.pixelHeight <= ResponsiveBreakpoints.XXS);\r\n\t}\r\n\r\n\tstatic maybeXS(container: Container): boolean {\r\n\t\treturn (container.pixelWidth <= ResponsiveBreakpoints.XS) || (container.pixelHeight <= ResponsiveBreakpoints.XS);\r\n\t}\r\n\r\n\tstatic maybeS(container: Container): boolean {\r\n\t\treturn (container.pixelWidth <= ResponsiveBreakpoints.S) || (container.pixelHeight <= ResponsiveBreakpoints.S);\r\n\t}\r\n\r\n\tstatic maybeM(container: Container): boolean {\r\n\t\treturn (container.pixelWidth <= ResponsiveBreakpoints.M) || (container.pixelHeight <= ResponsiveBreakpoints.M);\r\n\t}\r\n\r\n\tstatic maybeL(container: Container): boolean {\r\n\t\treturn (container.pixelWidth <= ResponsiveBreakpoints.L) || (container.pixelHeight <= ResponsiveBreakpoints.L);\r\n\t}\r\n\r\n\tstatic maybeXL(container: Container): boolean {\r\n\t\treturn (container.pixelWidth <= ResponsiveBreakpoints.XL) || (container.pixelHeight <= ResponsiveBreakpoints.XL);\r\n\t}\r\n\r\n\tstatic maybeXXL(container: Container): boolean {\r\n\t\treturn (container.pixelWidth <= ResponsiveBreakpoints.XXL) || (container.pixelHeight <= ResponsiveBreakpoints.XXL);\r\n\t}\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}