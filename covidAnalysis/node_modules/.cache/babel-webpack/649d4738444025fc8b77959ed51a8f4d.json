{"ast":null,"code":"/**\n * Defines WordCloud series.\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\n\nimport { Series, SeriesDataItem } from \"../../charts/series/Series\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { Container } from \"../../core/Container\";\nimport { Label } from \"../../core/elements/Label\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { color } from \"../../core/utils/Color\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $dom from \"../../core/utils/DOM\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\n * ============================================================================\n * DATA ITEM\n * ============================================================================\n * @hidden\n */\n//@todo: sequenced?\n\n/**\n * Defines a [[DataItem]] for [[WordCloudSeries]].\n *\n * @see {@link DataItem}\n */\n\nvar WordCloudSeriesDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(WordCloudSeriesDataItem, _super);\n  /**\n   * Constructor\n   */\n\n\n  function WordCloudSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"WordCloudSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\n   * Hide the data item (and corresponding visual elements).\n   *\n   * @param  duration  Duration (ms)\n   * @param  delay     Delay hiding (ms)\n   * @param  toValue   Target value for animation\n   * @param  fields    Fields to animate while hiding\n   */\n\n\n  WordCloudSeriesDataItem.prototype.hide = function (duration, delay, toValue, fields) {\n    if (!fields) {\n      fields = [\"value\"];\n    }\n\n    return _super.prototype.hide.call(this, duration, delay, 0, fields);\n  };\n  /**\n   * Sets visibility of the Data Item.\n   *\n   * @param value Data Item\n   */\n\n\n  WordCloudSeriesDataItem.prototype.setVisibility = function (value, noChangeValues) {\n    if (!noChangeValues) {\n      if (value) {\n        this.setWorkingValue(\"value\", this.values[\"value\"].value, 0, 0);\n      } else {\n        this.setWorkingValue(\"value\", 0, 0, 0);\n      }\n    }\n\n    _super.prototype.setVisibility.call(this, value, noChangeValues);\n  };\n  /**\n   * Show hidden data item (and corresponding cisual elements).\n   *\n   * @param duration  Duration (ms)\n   * @param delay     Delay hiding (ms)\n   * @param fields    Fields to animate while hiding\n   */\n\n\n  WordCloudSeriesDataItem.prototype.show = function (duration, delay, fields) {\n    if (!fields) {\n      fields = [\"value\"];\n    }\n\n    return _super.prototype.show.call(this, duration, delay, fields);\n  };\n\n  Object.defineProperty(WordCloudSeriesDataItem.prototype, \"word\", {\n    /**\n     * @return Word\n     */\n    get: function get() {\n      return this.properties.word;\n    },\n\n    /**\n     * The word.\n     *\n     * @param  value  Word\n     */\n    set: function set(value) {\n      this.setProperty(\"word\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WordCloudSeriesDataItem.prototype, \"label\", {\n    /**\n     * A [Label] element, related to this data item (word).\n     *\n     * @readonly\n     * @return Label element\n     */\n    get: function get() {\n      var _this = this;\n\n      if (!this._label) {\n        var label_1 = this.component.labels.create();\n        this._label = label_1;\n\n        this._disposers.push(label_1);\n\n        label_1.parent = this.component.labelsContainer;\n        label_1.isMeasured = false;\n        label_1.x = percent(50);\n        label_1.y = percent(50);\n        label_1.fontSize = 0;\n\n        if (this.component.colors) {\n          label_1.fill = this.component.colors.next();\n        }\n\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.labels.removeValue(label_1);\n          }\n        }));\n\n        this.addSprite(label_1);\n        label_1.visible = this.visible;\n      }\n\n      return this._label;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return WordCloudSeriesDataItem;\n}(SeriesDataItem);\n\nexport { WordCloudSeriesDataItem };\n/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Defines [[WordCloudSeries]] which is a base class for [[PieSeries]],\n * [[FunnelSeries]], and [[PyramidSeries]].\n *\n * @see {@link IWordCloudSeriesEvents} for a list of available Events\n * @see {@link IWordCloudSeriesAdapters} for a list of available Adapters\n */\n\nvar WordCloudSeries =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(WordCloudSeries, _super);\n  /**\n   * Constructor\n   */\n\n\n  function WordCloudSeries() {\n    var _this = _super.call(this) || this;\n\n    _this._adjustedFont = 1;\n    _this.className = \"WordCloudSeries\"; // Disabled\n    // this.colors = new ColorSet();\n    // this.colors.step = 1;\n    // this.colors.passOptions = {}; // makes it loop\n\n    _this.accuracy = 5;\n    _this.isMeasured = true;\n    _this.minFontSize = percent(2);\n    _this.maxFontSize = percent(20);\n    _this.excludeWords = [];\n    _this.layout = \"absolute\";\n    _this.angles = [0, 0, 90]; //this.maxCount = 100;\n\n    _this.rotationThreshold = 0.7;\n    _this.minWordLength = 1;\n    _this.width = percent(100);\n    _this.height = percent(100);\n    _this.step = 15;\n    _this.randomness = 0.2;\n    _this.labels.template.horizontalCenter = \"middle\";\n    _this.labels.template.verticalCenter = \"middle\"; // Accessibility\n\n    _this.itemReaderText = \"{word}: {value}\";\n\n    _this.applyTheme();\n\n    var canvas = document.createElement(\"canvas\");\n    canvas.style.position = \"absolute\";\n    canvas.style.top = \"0px\";\n    canvas.style.left = \"0px\";\n    canvas.style.opacity = \"0.5\"; //document.body.appendChild(canvas);\n\n    _this._canvas = canvas;\n    _this._ctx = canvas.getContext(\"2d\");\n    _this._maskSprite = _this.createChild(Sprite);\n\n    var labelsContainer = _this.createChild(Container);\n\n    labelsContainer.shouldClone = false;\n    labelsContainer.isMeasured = false;\n    labelsContainer.layout = \"none\";\n    _this.labelsContainer = labelsContainer;\n    _this._spiral = labelsContainer.createChild(Sprite);\n    _this._spiral.fillOpacity = 0.1;\n    _this._spiral.strokeOpacity = 1;\n    _this._spiral.stroke = color(\"#000\");\n    return _this; //this._maskSprite.visible = false;\n  }\n  /**\n   * Validates data range.\n   *\n   * @ignore\n   */\n\n\n  WordCloudSeries.prototype.validateDataRange = function () {\n    _super.prototype.validateDataRange.call(this);\n\n    this.dataItems.each(function (dataItem) {\n      $utils.used(dataItem.label);\n    });\n  };\n  /**\n   * Validates element.\n   *\n   * @ignore\n   */\n\n\n  WordCloudSeries.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    this._currentIndex = 0;\n    this.dataItems.values.sort(function (a, b) {\n      if (a.value == b.value) {\n        return 0;\n      } else if (a.value > b.value) {\n        return -1;\n      } else {\n        return 1;\n      }\n    });\n\n    if (this._processTimeout) {\n      this._processTimeout.dispose();\n    }\n\n    var w = this.innerWidth;\n    var h = this.innerHeight;\n\n    if (w > 0 && h > 0) {\n      var context = this._ctx;\n      this._canvas.width = w;\n      this._canvas.height = h;\n      context.fillStyle = \"white\";\n      context.fillRect(0, 0, w, h);\n      this._points = $path.spiralPoints(0, 0, w, h, 0, this.step, this.step);\n      var angle = this.labelsContainer.rotation;\n\n      for (var i = this._points.length - 1; i >= 0; i--) {\n        var point = this._points[i];\n\n        if (point.x < -w / 2 || point.x > w / 2 || point.y < -h / 2 || point.y > h / 2) {\n          this._points.splice(i, 1);\n\n          continue;\n        }\n\n        if (angle != 0) {\n          var point2 = $utils.spritePointToSprite({\n            x: point.x + w / 2,\n            y: point.y + h / 2\n          }, this, this.labelsContainer);\n          point.x = point2.x;\n          point.y = point2.y;\n        }\n      } //this._spiral.path = $path.pointsToPath(this._points);\n\n\n      var maskSprite = this._maskSprite;\n\n      if (maskSprite.path) {\n        var maxWidth = this.maxWidth;\n        var maxHeight = this.maxHeight;\n        maskSprite.isMeasured = true;\n        maskSprite.validate();\n        var pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\n        var pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\n        var scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\n\n        if (scale == Infinity) {\n          scale = 1; // can't return here, won't draw legend properly\n        }\n\n        maskSprite.horizontalCenter = \"none\";\n        maskSprite.verticalCenter = \"none\";\n        maskSprite.x = 0;\n        maskSprite.y = 0;\n        maskSprite.scale = 1;\n        scale = $math.max(0.001, scale);\n        maskSprite.horizontalCenter = \"middle\";\n        maskSprite.verticalCenter = \"middle\";\n        maskSprite.x = w / 2;\n        maskSprite.y = h / 2;\n        maskSprite.validatePosition();\n        this.mask = maskSprite;\n        /*\n        context.fillStyle = \"blue\";\n        context.fillRect(0, 0, w, h);\n        context.fillStyle = \"white\";\n        context.scale(scale, scale);\n         context.translate(maskSprite.maxLeft - maxLeft + w / 2 / scale, maskSprite.maxTop - maxTop + h / 2 / scale);\n        //let commandList = this.svgPathToCommands(maskSprite.path);\n        //this.drawSvgPath(context, commandList);\n        let p = new Path2D(maskSprite.path);\n        context.stroke(p);\n        context.fill(p);\n        context.translate(-maskSprite.maxLeft + maxLeft - w / 2 / scale, -maskSprite.maxTop + maxTop - h / 2 / scale);\n        context.scale(1 / scale, 1 / scale);\n        */\n\n        maskSprite.scale = scale;\n      }\n\n      this.processItem(this.dataItems.getIndex(this._currentIndex));\n    }\n  };\n  /**\n   * [processItem description]\n   *\n   * @param   dataItem  Data item\n   */\n\n\n  WordCloudSeries.prototype.processItem = function (dataItem) {\n    var _this = this;\n\n    var context = this._ctx;\n    var w = this.innerWidth;\n    var h = this.innerHeight;\n\n    if (window.getComputedStyle) {\n      var display = document.defaultView.getComputedStyle(this.htmlContainer, null).getPropertyValue(\"display\");\n\n      if (display == \"none\") {\n        this._processTimeout = this.setTimeout(function () {\n          _this._currentIndex++;\n\n          _this.processItem(_this.dataItems.getIndex(_this._currentIndex));\n        }, 500);\n\n        this._disposers.push(this._processTimeout);\n\n        return;\n      }\n    }\n\n    this.labelsContainer.x = w / 2;\n    this.labelsContainer.y = h / 2;\n    var label = dataItem.label;\n    var fontFace = $dom.findFont(label.element.node);\n    var smallerSize = $math.min(this.innerHeight, this.innerWidth);\n    var minFontSize = $utils.relativeToValue(this.minFontSize, smallerSize);\n    var maxFontSize = $utils.relativeToValue(this.maxFontSize, smallerSize);\n    var percent = (dataItem.value - this.dataItem.values.value.low) / this.dataItem.values.value.high;\n    var fontSize = minFontSize + (maxFontSize - minFontSize) * percent * this._adjustedFont;\n    var initialFontSize = label.fontSize;\n    label.fontSize = fontSize;\n    var angle = 0;\n\n    if ((fontSize - minFontSize) / (maxFontSize - minFontSize) < this.rotationThreshold) {\n      angle = this.angles[Math.round(Math.random() * (this.angles.length - 1))];\n    }\n\n    label.fontSize = fontSize;\n    label.rotation = angle;\n    label.show(0);\n    label.hardInvalidate();\n    label.validate();\n    var maxL = label.maxLeft;\n    var maxR = label.maxRight;\n    var maxT = label.maxTop;\n    var maxB = label.maxBottom;\n    var intersects = true;\n    var p = Math.round(Math.random() * this._points.length * this.randomness);\n    var initialX = label.pixelX;\n    var initialY = label.pixelY;\n    var x = 0;\n    var y = 0; // TODO is this needed ?\n\n    $utils.used(this.labelsContainer.rotation);\n\n    while (intersects) {\n      if (p > this._points.length - 1) {\n        intersects = false;\n        this._adjustedFont -= 0.1;\n        this.invalidate();\n        return;\n      }\n\n      intersects = false;\n      x = this._points[p].x;\n      y = this._points[p].y;\n      var marginLeft = label.pixelMarginLeft;\n      var marginRight = label.pixelMarginRight;\n      var marginTop = label.pixelMarginTop;\n      var marginBottom = label.pixelMarginBottom;\n      var rect1 = {\n        x: x + maxL - marginLeft,\n        y: y + maxT - marginTop,\n        width: maxR - maxL + marginLeft + marginRight,\n        height: maxB - maxT + marginTop + marginBottom\n      };\n\n      var pixel = this._ctx.getImageData(rect1.x + w / 2, rect1.y + h / 2, rect1.width, rect1.height).data;\n\n      for (var i = 0; i < pixel.length; i += Math.pow(2, this.accuracy)) {\n        if (pixel[i] != 255) {\n          intersects = true;\n\n          if (label.currentText.length > 3) {\n            if (angle == 0) {\n              if (maxR - maxL < 60) {\n                this._points.splice(p, 1);\n              }\n            }\n\n            if (Math.abs(angle) == 90) {\n              if (maxB - maxT < 50) {\n                this._points.splice(p, 1);\n              }\n            }\n          }\n\n          break;\n        }\n      }\n\n      p += 5;\n    }\n\n    if (initialFontSize == 0) {\n      label.animate([{\n        property: \"fontSize\",\n        to: fontSize,\n        from: initialFontSize\n      }], this.interpolationDuration, this.interpolationEasing);\n      label.x = x;\n      label.y = y;\n    } else {\n      label.animate([{\n        property: \"fontSize\",\n        to: fontSize,\n        from: initialFontSize\n      }, {\n        property: \"x\",\n        to: x,\n        from: initialX\n      }, {\n        property: \"y\",\n        to: y,\n        from: initialY\n      }], this.interpolationDuration, this.interpolationEasing);\n    }\n\n    var cx = x + w / 2;\n    var cy = y + h / 2;\n    context.translate(cx, cy);\n    var radAngle = label.rotation * Math.PI / 180;\n    context.rotate(radAngle);\n    context.textAlign = \"center\";\n    context.textBaseline = \"middle\";\n    context.fillStyle = \"blue\";\n    context.font = fontSize + \"px \" + fontFace;\n    context.fillText(label.currentText, 0, 0);\n    context.rotate(-radAngle);\n    context.translate(-cx, -cy);\n\n    if (label.showOnInit) {\n      label.hide(0);\n      label.show();\n    }\n\n    if (this._currentIndex < this.dataItems.length - 1) {\n      this._processTimeout = this.setTimeout(function () {\n        _this._currentIndex++;\n\n        _this.processItem(_this.dataItems.getIndex(_this._currentIndex));\n      }, 10);\n\n      this._disposers.push(this._processTimeout);\n    }\n  };\n  /**\n   * Sreates label element.\n   *\n   * @return label\n   */\n\n\n  WordCloudSeries.prototype.createLabel = function () {\n    return new Label();\n  };\n\n  Object.defineProperty(WordCloudSeries.prototype, \"labels\", {\n    /**\n     * [[Label]] elements representing each word.\n     *\n     * @return  Label elements\n     */\n    get: function get() {\n      if (!this._labels) {\n        var label = this.createLabel();\n        label.applyOnClones = true;\n\n        this._disposers.push(label);\n\n        label.text = \"{word}\";\n        label.margin(2, 3, 2, 3);\n        label.padding(0, 0, 0, 0);\n        this._labels = new ListTemplate(label);\n\n        this._disposers.push(new ListDisposer(this._labels));\n      }\n\n      return this._labels;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns a new/empty DataItem of the type appropriate for this object.\n   *\n   * @see {@link DataItem}\n   * @return Data Item\n   */\n\n  WordCloudSeries.prototype.createDataItem = function () {\n    return new WordCloudSeriesDataItem();\n  };\n\n  Object.defineProperty(WordCloudSeries.prototype, \"colors\", {\n    /**\n     * @return Color set\n     */\n    get: function get() {\n      return this.getPropertyValue(\"colors\");\n    },\n\n    /**\n     * A color set to be used for each new word.\n     *\n     * By default it's empty, so all words will be colored the same.\n     *\n     * If you want to automatically color each word differently, set this\n     * to a new instance of a [[ColorSet]].\n     *\n     * ```TypeScript\n     * series.colors = new am4core.ColorSet();\n     * series.colors.step = 1;\n     * series.colors.passOptions = {}; // makes it loop\n     * ```\n     * ```JavaScript\n     * series.colors = new am4core.ColorSet();\n     * series.colors.step = 1;\n     * series.colors.passOptions = {}; // makes it loop\n     * ```\n     * ```JSON\n     * {\n     *   // ...\n     *   \"series\": [{\n     *     // ...\n     *     \"colors\": {\n     *       \"type\": \"ColorSet\",\n     *       \"step\": 1,\n     *       \"passOptions\": {}\n     *     }\n     *   }]\n     * }\n     * ```\n     *\n     * @param  value  Color set\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"colors\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * [updateData description]\n   */\n\n  WordCloudSeries.prototype.updateData = function () {\n    this.data = this.getWords(this.text);\n  };\n\n  Object.defineProperty(WordCloudSeries.prototype, \"text\", {\n    /**\n     * @return Source text\n     */\n    get: function get() {\n      return this.getPropertyValue(\"text\");\n    },\n\n    /**\n     * A source text to build word cloud from.\n     *\n     * @param  value  Source text\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"text\", value)) {\n        this.updateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WordCloudSeries.prototype, \"maxCount\", {\n    /**\n     * @return Maximum words to show\n     */\n    get: function get() {\n      return this.getPropertyValue(\"maxCount\");\n    },\n\n    /**\n     * Maximum number of words to show.\n     *\n     * If ther are more words in the cloud than `maxCount`, smallest words will\n     * be discarded.\n     *\n     * NOTE: this setting is used only when you set whole text using `text`. If\n     * you set `chart.data` or `series.data` directly, it won't have any effect.\n     *\n     * @param  value  Maximum words to show\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"maxCount\", value)) {\n        this.updateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WordCloudSeries.prototype, \"minValue\", {\n    /**\n     * @return  Minimum occurences\n     */\n    get: function get() {\n      return this.getPropertyValue(\"minValue\");\n    },\n\n    /**\n     * Minimum occurances for a word to be included in the cloud.\n     *\n     * NOTE: this setting is used only when you set whole text using `text`. If\n     * you set `chart.data` or `series.data` directly, it won't have any effect.\n     *\n     * @default 1\n     * @param  value  Minimum occurences\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"minValue\", value)) {\n        this.updateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WordCloudSeries.prototype, \"excludeWords\", {\n    /**\n     * @return Words to exclude from the cloud\n     */\n    get: function get() {\n      return this.getPropertyValue(\"excludeWords\");\n    },\n\n    /**\n     * An array of words to exclude from the cloud.\n     *\n     * ```TypeScript\n     * series.excludeWords = [\"the\", \"a\", \"an\"];\n     * ```\n     * ```JavaScript\n     * series.excludeWords = [\"the\", \"a\", \"an\"];\n     * ```\n     * ```JSON\n     * {\n     *   // ...\n     *   \"series\": [{\n     *     // ...\n     *     \"excludeWords\": [\"the\", \"a\", \"an\"]\n     *   }]\n     * }\n     * ```\n     *\n     * NOTE: this setting is used only when you set whole text using `text`. If\n     * you set `chart.data` or `series.data` directly, it won't have any effect.\n     *\n     * @param  value  Words to exclude from the cloud\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"excludeWords\", value)) {\n        this.updateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WordCloudSeries.prototype, \"maxFontSize\", {\n    /**\n     * @return {number} Font size\n     */\n    get: function get() {\n      return this.getPropertyValue(\"maxFontSize\");\n    },\n\n    /**\n     * Font size for the biggest words.\n     *\n     * This can be set either as a numeric pixel size, or as a relative\n     * as `Percent`.\n     *\n     * When setting as percent it will use series' height or width (the one which is smaller) as a basis for\n     * calculating the font size.\n     *\n     * NOTE: this setting might be automatically adjusted if all words do not fit\n     * in the available space.\n     *\n     * @default 20%\n     * @param  value  Font size\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"maxFontSize\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WordCloudSeries.prototype, \"minFontSize\", {\n    /**\n     * @return Font size\n     */\n    get: function get() {\n      return this.getPropertyValue(\"minFontSize\");\n    },\n\n    /**\n     * Font size for the smallest words.\n     *\n     * This can be set either as a numeric pixel size, or as a relative\n     * as `Percent`.\n     *\n     * When setting as percent it will use series' height or width (the one which is smaller) as a basis for\n     * calculating the font size.\n     *\n     * @default 2%\n     * @param  value  Font size\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"minFontSize\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WordCloudSeries.prototype, \"randomness\", {\n    /**\n     * @return Randomness\n     */\n    get: function get() {\n      return this.getPropertyValue(\"randomness\");\n    },\n\n    /**\n     * Randomness of word placement.\n     *\n     * Available values are from 0 (no randomization) to 1 (completely random).\n     *\n     * The smaller the value the bigger the chance that biggest words will end up\n     * closer to the center.\n     *\n     * @default 0.2\n     * @param value Randomness\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"randomness\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WordCloudSeries.prototype, \"step\", {\n    /**\n     * @return Step\n     */\n    get: function get() {\n      return this.getPropertyValue(\"step\");\n    },\n\n    /**\n     * Step by which label is moved if its space is already occupied.\n     *\n     * The smaller the number, the more packed labels will be.\n     *\n     * NOTE: smaller numbers make for more packed clouds, but will consume\n     * considerably more CPU power. Use with caution with bigger clouds.\n     *\n     * @default 15\n     * @param  value Step\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"step\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WordCloudSeries.prototype, \"accuracy\", {\n    /**\n     * @return Accuracy\n     */\n    get: function get() {\n      return this.getPropertyValue(\"accuracy\");\n    },\n\n    /**\n     * Accuracy setting when checking for overlapping of words.\n     *\n     * The bigger the number, the bigger chance of overlapping, but it's also\n     * better for performance.\n     *\n     * Use smaller numbers if you are using a thin font.\n     *\n     * @default 5\n     * @param  value  Accuracy\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"accuracy\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WordCloudSeries.prototype, \"minWordLength\", {\n    /**\n     * @return Minimum word length\n     */\n    get: function get() {\n      return this.getPropertyValue(\"minWordLength\");\n    },\n\n    /**\n     * Minimum number of characters for a word to be included in the cloud.\n     *\n     * NOTE: this setting is used only when you set whole text using `text`. If\n     * you set `chart.data` or `series.data` directly, it won't have any effect.\n     *\n     * @default 1\n     * @param {number} value Minimum word length\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"minWordLength\", value)) {\n        this.updateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WordCloudSeries.prototype, \"rotationThreshold\", {\n    /**\n     * @return Threshold\n     */\n    get: function get() {\n      return this.getPropertyValue(\"rotationThreshold\");\n    },\n\n    /**\n     * Rotation threshold.\n     *\n     * Big words don't look good good when rotated, hence this setting.\n     *\n     * It works like this: if word's relative height is bigger\n     * than `rotationThreshold`, the word will never be rotated.\n     *\n     * Available values are from 0 (none of the words will be rotated) to 1 (all\n     * words can be rotated).\n     *\n     * @default 0.7\n     * @param  value  Threshold\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"rotationThreshold\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WordCloudSeries.prototype, \"angles\", {\n    /**\n     * @return Angles\n     */\n    get: function get() {\n      return this.getPropertyValue(\"angles\");\n    },\n\n    /**\n     * An array of available word rotation angles.\n     *\n     * The only supported values are: 0 (horizontal), and 90 (vertical).\n     *\n     * @default [0, 0, 90]\n     * @param  value  Angles\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"angles\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WordCloudSeries.prototype, \"maskSprite\", {\n    /**\n     * @ignore\n     * Not finished yet\n     */\n    get: function get() {\n      return this._maskSprite;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Copies all properties from another instance of [[WordCloudSeries]].\n   *\n   * @param source  Source series\n   */\n\n  WordCloudSeries.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.labels.template.copyFrom(source.labels.template);\n  };\n  /**\n   * Extracts words and number of their appearances from a text.\n   *\n   * @ignore\n   * @param  input  Source text\n   */\n\n\n  WordCloudSeries.prototype.getWords = function (input) {\n    if (input) {\n      this.dataFields.word = \"word\";\n      this.dataFields.value = \"value\";\n      var reg = new RegExp(\"[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376-\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0523\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0621-\\u064A\\u066E-\\u066F\\u0671-\\u06D3\\u06D5\\u06E5-\\u06E6\\u06EE-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4-\\u07F5\\u07FA\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0972\\u097B-\\u097F\\u0985-\\u098C\\u098F-\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC-\\u09DD\\u09DF-\\u09E1\\u09F0-\\u09F1\\u0A05-\\u0A0A\\u0A0F-\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32-\\u0A33\\u0A35-\\u0A36\\u0A38-\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2-\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0-\\u0AE1\\u0B05-\\u0B0C\\u0B0F-\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32-\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C-\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99-\\u0B9A\\u0B9C\\u0B9E-\\u0B9F\\u0BA3-\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58-\\u0C59\\u0C60-\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0-\\u0CE1\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D28\\u0D2A-\\u0D39\\u0D3D\\u0D60-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32-\\u0E33\\u0E40-\\u0E46\\u0E81-\\u0E82\\u0E84\\u0E87-\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA-\\u0EAB\\u0EAD-\\u0EB0\\u0EB2-\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDD\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8B\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065-\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10D0-\\u10FA\\u10FC\\u1100-\\u1159\\u115F-\\u11A2\\u11A8-\\u11F9\\u1200-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u1676\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19A9\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE-\\u1BAF\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u2094\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2C6F\\u2C71-\\u2C7D\\u2C80-\\u2CE4\\u2D00-\\u2D25\\u2D30-\\u2D65\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31B7\\u31F0-\\u31FF\\u3400\\u4DB5\\u4E00\\u9FC3\\uA000-\\uA48C\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A-\\uA62B\\uA640-\\uA65F\\uA662-\\uA66E\\uA67F-\\uA697\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78C\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA90A-\\uA925\\uA930-\\uA946\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAC00\\uD7A3\\uF900-\\uFA2D\\uFA30-\\uFA6A\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC0-9@+]+\", \"ig\");\n      var res = input.match(reg);\n\n      if (!res) {\n        return [];\n      }\n\n      var words = [];\n      var word = void 0;\n\n      while (true) {\n        word = res.pop();\n\n        if (!word) {\n          break;\n        }\n\n        var item = void 0;\n\n        for (var i = 0; i < words.length; i++) {\n          if (words[i].word.toLowerCase() == word.toLowerCase()) {\n            item = words[i];\n            break;\n          }\n        }\n\n        if (item) {\n          item.value++;\n\n          if (!this.isCapitalized(word)) {\n            item.word = word;\n          }\n        } else {\n          words.push({\n            word: word,\n            value: 1\n          });\n        }\n      }\n\n      var excludeWords = this.excludeWords;\n\n      if (this.minValue > 1 || this.minWordLength > 1 || excludeWords && excludeWords.length > 0) {\n        for (var i = words.length - 1; i >= 0; i--) {\n          var w = words[i];\n\n          if (w.value < this.minValue) {\n            words.splice(i, 1);\n          }\n\n          if (w.word.length < this.minWordLength) {\n            words.splice(i, 1);\n          }\n\n          if (excludeWords.indexOf(w.word) !== -1) {\n            words.splice(i, 1);\n          }\n        }\n      }\n\n      words.sort(function (a, b) {\n        if (a.value == b.value) {\n          return 0;\n        } else if (a.value > b.value) {\n          return -1;\n        } else {\n          return 1;\n        }\n      });\n\n      if (words.length > this.maxCount) {\n        words = words.slice(0, this.maxCount);\n      }\n\n      return words;\n    }\n  };\n  /**\n   * Checks if word is capitalized (starts with an uppercase) or not.\n   *\n   * @param   word  Word\n   * @return        Capitalized?\n   */\n\n\n  WordCloudSeries.prototype.isCapitalized = function (word) {\n    var lword = word.toLowerCase();\n    return word[0] != lword[0] && word.substr(1) == lword.substr(1) && word != lword;\n  };\n\n  return WordCloudSeries;\n}(Series);\n\nexport { WordCloudSeries };\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n *\n * @ignore\n */\n\nregistry.registeredClasses[\"WordCloudSeries\"] = WordCloudSeries;\nregistry.registeredClasses[\"WordCloudSeriesDataItem\"] = WordCloudSeriesDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/plugins/wordCloud/WordCloudSeries.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Defines WordCloud series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"../../charts/series/Series\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { WordCloud } from \"./WordCloud\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $dom from \"../../core/utils/DOM\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer } from \"../../core/utils/Disposer\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[WordCloudSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class WordCloudSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * A reference to a word label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: WordCloudSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"WordCloudSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param  duration  Duration (ms)\r\n\t * @param  delay     Delay hiding (ms)\r\n\t * @param  toValue   Target value for animation\r\n\t * @param  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tif (!fields) {\r\n\t\t\tfields = [\"value\"];\r\n\t\t}\r\n\t\treturn super.hide(duration, delay, 0, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets visibility of the Data Item.\r\n\t *\r\n\t * @param value Data Item\r\n\t */\r\n\tpublic setVisibility(value: boolean, noChangeValues?: boolean): void {\r\n\t\tif (!noChangeValues) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.setWorkingValue(\"value\", this.values[\"value\"].value, 0, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.setWorkingValue(\"value\", 0, 0, 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.setVisibility(value, noChangeValues);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding cisual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tif (!fields) {\r\n\t\t\tfields = [\"value\"];\r\n\t\t}\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * The word.\r\n\t *\r\n\t * @param  value  Word\r\n\t */\r\n\tpublic set word(value: string) {\r\n\t\tthis.setProperty(\"word\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Word\r\n\t */\r\n\tpublic get word(): string {\r\n\t\treturn this.properties.word;\r\n\t}\r\n\r\n\t/**\r\n\t * A [Label] element, related to this data item (word).\r\n\t *\r\n\t * @readonly\r\n\t * @return Label element\r\n\t */\r\n\tpublic get label(): this[\"_label\"] {\r\n\t\tif (!this._label) {\r\n\t\t\tlet label = this.component.labels.create();\r\n\t\t\tthis._label = label;\r\n\r\n\t\t\tthis._disposers.push(label);\r\n\t\t\tlabel.parent = this.component.labelsContainer;\r\n\t\t\tlabel.isMeasured = false;\r\n\t\t\tlabel.x = percent(50);\r\n\t\t\tlabel.y = percent(50);\r\n\t\t\tlabel.fontSize = 0;\r\n\r\n\t\t\tif (this.component.colors) {\r\n\t\t\t\tlabel.fill = this.component.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.labels.removeValue(label);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tthis.addSprite(label);\r\n\t\t\tlabel.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[WordCloudSeries]].\r\n */\r\nexport interface IWordCloudSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds word.\r\n\t */\r\n\tword?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[WordCloudSeries]].\r\n */\r\nexport interface IWordCloudSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * A color set to be used for words.\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n\t/**\r\n\t * Source text from which words are extracted.\r\n\t */\r\n\ttext?: string;\r\n\r\n\t/**\r\n\t * Absolute or relative font size for the smallest words.\r\n\t */\r\n\tminFontSize?: number | Percent;\r\n\r\n\t/**\r\n\t * Absolute or relative font size for the biggest words.\r\n\t */\r\n\tmaxFontSize?: number | Percent;\r\n\r\n\t/**\r\n\t * Minimum occurances for a word to be included into cloud.\r\n\t */\r\n\tminValue?: number;\r\n\r\n\t/**\r\n\t * Maximum number of words to show.\r\n\t */\r\n\tmaxCount?: number;\r\n\r\n\t/**\r\n\t * Array of words  exclude from cloud.\r\n\t */\r\n\texcludeWords?: string[];\r\n\r\n\t/**\r\n\t * Randomness of word placement (0-1).\r\n\t */\r\n\trandomness?: number;\r\n\r\n\t/**\r\n\t * Minimum number of characters for a word to be included in the cloud.\r\n\t */\r\n\tminWordLength?: number;\r\n\r\n\t/**\r\n\t * An array of possible rotation angles for words.\r\n\t */\r\n\tangles?: number[];\r\n\r\n\t/**\r\n\t * If word's relative height is bigger than this, it won't be rotated.\r\n\t */\r\n\trotationThreshold?: number;\r\n\r\n\t/**\r\n\t * Step for next word placement.\r\n\t */\r\n\tstep?: number;\r\n\r\n\t/**\r\n\t * Accuracy of overlapping check.\r\n\t */\r\n\taccuracy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[WordCloudSeries]].\r\n */\r\nexport interface IWordCloudSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[WordCloudSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IWordCloudSeriesAdapters extends ISeriesAdapters, IWordCloudSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[WordCloudSeries]] which is a base class for [[PieSeries]],\r\n * [[FunnelSeries]], and [[PyramidSeries]].\r\n *\r\n * @see {@link IWordCloudSeriesEvents} for a list of available Events\r\n * @see {@link IWordCloudSeriesAdapters} for a list of available Adapters\r\n */\r\nexport class WordCloudSeries extends Series {\r\n\t/**\r\n\t * Defines type of the label elements for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to chart this series is for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _chart: WordCloud;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IWordCloudSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IWordCloudSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IWordCloudSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IWordCloudSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: WordCloudSeriesDataItem;\r\n\r\n\t/**\r\n\t * List of label elements.\r\n\t */\r\n\tprotected _labels: ListTemplate<this[\"_label\"]>;\r\n\r\n\tprotected _ctx: CanvasRenderingContext2D;\r\n\r\n\tprotected _canvas: HTMLCanvasElement;\r\n\r\n\tprotected _spiral: Sprite;\r\n\r\n\tprotected _points: IPoint[];\r\n\r\n\tprotected _adjustedFont: number = 1;\r\n\r\n\tprotected _processTimeout: IDisposer;\r\n\r\n\tprotected _currentIndex: number;\r\n\r\n\t/**\r\n\t * Holds a Sprite that acts as an intelligent mask for the serries.\r\n\t */\r\n\tprotected _maskSprite: Sprite;\r\n\r\n\t/**\r\n\t * Container label elements are put in.\r\n\t */\r\n\tpublic labelsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"WordCloudSeries\";\r\n\r\n\t\t// Disabled\r\n\t\t// this.colors = new ColorSet();\r\n\t\t// this.colors.step = 1;\r\n\t\t// this.colors.passOptions = {}; // makes it loop\r\n\r\n\t\tthis.accuracy = 5;\r\n\r\n\t\tthis.isMeasured = true;\r\n\r\n\t\tthis.minFontSize = percent(2);\r\n\t\tthis.maxFontSize = percent(20);\r\n\r\n\t\tthis.excludeWords = [];\r\n\r\n\t\tthis.layout = \"absolute\";\r\n\r\n\t\tthis.angles = [0, 0, 90];\r\n\r\n\t\t//this.maxCount = 100;\r\n\t\tthis.rotationThreshold = 0.7;\r\n\t\tthis.minWordLength = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.step = 15;\r\n\r\n\t\tthis.randomness = 0.2;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\t\tthis.labels.template.verticalCenter = \"middle\";\r\n\r\n\t\t// Accessibility\r\n\t\tthis.itemReaderText = \"{word}: {value}\";\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tlet canvas = document.createElement(\"canvas\");\r\n\t\tcanvas.style.position = \"absolute\";\r\n\t\tcanvas.style.top = \"0px\";\r\n\t\tcanvas.style.left = \"0px\";\r\n\t\tcanvas.style.opacity = \"0.5\";\r\n\t\t//document.body.appendChild(canvas);\r\n\t\tthis._canvas = canvas;\r\n\r\n\t\tthis._ctx = canvas.getContext(\"2d\");\r\n\r\n\t\tthis._maskSprite = this.createChild(Sprite);\r\n\r\n\t\tlet labelsContainer = this.createChild(Container);\r\n\t\tlabelsContainer.shouldClone = false;\r\n\t\tlabelsContainer.isMeasured = false;\r\n\t\tlabelsContainer.layout = \"none\";\r\n\t\tthis.labelsContainer = labelsContainer;\r\n\r\n\t\tthis._spiral = labelsContainer.createChild(Sprite);\r\n\t\tthis._spiral.fillOpacity = 0.1;\r\n\t\tthis._spiral.strokeOpacity = 1;\r\n\t\tthis._spiral.stroke = color(\"#000\");\r\n\r\n\r\n\t\t//this._maskSprite.visible = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\t\tsuper.validateDataRange();\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t$utils.used(dataItem.label);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Validates element.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis._currentIndex = 0;\r\n\r\n\t\tthis.dataItems.values.sort(function(a, b) {\r\n\t\t\tif (a.value == b.value) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if (a.value > b.value) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tif (this._processTimeout) {\r\n\t\t\tthis._processTimeout.dispose();\r\n\t\t}\r\n\r\n\t\tlet w = this.innerWidth;\r\n\t\tlet h = this.innerHeight;\r\n\t\tif (w > 0 && h > 0) {\r\n\r\n\t\t\tlet context = this._ctx;\r\n\r\n\t\t\tthis._canvas.width = w;\r\n\t\t\tthis._canvas.height = h;\r\n\r\n\t\t\tcontext.fillStyle = \"white\";\r\n\t\t\tcontext.fillRect(0, 0, w, h);\r\n\r\n\t\t\tthis._points = $path.spiralPoints(0, 0, w, h, 0, this.step, this.step);\r\n\r\n\t\t\tlet angle = this.labelsContainer.rotation;\r\n\r\n\t\t\tfor (let i = this._points.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet point = this._points[i];\r\n\r\n\t\t\t\tif (point.x < -w / 2 || point.x > w / 2 || point.y < -h / 2 || point.y > h / 2) {\r\n\t\t\t\t\tthis._points.splice(i, 1);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (angle != 0) {\r\n\t\t\t\t\tlet point2 = $utils.spritePointToSprite({ x: point.x + w / 2, y: point.y + h / 2 }, this, this.labelsContainer);\r\n\t\t\t\t\tpoint.x = point2.x;\r\n\t\t\t\t\tpoint.y = point2.y;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//this._spiral.path = $path.pointsToPath(this._points);\r\n\r\n\r\n\t\t\tlet maskSprite = this._maskSprite;\r\n\r\n\t\t\tif (maskSprite.path) {\r\n\t\t\t\tlet maxWidth = this.maxWidth;\r\n\t\t\t\tlet maxHeight = this.maxHeight;\r\n\r\n\t\t\t\tmaskSprite.isMeasured = true;\r\n\t\t\t\tmaskSprite.validate();\r\n\r\n\t\t\t\tlet pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n\t\t\t\tlet pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n\r\n\t\t\t\tlet scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n\r\n\t\t\t\tif (scale == Infinity) {\r\n\t\t\t\t\tscale = 1; // can't return here, won't draw legend properly\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmaskSprite.horizontalCenter = \"none\";\r\n\t\t\t\tmaskSprite.verticalCenter = \"none\";\r\n\t\t\t\tmaskSprite.x = 0;\r\n\t\t\t\tmaskSprite.y = 0;\r\n\t\t\t\tmaskSprite.scale = 1;\r\n\r\n\t\t\t\tscale = $math.max(0.001, scale);\r\n\r\n\t\t\t\tmaskSprite.horizontalCenter = \"middle\";\r\n\t\t\t\tmaskSprite.verticalCenter = \"middle\";\r\n\t\t\t\tmaskSprite.x = w / 2;\r\n\t\t\t\tmaskSprite.y = h / 2;\r\n\t\t\t\tmaskSprite.validatePosition();\r\n\r\n\t\t\t\tthis.mask = maskSprite;\r\n\t\t\t\t/*\r\n\t\t\t\tcontext.fillStyle = \"blue\";\r\n\t\t\t\tcontext.fillRect(0, 0, w, h);\r\n\t\t\t\tcontext.fillStyle = \"white\";\r\n\t\t\t\tcontext.scale(scale, scale);\r\n\r\n\t\t\t\tcontext.translate(maskSprite.maxLeft - maxLeft + w / 2 / scale, maskSprite.maxTop - maxTop + h / 2 / scale);\r\n\t\t\t\t//let commandList = this.svgPathToCommands(maskSprite.path);\r\n\t\t\t\t//this.drawSvgPath(context, commandList);\r\n\t\t\t\tlet p = new Path2D(maskSprite.path);\r\n\t\t\t\tcontext.stroke(p);\r\n\t\t\t\tcontext.fill(p);\r\n\t\t\t\tcontext.translate(-maskSprite.maxLeft + maxLeft - w / 2 / scale, -maskSprite.maxTop + maxTop - h / 2 / scale);\r\n\t\t\t\tcontext.scale(1 / scale, 1 / scale);\r\n\t\t\t\t*/\r\n\r\n\t\t\t\tmaskSprite.scale = scale;\r\n\t\t\t}\r\n\r\n\t\t\tthis.processItem(this.dataItems.getIndex(this._currentIndex));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [processItem description]\r\n\t *\r\n\t * @param   dataItem  Data item\r\n\t */\r\n\tprotected processItem(dataItem: this[\"_dataItem\"]) {\r\n\r\n\t\tlet context = this._ctx;\r\n\r\n\t\tlet w = this.innerWidth;\r\n\t\tlet h = this.innerHeight;\r\n\r\n\t\tif (window.getComputedStyle) {\r\n\t\t\tlet display = document.defaultView.getComputedStyle(this.htmlContainer, null).getPropertyValue(\"display\");\r\n\t\t\tif (display == \"none\") {\r\n\t\t\t\tthis._processTimeout = this.setTimeout(() => {\r\n\t\t\t\t\tthis._currentIndex++;\r\n\t\t\t\t\tthis.processItem(this.dataItems.getIndex(this._currentIndex));\r\n\t\t\t\t}, 500);\r\n\t\t\t\tthis._disposers.push(this._processTimeout);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.labelsContainer.x = w / 2;\r\n\t\tthis.labelsContainer.y = h / 2;\r\n\r\n\t\tlet label = dataItem.label;\r\n\t\tlet fontFace = $dom.findFont(label.element.node);\r\n\r\n\t\tlet smallerSize = $math.min(this.innerHeight, this.innerWidth);\r\n\t\tlet minFontSize = $utils.relativeToValue(this.minFontSize, smallerSize);\r\n\t\tlet maxFontSize = $utils.relativeToValue(this.maxFontSize, smallerSize);\r\n\r\n\t\tlet percent = (dataItem.value - this.dataItem.values.value.low) / this.dataItem.values.value.high;\r\n\r\n\t\tlet fontSize = minFontSize + (maxFontSize - minFontSize) * percent * this._adjustedFont;\r\n\r\n\t\tlet initialFontSize = label.fontSize;\r\n\t\tlabel.fontSize = fontSize;\r\n\r\n\t\tlet angle = 0;\r\n\t\tif ((fontSize - minFontSize) / (maxFontSize - minFontSize) < this.rotationThreshold) {\r\n\t\t\tangle = this.angles[Math.round(Math.random() * (this.angles.length - 1))];\r\n\t\t}\r\n\r\n\t\tlabel.fontSize = fontSize;\r\n\t\tlabel.rotation = angle;\r\n\t\tlabel.show(0);\r\n\t\tlabel.hardInvalidate();\r\n\t\tlabel.validate();\r\n\r\n\t\tlet maxL = label.maxLeft;\r\n\t\tlet maxR = label.maxRight;\r\n\t\tlet maxT = label.maxTop;\r\n\t\tlet maxB = label.maxBottom;\r\n\r\n\t\tlet intersects = true;\r\n\r\n\t\tlet p = Math.round(Math.random() * this._points.length * this.randomness);\r\n\r\n\t\tlet initialX = label.pixelX;\r\n\t\tlet initialY = label.pixelY;\r\n\r\n\t\tlet x = 0;\r\n\t\tlet y = 0;\r\n\r\n\t\t// TODO is this needed ?\r\n\t\t$utils.used(this.labelsContainer.rotation);\r\n\r\n\t\twhile (intersects) {\r\n\t\t\tif (p > this._points.length - 1) {\r\n\t\t\t\tintersects = false;\r\n\t\t\t\tthis._adjustedFont -= 0.1;\r\n\t\t\t\tthis.invalidate();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tintersects = false;\r\n\r\n\t\t\tx = this._points[p].x;\r\n\t\t\ty = this._points[p].y;\r\n\r\n\t\t\tlet marginLeft = label.pixelMarginLeft;\r\n\t\t\tlet marginRight = label.pixelMarginRight;\r\n\t\t\tlet marginTop = label.pixelMarginTop;\r\n\t\t\tlet marginBottom = label.pixelMarginBottom;\r\n\r\n\t\t\tlet rect1 = { x: x + maxL - marginLeft, y: y + maxT - marginTop, width: maxR - maxL + marginLeft + marginRight, height: maxB - maxT + marginTop + marginBottom };\r\n\r\n\t\t\tlet pixel = this._ctx.getImageData(rect1.x + w / 2, rect1.y + h / 2, rect1.width, rect1.height).data;\r\n\t\t\tfor (let i = 0; i < pixel.length; i += Math.pow(2, this.accuracy)) {\r\n\t\t\t\tif (pixel[i] != 255) {\r\n\t\t\t\t\tintersects = true;\r\n\t\t\t\t\tif (label.currentText.length > 3) {\r\n\t\t\t\t\t\tif (angle == 0) {\r\n\t\t\t\t\t\t\tif (maxR - maxL < 60) {\r\n\t\t\t\t\t\t\t\tthis._points.splice(p, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (Math.abs(angle) == 90) {\r\n\t\t\t\t\t\t\tif (maxB - maxT < 50) {\r\n\t\t\t\t\t\t\t\tthis._points.splice(p, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tp += 5;\r\n\t\t}\r\n\t\tif (initialFontSize == 0) {\r\n\t\t\tlabel.animate([{ property: \"fontSize\", to: fontSize, from: initialFontSize }], this.interpolationDuration, this.interpolationEasing);\r\n\t\t\tlabel.x = x;\r\n\t\t\tlabel.y = y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlabel.animate([{ property: \"fontSize\", to: fontSize, from: initialFontSize }, { property: \"x\", to: x, from: initialX }, { property: \"y\", to: y, from: initialY }], this.interpolationDuration, this.interpolationEasing);\r\n\t\t}\r\n\r\n\t\tlet cx = x + w / 2;\r\n\t\tlet cy = y + h / 2;\r\n\r\n\t\tcontext.translate(cx, cy);\r\n\t\tlet radAngle = label.rotation * Math.PI / 180;\r\n\t\tcontext.rotate(radAngle);\r\n\t\tcontext.textAlign = \"center\";\r\n\t\tcontext.textBaseline = \"middle\";\r\n\t\tcontext.fillStyle = \"blue\";\r\n\t\tcontext.font = fontSize + \"px \" + fontFace;\r\n\t\tcontext.fillText(label.currentText, 0, 0);\r\n\t\tcontext.rotate(-radAngle);\r\n\t\tcontext.translate(-cx, -cy);\r\n\r\n\t\tif (label.showOnInit) {\r\n\t\t\tlabel.hide(0);\r\n\t\t\tlabel.show();\r\n\t\t}\r\n\r\n\t\tif (this._currentIndex < this.dataItems.length - 1) {\r\n\t\t\tthis._processTimeout = this.setTimeout(() => {\r\n\t\t\t\tthis._currentIndex++;\r\n\t\t\t\tthis.processItem(this.dataItems.getIndex(this._currentIndex));\r\n\t\t\t}, 10);\r\n\t\t\tthis._disposers.push(this._processTimeout);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sreates label element.\r\n\t *\r\n\t * @return label\r\n\t */\r\n\tprotected createLabel(): this[\"_label\"] {\r\n\t\treturn new Label();\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] elements representing each word.\r\n\t *\r\n\t * @return  Label elements\r\n\t */\r\n\tpublic get labels(): ListTemplate<this[\"_label\"]> {\r\n\t\tif (!this._labels) {\r\n\t\t\tlet label = this.createLabel();\r\n\t\t\tlabel.applyOnClones = true;\r\n\t\t\tthis._disposers.push(label);\r\n\r\n\t\t\tlabel.text = \"{word}\";\r\n\t\t\tlabel.margin(2, 3, 2, 3);\r\n\t\t\tlabel.padding(0, 0, 0, 0);\r\n\r\n\t\t\tthis._labels = new ListTemplate(label);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._labels));\r\n\t\t}\r\n\t\treturn this._labels;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new WordCloudSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A color set to be used for each new word.\r\n\t *\r\n\t * By default it's empty, so all words will be colored the same.\r\n\t *\r\n\t * If you want to automatically color each word differently, set this\r\n\t * to a new instance of a [[ColorSet]].\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.colors = new am4core.ColorSet();\r\n\t * series.colors.step = 1;\r\n\t * series.colors.passOptions = {}; // makes it loop\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.colors = new am4core.ColorSet();\r\n\t * series.colors.step = 1;\r\n\t * series.colors.passOptions = {}; // makes it loop\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"colors\": {\r\n\t *       \"type\": \"ColorSet\",\r\n\t *       \"step\": 1,\r\n\t *       \"passOptions\": {}\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param  value  Color set\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color set\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * [updateData description]\r\n\t */\r\n\tprotected updateData(): void {\r\n\t\tthis.data = this.getWords(this.text);\r\n\t}\r\n\r\n\t/**\r\n\t * A source text to build word cloud from.\r\n\t *\r\n\t * @param  value  Source text\r\n\t */\r\n\tpublic set text(value: string) {\r\n\t\tif (this.setPropertyValue(\"text\", value)) {\r\n\t\t\tthis.updateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Source text\r\n\t */\r\n\tpublic get text(): string {\r\n\t\treturn this.getPropertyValue(\"text\");\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum number of words to show.\r\n\t *\r\n\t * If ther are more words in the cloud than `maxCount`, smallest words will\r\n\t * be discarded.\r\n\t *\r\n\t * NOTE: this setting is used only when you set whole text using `text`. If\r\n\t * you set `chart.data` or `series.data` directly, it won't have any effect.\r\n\t *\r\n\t * @param  value  Maximum words to show\r\n\t */\r\n\tpublic set maxCount(value: number) {\r\n\t\tif (this.setPropertyValue(\"maxCount\", value)) {\r\n\t\t\tthis.updateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum words to show\r\n\t */\r\n\tpublic get maxCount(): number {\r\n\t\treturn this.getPropertyValue(\"maxCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum occurances for a word to be included in the cloud.\r\n\t *\r\n\t * NOTE: this setting is used only when you set whole text using `text`. If\r\n\t * you set `chart.data` or `series.data` directly, it won't have any effect.\r\n\t *\r\n\t * @default 1\r\n\t * @param  value  Minimum occurences\r\n\t */\r\n\tpublic set minValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"minValue\", value)) {\r\n\t\t\tthis.updateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return  Minimum occurences\r\n\t */\r\n\tpublic get minValue(): number {\r\n\t\treturn this.getPropertyValue(\"minValue\");\r\n\t}\r\n\r\n\t/**\r\n\t * An array of words to exclude from the cloud.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.excludeWords = [\"the\", \"a\", \"an\"];\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.excludeWords = [\"the\", \"a\", \"an\"];\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"excludeWords\": [\"the\", \"a\", \"an\"]\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * NOTE: this setting is used only when you set whole text using `text`. If\r\n\t * you set `chart.data` or `series.data` directly, it won't have any effect.\r\n\t *\r\n\t * @param  value  Words to exclude from the cloud\r\n\t */\r\n\tpublic set excludeWords(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"excludeWords\", value)) {\r\n\t\t\tthis.updateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Words to exclude from the cloud\r\n\t */\r\n\tpublic get excludeWords(): string[] {\r\n\t\treturn this.getPropertyValue(\"excludeWords\");\r\n\t}\r\n\r\n\t/**\r\n\t * Font size for the biggest words.\r\n\t *\r\n\t * This can be set either as a numeric pixel size, or as a relative\r\n\t * as `Percent`.\r\n\t *\r\n\t * When setting as percent it will use series' height or width (the one which is smaller) as a basis for\r\n\t * calculating the font size.\r\n\t *\r\n\t * NOTE: this setting might be automatically adjusted if all words do not fit\r\n\t * in the available space.\r\n\t *\r\n\t * @default 20%\r\n\t * @param  value  Font size\r\n\t */\r\n\tpublic set maxFontSize(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"maxFontSize\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Font size\r\n\t */\r\n\tpublic get maxFontSize(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"maxFontSize\");\r\n\t}\r\n\r\n\t/**\r\n\t * Font size for the smallest words.\r\n\t *\r\n\t * This can be set either as a numeric pixel size, or as a relative\r\n\t * as `Percent`.\r\n\t *\r\n\t * When setting as percent it will use series' height or width (the one which is smaller) as a basis for\r\n\t * calculating the font size.\r\n\t *\r\n\t * @default 2%\r\n\t * @param  value  Font size\r\n\t */\r\n\tpublic set minFontSize(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"minFontSize\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Font size\r\n\t */\r\n\tpublic get minFontSize(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"minFontSize\");\r\n\t}\r\n\r\n\t/**\r\n\t * Randomness of word placement.\r\n\t *\r\n\t * Available values are from 0 (no randomization) to 1 (completely random).\r\n\t *\r\n\t * The smaller the value the bigger the chance that biggest words will end up\r\n\t * closer to the center.\r\n\t *\r\n\t * @default 0.2\r\n\t * @param value Randomness\r\n\t */\r\n\tpublic set randomness(value: number) {\r\n\t\tthis.setPropertyValue(\"randomness\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Randomness\r\n\t */\r\n\tpublic get randomness(): number {\r\n\t\treturn this.getPropertyValue(\"randomness\");\r\n\t}\r\n\r\n\t/**\r\n\t * Step by which label is moved if its space is already occupied.\r\n\t *\r\n\t * The smaller the number, the more packed labels will be.\r\n\t *\r\n\t * NOTE: smaller numbers make for more packed clouds, but will consume\r\n\t * considerably more CPU power. Use with caution with bigger clouds.\r\n\t *\r\n\t * @default 15\r\n\t * @param  value Step\r\n\t */\r\n\tpublic set step(value: number) {\r\n\t\tthis.setPropertyValue(\"step\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\tpublic get step(): number {\r\n\t\treturn this.getPropertyValue(\"step\");\r\n\t}\r\n\r\n\t/**\r\n\t * Accuracy setting when checking for overlapping of words.\r\n\t *\r\n\t * The bigger the number, the bigger chance of overlapping, but it's also\r\n\t * better for performance.\r\n\t *\r\n\t * Use smaller numbers if you are using a thin font.\r\n\t *\r\n\t * @default 5\r\n\t * @param  value  Accuracy\r\n\t */\r\n\tpublic set accuracy(value: number) {\r\n\t\tthis.setPropertyValue(\"accuracy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Accuracy\r\n\t */\r\n\tpublic get accuracy(): number {\r\n\t\treturn this.getPropertyValue(\"accuracy\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Minimum number of characters for a word to be included in the cloud.\r\n\t *\r\n\t * NOTE: this setting is used only when you set whole text using `text`. If\r\n\t * you set `chart.data` or `series.data` directly, it won't have any effect.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number} value Minimum word length\r\n\t */\r\n\tpublic set minWordLength(value: number) {\r\n\t\tif (this.setPropertyValue(\"minWordLength\", value)) {\r\n\t\t\tthis.updateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Minimum word length\r\n\t */\r\n\tpublic get minWordLength(): number {\r\n\t\treturn this.getPropertyValue(\"minWordLength\");\r\n\t}\r\n\r\n\t/**\r\n\t * Rotation threshold.\r\n\t *\r\n\t * Big words don't look good good when rotated, hence this setting.\r\n\t *\r\n\t * It works like this: if word's relative height is bigger\r\n\t * than `rotationThreshold`, the word will never be rotated.\r\n\t *\r\n\t * Available values are from 0 (none of the words will be rotated) to 1 (all\r\n\t * words can be rotated).\r\n\t *\r\n\t * @default 0.7\r\n\t * @param  value  Threshold\r\n\t */\r\n\tpublic set rotationThreshold(value: number) {\r\n\t\tthis.setPropertyValue(\"rotationThreshold\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Threshold\r\n\t */\r\n\tpublic get rotationThreshold(): number {\r\n\t\treturn this.getPropertyValue(\"rotationThreshold\");\r\n\t}\r\n\r\n\t/**\r\n\t * An array of available word rotation angles.\r\n\t *\r\n\t * The only supported values are: 0 (horizontal), and 90 (vertical).\r\n\t *\r\n\t * @default [0, 0, 90]\r\n\t * @param  value  Angles\r\n\t */\r\n\tpublic set angles(value: number[]) {\r\n\t\tthis.setPropertyValue(\"angles\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angles\r\n\t */\r\n\tpublic get angles(): number[] {\r\n\t\treturn this.getPropertyValue(\"angles\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * Not finished yet\r\n\t */\r\n\tpublic get maskSprite(): Sprite {\r\n\t\treturn this._maskSprite;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[WordCloudSeries]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.labels.template.copyFrom(source.labels.template);\r\n\t}\r\n\r\n\t/**\r\n\t * Extracts words and number of their appearances from a text.\r\n\t *\r\n\t * @ignore\r\n\t * @param  input  Source text\r\n\t */\r\n\tpublic getWords(input: string): { word: string, value: number }[] {\r\n\t\tif (input) {\r\n\t\t\tthis.dataFields.word = \"word\";\r\n\t\t\tthis.dataFields.value = \"value\";\r\n\r\n\t\t\tconst reg = new RegExp(\"[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376-\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0523\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0621-\\u064A\\u066E-\\u066F\\u0671-\\u06D3\\u06D5\\u06E5-\\u06E6\\u06EE-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4-\\u07F5\\u07FA\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0972\\u097B-\\u097F\\u0985-\\u098C\\u098F-\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC-\\u09DD\\u09DF-\\u09E1\\u09F0-\\u09F1\\u0A05-\\u0A0A\\u0A0F-\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32-\\u0A33\\u0A35-\\u0A36\\u0A38-\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2-\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0-\\u0AE1\\u0B05-\\u0B0C\\u0B0F-\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32-\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C-\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99-\\u0B9A\\u0B9C\\u0B9E-\\u0B9F\\u0BA3-\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58-\\u0C59\\u0C60-\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0-\\u0CE1\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D28\\u0D2A-\\u0D39\\u0D3D\\u0D60-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32-\\u0E33\\u0E40-\\u0E46\\u0E81-\\u0E82\\u0E84\\u0E87-\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA-\\u0EAB\\u0EAD-\\u0EB0\\u0EB2-\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDD\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8B\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065-\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10D0-\\u10FA\\u10FC\\u1100-\\u1159\\u115F-\\u11A2\\u11A8-\\u11F9\\u1200-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u1676\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19A9\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE-\\u1BAF\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u2094\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2C6F\\u2C71-\\u2C7D\\u2C80-\\u2CE4\\u2D00-\\u2D25\\u2D30-\\u2D65\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31B7\\u31F0-\\u31FF\\u3400\\u4DB5\\u4E00\\u9FC3\\uA000-\\uA48C\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A-\\uA62B\\uA640-\\uA65F\\uA662-\\uA66E\\uA67F-\\uA697\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78C\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA90A-\\uA925\\uA930-\\uA946\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAC00\\uD7A3\\uF900-\\uFA2D\\uFA30-\\uFA6A\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC0-9@+]+\", \"ig\");\r\n\t\t\tlet res = input.match(reg);\r\n\t\t\tif (!res) {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\r\n\t\t\tlet words: { word: string, value: number }[] = [];\r\n\t\t\tlet word;\r\n\t\t\twhile (true) {\r\n\t\t\t\tword = res.pop();\r\n\r\n\t\t\t\tif (!word) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet item;\r\n\t\t\t\tfor (let i = 0; i < words.length; i++) {\r\n\t\t\t\t\tif (words[i].word.toLowerCase() == word.toLowerCase()) {\r\n\t\t\t\t\t\titem = words[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (item) {\r\n\t\t\t\t\titem.value++;\r\n\t\t\t\t\tif (!this.isCapitalized(word)) {\r\n\t\t\t\t\t\titem.word = word;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\twords.push({\r\n\t\t\t\t\t\tword: word,\r\n\t\t\t\t\t\tvalue: 1\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet excludeWords = this.excludeWords;\r\n\t\t\tif (this.minValue > 1 || this.minWordLength > 1 || (excludeWords && excludeWords.length > 0)) {\r\n\t\t\t\tfor (let i = words.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tlet w = words[i];\r\n\t\t\t\t\tif (w.value < this.minValue) {\r\n\t\t\t\t\t\twords.splice(i, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (w.word.length < this.minWordLength) {\r\n\t\t\t\t\t\twords.splice(i, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (excludeWords.indexOf(w.word) !== -1) {\r\n\t\t\t\t\t\twords.splice(i, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\twords.sort(function(a, b) {\r\n\t\t\t\tif (a.value == b.value) {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t\telse if (a.value > b.value) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\r\n\t\t\tif (words.length > this.maxCount) {\r\n\t\t\t\twords = words.slice(0, this.maxCount);\r\n\t\t\t}\r\n\r\n\t\t\treturn words;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if word is capitalized (starts with an uppercase) or not.\r\n\t *\r\n\t * @param   word  Word\r\n\t * @return        Capitalized?\r\n\t */\r\n\tpublic isCapitalized(word: string): boolean {\r\n\t\tlet lword = word.toLowerCase();\r\n\t\treturn word[0] != lword[0]\r\n\t\t\t&& word.substr(1) == lword.substr(1)\r\n\t\t\t&& word != lword;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"WordCloudSeries\"] = WordCloudSeries;\r\nregistry.registeredClasses[\"WordCloudSeriesDataItem\"] = WordCloudSeriesDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}