{"ast":null,"code":"/**\n * Step line series module.\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\n\nimport { LineSeries, LineSeriesDataItem } from \"./LineSeries\";\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\n/**\n * ============================================================================\n * DATA ITEM\n * ============================================================================\n * @hidden\n */\n\n/**\n * Defines a [[DataItem]] for [[StepLineSeries]].\n *\n * @see {@link DataItem}\n */\n\nvar StepLineSeriesDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(StepLineSeriesDataItem, _super);\n  /**\n   * Constructor\n   */\n\n\n  function StepLineSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"StepLineSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return StepLineSeriesDataItem;\n}(LineSeriesDataItem);\n\nexport { StepLineSeriesDataItem };\n/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Defines [[Series]] for a step line graph.\n *\n * @see {@link IStepLineSeriesEvents} for a list of available Events\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\n * @todo Example\n * @important\n */\n\nvar StepLineSeries =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(StepLineSeries, _super);\n  /**\n   * Constructor\n   */\n\n\n  function StepLineSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"StepLineSeries\";\n\n    _this.applyTheme();\n\n    _this.startLocation = 0;\n    _this.endLocation = 1;\n    return _this;\n  }\n  /**\n   * Returns a new/empty DataItem of the type appropriate for this object.\n   *\n   * @see {@link DataItem}\n   * @return Data Item\n   */\n\n\n  StepLineSeries.prototype.createDataItem = function () {\n    return new StepLineSeriesDataItem();\n  };\n  /**\n   * [addPoints description]\n   *\n   * @todo Description\n   * @param points     [description]\n   * @param dataItem   [description]\n   * @param xField     [description]\n   * @param yField     [description]\n   * @param backwards  [description]\n   */\n\n\n  StepLineSeries.prototype.addPoints = function (points, dataItem, xField, yField, backwards) {\n    var startLocation = this.startLocation;\n    var endLocation = this.endLocation;\n    var x0 = this.xAxis.getX(dataItem, xField, startLocation);\n    var y0 = this.yAxis.getY(dataItem, yField, startLocation);\n    var x1 = this.xAxis.getX(dataItem, xField, endLocation);\n    var y1 = this.yAxis.getY(dataItem, yField, endLocation);\n    x0 = $math.fitToRange(x0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\n\n    y0 = $math.fitToRange(y0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\n\n    x1 = $math.fitToRange(x1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\n\n    y1 = $math.fitToRange(y1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\n    // this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\n\n    if (!this.noRisers && this.connect) {\n      if (points.length > 1) {\n        var prevPoint = points[points.length - 1];\n\n        if (this.baseAxis == this.xAxis) {\n          if (backwards) {\n            points.push({\n              x: prevPoint.x,\n              y: y1\n            });\n          } else {\n            points.push({\n              x: x0,\n              y: prevPoint.y\n            });\n          }\n        }\n\n        if (this.baseAxis == this.yAxis) {\n          if (backwards) {\n            points.push({\n              x: x1,\n              y: prevPoint.y\n            });\n          } else {\n            points.push({\n              x: prevPoint.x,\n              y: y0\n            });\n          }\n        }\n      }\n    }\n\n    var point0 = {\n      x: x0,\n      y: y0\n    };\n    var point1 = {\n      x: x1,\n      y: y1\n    };\n\n    if (backwards) {\n      points.push(point1, point0);\n    } else {\n      points.push(point0, point1);\n    }\n  };\n  /**\n   * Draws the line segment.\n   *\n   * @param segment     Segment\n   * @param points      Segment points\n   * @param closePoints Segment close points\n   */\n\n\n  StepLineSeries.prototype.drawSegment = function (segment, points, closePoints) {\n    var vertical = false;\n\n    if (this.yAxis == this.baseAxis) {\n      vertical = true;\n    }\n\n    segment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\n  };\n  /**\n   * @ignore\n   */\n\n\n  StepLineSeries.prototype.createSegment = function () {\n    return new StepLineSeriesSegment();\n  };\n\n  Object.defineProperty(StepLineSeries.prototype, \"noRisers\", {\n    /**\n     * @return No risers\n     */\n    get: function get() {\n      return this.getPropertyValue(\"noRisers\");\n    },\n\n    /**\n     * Specifies if step line series should draw only horizontal (or only\n     * vertical, depending on base axis) lines, instead of connecting them with\n     * vertical (or horizontal) lines.\n     *\n     * @default false\n     * @param value  No risers\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"noRisers\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StepLineSeries.prototype, \"startLocation\", {\n    /**\n     * @return Location (0-1)\n     */\n    get: function get() {\n      return this.getPropertyValue(\"startLocation\");\n    },\n\n    /**\n     * start location of the step\n     *\n     * @param value Location (0-1)\n     * @default 0\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"startLocation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StepLineSeries.prototype, \"endLocation\", {\n    /**\n     * @return Location (0-1)\n     */\n    get: function get() {\n      return this.getPropertyValue(\"endLocation\");\n    },\n\n    /**\n     * Step end location.\n     *\n     * @param value Location (0-1)\n     * #default 1\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"endLocation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return StepLineSeries;\n}(LineSeries);\n\nexport { StepLineSeries };\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n *\n * @ignore\n */\n\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/charts/series/StepLineSeries.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties {\r\n\tnoRisers?: boolean;\r\n\r\n\tstartLocation?: number;\r\n\r\n\tendLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: StepLineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points     [description]\r\n\t * @param dataItem   [description]\r\n\t * @param xField     [description]\r\n\t * @param yField     [description]\r\n\t * @param backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, startLocation);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, startLocation);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, endLocation);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (!this.noRisers && this.connect) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param segment     Segment\r\n\t * @param points      Segment points\r\n\t * @param closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: StepLineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet vertical = false;\r\n\t\tif (this.yAxis == this.baseAxis) {\r\n\t\t\tvertical = true;\r\n\t\t}\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new StepLineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if step line series should draw only horizontal (or only\r\n\t * vertical, depending on base axis) lines, instead of connecting them with\r\n\t * vertical (or horizontal) lines.\r\n\t *\r\n\t * @default false\r\n\t * @param value  No risers\r\n\t */\r\n\tpublic set noRisers(value: boolean) {\r\n\t\tthis.setPropertyValue(\"noRisers\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return No risers\r\n\t */\r\n\tpublic get noRisers(): boolean {\r\n\t\treturn this.getPropertyValue(\"noRisers\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * start location of the step\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * @default 0\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"startLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Step end location.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * #default 1\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"endLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}