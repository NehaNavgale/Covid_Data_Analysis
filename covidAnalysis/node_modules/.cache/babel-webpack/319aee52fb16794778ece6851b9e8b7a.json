{"ast":null,"code":"import { EventDispatcher } from \"./utils/EventDispatcher\";\nimport { Dictionary } from \"./utils/Dictionary\";\nimport { cache } from \"./utils/Cache\";\nimport * as $type from \"./utils/Type\";\nimport * as $string from \"./utils/String\";\nimport * as $array from \"./utils/Array\";\n/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Registry is used to store miscellaneous system-wide information, like ids,\n * maps, themes, and registered classes.\n *\n * @ignore Exclude from docs\n */\n\nvar Registry =\n/** @class */\nfunction () {\n  function Registry() {\n    /**\n     * Event dispacther.\n     */\n    this.events = new EventDispatcher();\n    /**\n     * All currently applied themes. All new chart instances created will\n     * automatically inherit and retain System's themes.\n     */\n\n    this.themes = [];\n    /**\n     * List of all loaded available themes.\n     *\n     * Whenever a theme loads, it registers itself in System's `loadedThemes`\n     * collection.\n     */\n\n    this.loadedThemes = {};\n    /**\n     * An indeternal counter used to generate unique IDs.\n     *\n     * @ignore Exclude from docs\n     */\n\n    this._uidCount = 0;\n    /**\n     * Keeps register of class references so that they can be instnatiated using\n     * string key.\n     *\n     * @ignore Exclude from docs\n     */\n\n    this.registeredClasses = {};\n    /**\n     * Holds all generated placeholders.\n     */\n\n    this._placeholders = {};\n    /**\n    * A list of invalid(ated) [[Sprite]] objects that need to be re-validated\n    * during next cycle.\n    *\n    * @ignore Exclude from docs\n    */\n\n    this.invalidSprites = {};\n    /**\n     * Components are added to this list when their data provider changes to\n     * a new one or data is added/removed from their data provider.\n     *\n     * @ignore Exclude from docs\n     */\n\n    this.invalidDatas = {};\n    /**\n     * Components are added to this list when values of their raw data change.\n     * Used when we want a smooth animation from one set of values to another.\n     *\n     * @ignore Exclude from docs\n     */\n\n    this.invalidRawDatas = [];\n    /**\n     * Components are added to this list when values of their data changes\n     * (but not data provider itself).\n     *\n     * @ignore Exclude from docs\n     */\n\n    this.invalidDataItems = [];\n    /**\n     * Components are added to this list when their data range (selection) is\n     * changed, e.g. zoomed.\n     *\n     * @ignore Exclude from docs\n     */\n\n    this.invalidDataRange = [];\n    /**\n     * A list of [[Sprite]] objects that have invalid(ated) positions, that need\n     * to be recalculated.\n     *\n     * @ignore Exclude from docs\n     */\n\n    this.invalidPositions = {};\n    /**\n     * A list of [[Container]] objects with invalid(ated) layouts.\n     *\n     * @ignore Exclude from docs\n     */\n\n    this.invalidLayouts = {};\n    /**\n     * An array holding all active (non-disposed) top level elemens.\n     *\n     * When, for example, a new chart is created, its instance will be added to\n     * this array, and will be removed when the chart is disposed.\n     */\n\n    this.baseSprites = [];\n    this.baseSpritesByUid = {};\n    this.uid = this.getUniqueId();\n    this.invalidSprites.noBase = [];\n    this.invalidDatas.noBase = [];\n    this.invalidLayouts.noBase = [];\n    this.invalidPositions.noBase = [];\n  }\n  /**\n   * Generates a unique chart system-wide ID.\n   *\n   * @return Generated ID\n   */\n\n\n  Registry.prototype.getUniqueId = function () {\n    var uid = this._uidCount;\n    this._uidCount += 1;\n    return \"id-\" + uid;\n  };\n\n  Object.defineProperty(Registry.prototype, \"map\", {\n    /**\n     * Returns a universal collection for mapping ids with objects.\n     *\n     * @ignore Exclude from docs\n     * @return Map collection\n     */\n    get: function get() {\n      if (!this._map) {\n        this._map = new Dictionary();\n      }\n\n      return this._map;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Caches value in object's cache.\n   *\n   * @ignore Exclude from docs\n   * @param key    Key\n   * @param value  Value\n   * @param ttl    TTL in seconds\n   */\n\n  Registry.prototype.setCache = function (key, value, ttl) {\n    cache.set(this.uid, key, value, ttl);\n  };\n  /**\n   * Retrieves cached value.\n   *\n   * @ignore Exclude from docs\n   * @param key    Key\n   * @param value  Value to return if cache is not available\n   * @return Value\n   */\n\n\n  Registry.prototype.getCache = function (key, value) {\n    if (value === void 0) {\n      value = undefined;\n    }\n\n    return cache.get(this.uid, key, value);\n  };\n  /**\n   * Dispatches an event using own event dispatcher. Will automatically\n   * populate event data object with event type and target (this element).\n   * It also checks if there are any handlers registered for this sepecific\n   * event.\n   *\n   * @param eventType Event type (name)\n   * @param data      Data to pass into event handler(s)\n   */\n\n\n  Registry.prototype.dispatch = function (eventType, data) {\n    // @todo Implement proper type check\n    if (this.events.isEnabled(eventType)) {\n      if (data) {\n        data.type = eventType;\n        data.target = data.target || this;\n        this.events.dispatch(eventType, {\n          type: eventType,\n          target: this\n        });\n      } else {\n        this.events.dispatch(eventType, {\n          type: eventType,\n          target: this\n        });\n      }\n    }\n  };\n  /**\n   * Works like `dispatch`, except event is triggered immediately, without\n   * waiting for the next frame cycle.\n   *\n   * @param eventType Event type (name)\n   * @param data      Data to pass into event handler(s)\n   */\n\n\n  Registry.prototype.dispatchImmediately = function (eventType, data) {\n    // @todo Implement proper type check\n    if (this.events.isEnabled(eventType)) {\n      if (data) {\n        data.type = eventType;\n        data.target = data.target || this;\n        this.events.dispatchImmediately(eventType, data);\n      } else {\n        this.events.dispatchImmediately(eventType, {\n          type: eventType,\n          target: this\n        });\n      }\n    }\n  };\n  /**\n   * Returns a unique placeholder suitable for the key.\n   *\n   * @param key  Key\n   * @return Random string to be used as placeholder\n   */\n\n\n  Registry.prototype.getPlaceholder = function (key) {\n    if ($type.hasValue(this._placeholders[key])) {\n      return this._placeholders[key];\n    }\n\n    this._placeholders[key] = \"__amcharts_\" + key + \"_\" + $string.random(8) + \"__\";\n    return this._placeholders[key];\n  };\n  /**\n   * @ignore\n   */\n\n\n  Registry.prototype.addToInvalidComponents = function (component) {\n    if (component.baseId) {\n      $array.move(this.invalidDatas[component.baseId], component);\n    } else {\n      $array.move(this.invalidDatas[\"noBase\"], component);\n    }\n  };\n  /**\n   * @ignore\n   */\n\n\n  Registry.prototype.removeFromInvalidComponents = function (component) {\n    if (component.baseId) {\n      $array.remove(this.invalidDatas[component.baseId], component);\n    }\n\n    $array.remove(this.invalidDatas[\"noBase\"], component);\n  };\n  /**\n   * @ignore\n   */\n\n\n  Registry.prototype.addToInvalidSprites = function (sprite) {\n    if (sprite.baseId) {\n      $array.add(this.invalidSprites[sprite.baseId], sprite);\n    } else {\n      $array.add(this.invalidSprites[\"noBase\"], sprite);\n    }\n  };\n  /**\n   * @ignore\n   */\n\n\n  Registry.prototype.removeFromInvalidSprites = function (sprite) {\n    if (sprite.baseId) {\n      $array.remove(this.invalidSprites[sprite.baseId], sprite);\n    }\n\n    $array.remove(this.invalidSprites[\"noBase\"], sprite);\n  };\n  /**\n   * @ignore\n   */\n\n\n  Registry.prototype.addToInvalidPositions = function (sprite) {\n    if (sprite.baseId) {\n      $array.add(this.invalidPositions[sprite.baseId], sprite);\n    } else {\n      $array.add(this.invalidPositions[\"noBase\"], sprite);\n    }\n  };\n  /**\n   * @ignore\n   */\n\n\n  Registry.prototype.removeFromInvalidPositions = function (sprite) {\n    if (sprite.baseId) {\n      $array.remove(this.invalidPositions[sprite.baseId], sprite);\n    }\n\n    $array.remove(this.invalidPositions[\"noBase\"], sprite);\n  };\n  /**\n   * @ignore\n   */\n\n\n  Registry.prototype.addToInvalidLayouts = function (sprite) {\n    if (sprite.baseId) {\n      $array.add(this.invalidLayouts[sprite.baseId], sprite);\n    } else {\n      $array.add(this.invalidLayouts[\"noBase\"], sprite);\n    }\n  };\n  /**\n   * @ignore\n   */\n\n\n  Registry.prototype.removeFromInvalidLayouts = function (sprite) {\n    if (sprite.baseId) {\n      $array.remove(this.invalidLayouts[sprite.baseId], sprite);\n    }\n\n    $array.remove(this.invalidLayouts[\"noBase\"], sprite);\n  };\n\n  return Registry;\n}();\n\nexport { Registry };\n/**\n * A singleton global instance of [[Registry]].\n *\n * @ignore Exclude from docs\n */\n\nexport var registry = new Registry();","map":{"version":3,"sources":["../../../../src/.internal/core/Registry.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ITheme } from \"../themes/ITheme\";\r\nimport { EventDispatcher, AMEvent } from \"./utils/EventDispatcher\";\r\nimport { Dictionary } from \"./utils/Dictionary\";\r\nimport { Sprite } from \"./Sprite\";\r\nimport { Container } from \"./Container\";\r\nimport { Component } from \"./Component\";\r\nimport { cache } from \"./utils/Cache\";\r\nimport * as $type from \"./utils/Type\";\r\nimport * as $string from \"./utils/String\";\r\nimport * as $array from \"./utils/Array\";\r\n\r\n\r\n/**\r\n * Define events available for [[Registry]]\r\n */\r\nexport interface IRegistryEvents {\r\n\r\n\t/**\r\n\t * Invoked when update cycle starts. Before invalid elements are re-validated.\r\n\t */\r\n\tenterframe: {};\r\n\r\n\t/**\r\n\t * Invoked when udpate cycle ends. After invalid elements have been\r\n\t * re-validated.\r\n\t */\r\n\texitframe: {};\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Registry is used to store miscellaneous system-wide information, like ids,\r\n * maps, themes, and registered classes.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport class Registry {\r\n\r\n\t/**\r\n\t * Unique ID of the object.\r\n\t */\r\n\tpublic uid: string;\r\n\r\n\t/**\r\n\t * Event dispacther.\r\n\t */\r\n\tpublic events: EventDispatcher<AMEvent<Registry, IRegistryEvents>> = new EventDispatcher();\r\n\r\n\t/**\r\n\t * Holds a universal mapping collection, so that elements and their children\r\n\t * can create and look up all kinds of relations between id and object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _map: $type.Optional<Dictionary<string, any>>;\r\n\r\n\t/**\r\n\t * All currently applied themes. All new chart instances created will\r\n\t * automatically inherit and retain System's themes.\r\n\t */\r\n\tpublic themes: ITheme[] = [];\r\n\r\n\t/**\r\n\t * List of all loaded available themes.\r\n\t *\r\n\t * Whenever a theme loads, it registers itself in System's `loadedThemes`\r\n\t * collection.\r\n\t */\r\n\tpublic loadedThemes: { [index: string]: ITheme } = {};\r\n\r\n\t/**\r\n\t * An indeternal counter used to generate unique IDs.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _uidCount: number = 0;\r\n\r\n\t/**\r\n\t * Keeps register of class references so that they can be instnatiated using\r\n\t * string key.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic registeredClasses: { [index: string]: any } = {};\r\n\r\n\t/**\r\n\t * Holds all generated placeholders.\r\n\t */\r\n\tprotected _placeholders: { [index: string]: string } = {};\r\n\r\n\t/**\r\n * A list of invalid(ated) [[Sprite]] objects that need to be re-validated\r\n * during next cycle.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\n\tpublic invalidSprites: { [index: string]: Array<Sprite> } = {};\r\n\r\n\t/**\r\n\t * Components are added to this list when their data provider changes to\r\n\t * a new one or data is added/removed from their data provider.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidDatas: { [index: string]: Array<Component> } = {};\r\n\r\n\t/**\r\n\t * Components are added to this list when values of their raw data change.\r\n\t * Used when we want a smooth animation from one set of values to another.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidRawDatas: Array<Component> = [];\r\n\r\n\t/**\r\n\t * Components are added to this list when values of their data changes\r\n\t * (but not data provider itself).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidDataItems: Array<Component> = [];\r\n\r\n\t/**\r\n\t * Components are added to this list when their data range (selection) is\r\n\t * changed, e.g. zoomed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidDataRange: Array<Component> = [];\r\n\r\n\t/**\r\n\t * A list of [[Sprite]] objects that have invalid(ated) positions, that need\r\n\t * to be recalculated.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidPositions: { [index: string]: Array<Sprite> } = {};\r\n\r\n\t/**\r\n\t * A list of [[Container]] objects with invalid(ated) layouts.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidLayouts: { [index: string]: Array<Container> } = {};\r\n\r\n\t/**\r\n\t * An array holding all active (non-disposed) top level elemens.\r\n\t *\r\n\t * When, for example, a new chart is created, its instance will be added to\r\n\t * this array, and will be removed when the chart is disposed.\r\n\t */\r\n\tpublic baseSprites: Array<Sprite> = [];\r\n\r\n\tpublic baseSpritesByUid: { [index: string]: Sprite } = {};\r\n\r\n\tconstructor() {\r\n\t\tthis.uid = this.getUniqueId();\r\n\r\n\t\tthis.invalidSprites.noBase = [];\r\n\t\tthis.invalidDatas.noBase = [];\r\n\t\tthis.invalidLayouts.noBase = [];\r\n\t\tthis.invalidPositions.noBase = [];\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a unique chart system-wide ID.\r\n\t *\r\n\t * @return Generated ID\r\n\t */\r\n\tpublic getUniqueId(): string {\r\n\t\tlet uid = this._uidCount;\r\n\t\tthis._uidCount += 1;\r\n\t\treturn \"id-\" + uid;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a universal collection for mapping ids with objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Map collection\r\n\t */\r\n\tpublic get map(): Dictionary<string, any> {\r\n\t\tif (!this._map) {\r\n\t\t\tthis._map = new Dictionary<string, any>();\r\n\t\t}\r\n\t\treturn this._map;\r\n\t}\r\n\r\n\t/**\r\n\t * Caches value in object's cache.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param key    Key\r\n\t * @param value  Value\r\n\t * @param ttl    TTL in seconds\r\n\t */\r\n\tpublic setCache(key: string, value: any, ttl?: number): void {\r\n\t\tcache.set(this.uid, key, value, ttl);\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves cached value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param key    Key\r\n\t * @param value  Value to return if cache is not available\r\n\t * @return Value\r\n\t */\r\n\tpublic getCache(key: string, value: any = undefined): any {\r\n\t\treturn cache.get(this.uid, key, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches an event using own event dispatcher. Will automatically\r\n\t * populate event data object with event type and target (this element).\r\n\t * It also checks if there are any handlers registered for this sepecific\r\n\t * event.\r\n\t *\r\n\t * @param eventType Event type (name)\r\n\t * @param data      Data to pass into event handler(s)\r\n\t */\r\n\tpublic dispatch<Key extends keyof IRegistryEvents>(eventType: Key, data?: any): void {\r\n\t\t// @todo Implement proper type check\r\n\t\tif (this.events.isEnabled(eventType)) {\r\n\t\t\tif (data) {\r\n\t\t\t\tdata.type = eventType;\r\n\t\t\t\tdata.target = data.target || this;\r\n\t\t\t\t(<any>this.events).dispatch(eventType, {\r\n\t\t\t\t\ttype: eventType,\r\n\t\t\t\t\ttarget: this\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t(<any>this.events).dispatch(eventType, {\r\n\t\t\t\t\ttype: eventType,\r\n\t\t\t\t\ttarget: this\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Works like `dispatch`, except event is triggered immediately, without\r\n\t * waiting for the next frame cycle.\r\n\t *\r\n\t * @param eventType Event type (name)\r\n\t * @param data      Data to pass into event handler(s)\r\n\t */\r\n\tpublic dispatchImmediately<Key extends keyof IRegistryEvents>(eventType: Key, data?: any): void {\r\n\t\t// @todo Implement proper type check\r\n\t\tif (this.events.isEnabled(eventType)) {\r\n\t\t\tif (data) {\r\n\t\t\t\tdata.type = eventType;\r\n\t\t\t\tdata.target = data.target || this;\r\n\t\t\t\t(<any>this.events).dispatchImmediately(eventType, data);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t(<any>this.events).dispatchImmediately(eventType, {\r\n\t\t\t\t\ttype: eventType,\r\n\t\t\t\t\ttarget: this\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a unique placeholder suitable for the key.\r\n\t *\r\n\t * @param key  Key\r\n\t * @return Random string to be used as placeholder\r\n\t */\r\n\tpublic getPlaceholder(key: string): string {\r\n\t\tif ($type.hasValue(this._placeholders[key])) {\r\n\t\t\treturn this._placeholders[key];\r\n\t\t}\r\n\t\tthis._placeholders[key] = \"__amcharts_\" + key + \"_\" + $string.random(8) + \"__\";\r\n\t\treturn this._placeholders[key];\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic addToInvalidComponents(component: Component) {\r\n\t\tif (component.baseId) {\r\n\t\t\t$array.move(this.invalidDatas[component.baseId], component);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$array.move(this.invalidDatas[\"noBase\"], component);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic removeFromInvalidComponents(component: Component) {\r\n\t\tif (component.baseId) {\r\n\t\t\t$array.remove(this.invalidDatas[component.baseId], component);\r\n\t\t}\r\n\r\n\t\t$array.remove(this.invalidDatas[\"noBase\"], component);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic addToInvalidSprites(sprite: Sprite) {\r\n\t\tif (sprite.baseId) {\r\n\t\t\t$array.add(this.invalidSprites[sprite.baseId], sprite);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$array.add(this.invalidSprites[\"noBase\"], sprite);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic removeFromInvalidSprites(sprite: Sprite) {\r\n\t\tif (sprite.baseId) {\r\n\t\t\t$array.remove(this.invalidSprites[sprite.baseId], sprite);\r\n\t\t}\r\n\r\n\t\t$array.remove(this.invalidSprites[\"noBase\"], sprite);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic addToInvalidPositions(sprite: Sprite) {\r\n\t\tif (sprite.baseId) {\r\n\t\t\t$array.add(this.invalidPositions[sprite.baseId], sprite);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$array.add(this.invalidPositions[\"noBase\"], sprite);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic removeFromInvalidPositions(sprite: Sprite) {\r\n\t\tif (sprite.baseId) {\r\n\t\t\t$array.remove(this.invalidPositions[sprite.baseId], sprite);\r\n\t\t}\r\n\r\n\t\t$array.remove(this.invalidPositions[\"noBase\"], sprite);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic addToInvalidLayouts(sprite: Container) {\r\n\t\tif (sprite.baseId) {\r\n\t\t\t$array.add(this.invalidLayouts[sprite.baseId], sprite);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$array.add(this.invalidLayouts[\"noBase\"], sprite);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic removeFromInvalidLayouts(sprite: Container) {\r\n\t\tif (sprite.baseId) {\r\n\t\t\t$array.remove(this.invalidLayouts[sprite.baseId], sprite);\r\n\t\t}\r\n\r\n\t\t$array.remove(this.invalidLayouts[\"noBase\"], sprite);\r\n\t}\r\n}\r\n\r\n/**\r\n * A singleton global instance of [[Registry]].\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport let registry = new Registry();\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}