{"ast":null,"code":"/**\n * Functionality for drawing rectangles with waved edges.\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\n\nimport { Rectangle } from \"./Rectangle\";\nimport { wavedLine } from \"../rendering/Smoothing\";\nimport * as $path from \"../rendering/Path\";\n/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Draws a rectangle with waved edges.\n *\n * @see {@link IWavedRectangleEvents} for a list of available events\n * @see {@link IWavedRectangleAdapters} for a list of available Adapters\n */\n\nvar WavedRectangle =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(WavedRectangle, _super);\n  /**\n   * Constructor\n   */\n\n\n  function WavedRectangle() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\n     * Top waved?\n     */\n\n\n    _this._twaved = true;\n    /**\n     * Right side waved?\n     */\n\n    _this._rwaved = true;\n    /**\n     * Bottom waved?\n     */\n\n    _this._bwaved = true;\n    /**\n     * Left side waved?\n     */\n\n    _this._lwaved = true;\n    _this.className = \"WavedRectangle\"; // Add path element\n\n    _this.element = _this.paper.add(\"path\"); // Set defaults\n\n    _this.waveLength = 16;\n    _this.waveHeight = 4;\n    _this.tension = 0.8; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\n   * Draws the waved rectangle.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  WavedRectangle.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var w = this.pixelWidth;\n    var h = this._pixelHeight;\n\n    if (w > 0 && h > 0) {\n      var p1 = {\n        x: 0,\n        y: 0\n      };\n      var p2 = {\n        x: w,\n        y: 0\n      };\n      var p3 = {\n        x: w,\n        y: h\n      };\n      var p4 = {\n        x: 0,\n        y: h\n      };\n      var waveLength = this.waveLength;\n      var waveHeight = this.waveHeight;\n      var td = \"\";\n      var rd = \"\";\n      var bd = \"\";\n      var ld = \"\";\n\n      if (this._twaved) {\n        td = wavedLine(p1, p2, waveLength, waveHeight, this.tension, true);\n      }\n\n      if (this._rwaved) {\n        ld = wavedLine(p2, p3, waveLength, waveHeight, this.tension, true);\n      }\n\n      if (this._bwaved) {\n        bd = wavedLine(p3, p4, waveLength, waveHeight, this.tension, true);\n      }\n\n      if (this._rwaved) {\n        rd = wavedLine(p4, p1, waveLength, waveHeight, this.tension, true);\n      }\n\n      this.path = $path.moveTo(p1) + td + $path.lineTo(p2) + ld + $path.lineTo(p3) + bd + $path.lineTo(p4) + rd + \"z\";\n    }\n  };\n\n  Object.defineProperty(WavedRectangle.prototype, \"waveLength\", {\n    /**\n     * @return Wave length (px)\n     */\n    get: function get() {\n      return this.getPropertyValue(\"waveLength\");\n    },\n\n    /**\n     * Wave length in pixels.\n     *\n     * @default 16\n     * @param value  Wave length (px)\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"waveLength\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedRectangle.prototype, \"waveHeight\", {\n    /**\n     * @return Wave height (px)\n     */\n    get: function get() {\n      return this.getPropertyValue(\"waveHeight\");\n    },\n\n    /**\n     * Wave height in pixels.\n     *\n     * @default 4\n     * @param value  Wave height (px)\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"waveHeight\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Sets which side should be waved or not. If particular side is set to\n   * `false`, a straight line will be drawn on that side.\n   *\n   * @param top     Top waved?\n   * @param right   Right side waved?\n   * @param bottom  Bottom Waved?\n   * @param left    Left side waved?\n   */\n\n  WavedRectangle.prototype.setWavedSides = function (top, right, bottom, left) {\n    this._twaved = top;\n    this._lwaved = right;\n    this._bwaved = bottom;\n    this._rwaved = left;\n  };\n\n  Object.defineProperty(WavedRectangle.prototype, \"tension\", {\n    /**\n     * @return Tension\n     */\n    get: function get() {\n      return this.getPropertyValue(\"tension\");\n    },\n\n    /**\n     * Tension of the wave.\n     *\n     * @default 0.8\n     * @param value  Tension\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"tension\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return WavedRectangle;\n}(Rectangle);\n\nexport { WavedRectangle };","map":{"version":3,"sources":["../../../../../src/.internal/core/elements/WavedRectangle.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Functionality for drawing rectangles with waved edges.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Rectangle, IRectangleProperties, IRectangleAdapters, IRectangleEvents } from \"./Rectangle\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { IWavedShape } from \"../defs/IWavedShape\";\r\nimport { wavedLine } from \"../rendering/Smoothing\";\r\nimport * as $path from \"../rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[WavedRectangle]].\r\n */\r\nexport interface IWavedRectangleProperties extends IRectangleProperties {\r\n\r\n\t/**\r\n\t * Wave length in pixels.\r\n\t *\r\n\t * @default 16\r\n\t */\r\n\twaveHeight?: number;\r\n\r\n\t/**\r\n\t * Wave height in pixels.\r\n\t *\r\n\t * @default 4\r\n\t */\r\n\twaveLength?: number;\r\n\r\n\t/**\r\n\t * Wave tension.\r\n\t *\r\n\t * @default 0.8\r\n\t */\r\n\ttension?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[WavedRectangle]].\r\n */\r\nexport interface IWavedRectangleEvents extends IRectangleEvents { }\r\n\r\n/**\r\n * Defines adapters for [[WavedRectangle]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IWavedRectangleAdapters extends IRectangleAdapters, IWavedRectangleProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a rectangle with waved edges.\r\n *\r\n * @see {@link IWavedRectangleEvents} for a list of available events\r\n * @see {@link IWavedRectangleAdapters} for a list of available Adapters\r\n */\r\nexport class WavedRectangle extends Rectangle implements IWavedShape {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IWavedRectangleProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IWavedRectangleAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IWavedRectangleEvents;\r\n\r\n\t/**\r\n\t * Top waved?\r\n\t */\r\n\tprotected _twaved: boolean = true;\r\n\r\n\t/**\r\n\t * Right side waved?\r\n\t */\r\n\tprotected _rwaved: boolean = true;\r\n\r\n\t/**\r\n\t * Bottom waved?\r\n\t */\r\n\tprotected _bwaved: boolean = true;\r\n\r\n\t/**\r\n\t * Left side waved?\r\n\t */\r\n\tprotected _lwaved: boolean = true;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"WavedRectangle\";\r\n\r\n\t\t// Add path element\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\t// Set defaults\r\n\t\tthis.waveLength = 16;\r\n\t\tthis.waveHeight = 4;\r\n\t\tthis.tension = 0.8;\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved rectangle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet w: number = this.pixelWidth;\r\n\t\tlet h: number = this._pixelHeight;\r\n\r\n\t\tif (w > 0 && h > 0) {\r\n\t\t\tlet p1: IPoint = { x: 0, y: 0 };\r\n\t\t\tlet p2: IPoint = { x: w, y: 0 };\r\n\t\t\tlet p3: IPoint = { x: w, y: h };\r\n\t\t\tlet p4: IPoint = { x: 0, y: h };\r\n\r\n\t\t\tlet waveLength: number = this.waveLength;\r\n\t\t\tlet waveHeight: number = this.waveHeight;\r\n\r\n\t\t\tlet td: string = \"\";\r\n\t\t\tlet rd: string = \"\";\r\n\t\t\tlet bd: string = \"\";\r\n\t\t\tlet ld: string = \"\";\r\n\r\n\t\t\tif (this._twaved) {\r\n\t\t\t\ttd = wavedLine(p1, p2, waveLength, waveHeight, this.tension, true);\r\n\t\t\t}\r\n\t\t\tif (this._rwaved) {\r\n\t\t\t\tld = wavedLine(p2, p3, waveLength, waveHeight, this.tension, true);\r\n\t\t\t}\r\n\t\t\tif (this._bwaved) {\r\n\t\t\t\tbd = wavedLine(p3, p4, waveLength, waveHeight, this.tension, true);\r\n\t\t\t}\r\n\t\t\tif (this._rwaved) {\r\n\t\t\t\trd = wavedLine(p4, p1, waveLength, waveHeight, this.tension, true);\r\n\t\t\t}\r\n\r\n\t\t\tthis.path = $path.moveTo(p1) + td + $path.lineTo(p2) + ld + $path.lineTo(p3) + bd + $path.lineTo(p4) + rd + \"z\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Wave length in pixels.\r\n\t *\r\n\t * @default 16\r\n\t * @param value  Wave length (px)\r\n\t */\r\n\tpublic set waveLength(value: number) {\r\n\t\tthis.setPropertyValue(\"waveLength\", value);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Wave length (px)\r\n\t */\r\n\tpublic get waveLength(): number {\r\n\t\treturn this.getPropertyValue(\"waveLength\");\r\n\t}\r\n\r\n\t/**\r\n\t * Wave height in pixels.\r\n\t *\r\n\t * @default 4\r\n\t * @param value  Wave height (px)\r\n\t */\r\n\tpublic set waveHeight(value: number) {\r\n\t\tthis.setPropertyValue(\"waveHeight\", value);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Wave height (px)\r\n\t */\r\n\tpublic get waveHeight(): number {\r\n\t\treturn this.getPropertyValue(\"waveHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets which side should be waved or not. If particular side is set to\r\n\t * `false`, a straight line will be drawn on that side.\r\n\t *\r\n\t * @param top     Top waved?\r\n\t * @param right   Right side waved?\r\n\t * @param bottom  Bottom Waved?\r\n\t * @param left    Left side waved?\r\n\t */\r\n\tpublic setWavedSides(top: boolean, right: boolean, bottom: boolean, left: boolean): void {\r\n\t\tthis._twaved = top;\r\n\t\tthis._lwaved = right;\r\n\t\tthis._bwaved = bottom;\r\n\t\tthis._rwaved = left;\r\n\t}\r\n\r\n\t/**\r\n\t * Tension of the wave.\r\n\t *\r\n\t * @default 0.8\r\n\t * @param value  Tension\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}