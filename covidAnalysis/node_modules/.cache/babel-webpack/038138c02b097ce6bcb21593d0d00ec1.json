{"ast":null,"code":"/**\n * A module defining functionality for circular axis grid elements.\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\n\nimport { Grid } from \"./Grid\";\nimport { registry } from \"../../core/Registry\";\n/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Creates a circular grid element for circular-type axis.\n *\n * @see {@link IGridCircularEvents} for a list of available events\n * @see {@link IGridCircularAdapters} for a list of available Adapters\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\n */\n\nvar GridCircular =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(GridCircular, _super);\n  /**\n   * Constructor\n   */\n\n\n  function GridCircular() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"GridCircular\";\n    _this.pixelPerfect = false;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(GridCircular.prototype, \"innerRadius\", {\n    /**\n     * @return Inner radius\n     */\n    get: function get() {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\n     * Inner radius of the circular grid. (absolute or relative)\n     *\n     * @param value Inner radius\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GridCircular.prototype, \"radius\", {\n    /**\n     * @return Outer radius\n     */\n    get: function get() {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\n     * Outer radius of the circular grid. (absolute or relative)\n     *\n     * @param value Outer radius\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return GridCircular;\n}(Grid);\n\nexport { GridCircular };\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n *\n * @ignore\n */\n\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;","map":{"version":3,"sources":["../../../../../src/.internal/charts/axes/GridCircular.ts"],"names":[],"mappings":"AAAA;;AAEG;;AAEH;;;;;AAKG;;AACH,SAAS,IAAT,QAAkE,QAAlE;AACA,SAAS,QAAT,QAAyB,qBAAzB;AAyCA;;;;;AAKG;;AAEH;;;;;;AAMG;;AACH,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkC,EAAA,OAAA,CAAA,SAAA,CAAA,YAAA,EAAA,MAAA;AAiBjC;;AAEG;;;AACH,WAAA,YAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;AAEC,IAAA,KAAI,CAAC,SAAL,GAAiB,cAAjB;AACA,IAAA,KAAI,CAAC,YAAL,GAAoB,KAApB;;AACA,IAAA,KAAI,CAAC,UAAL;;;AACA;;AAOD,EAAA,MAAA,CAAA,cAAA,CAAW,YAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;AAItB;;AAEG;SACH,eAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,aAAtB,CAAP;AACA,KATqB;;AALtB;;;;AAIG;SACH,aAAuB,KAAvB,EAA8C;AAC7C,WAAK,kBAAL,CAAwB,aAAxB,EAAuC,KAAvC,EAA8C,IAA9C,EAAoD,KAApD,EAA2D,EAA3D,EAA+D,KAA/D;AACA,KAFqB;oBAAA;;AAAA,GAAtB;AAgBA,EAAA,MAAA,CAAA,cAAA,CAAW,YAAA,CAAA,SAAX,EAAW,QAAX,EAAiB;AAIjB;;AAEG;SACH,eAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,QAAtB,CAAP;AACA,KATgB;;AALjB;;;;AAIG;SACH,aAAkB,KAAlB,EAAyC;AACxC,WAAK,kBAAL,CAAwB,QAAxB,EAAkC,KAAlC,EAAyC,IAAzC,EAA+C,KAA/C,EAAsD,EAAtD,EAA0D,KAA1D;AACA,KAFgB;oBAAA;;AAAA,GAAjB;AAWD,SAAA,YAAA;AAAC,CA3DD,CAAkC,IAAlC,CAAA;;;AA8DA;;;;;AAKG;;AACH,QAAQ,CAAC,iBAAT,CAA2B,cAA3B,IAA6C,YAA7C","sourcesContent":["/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}