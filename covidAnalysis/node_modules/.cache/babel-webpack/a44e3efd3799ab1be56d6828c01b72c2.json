{"ast":null,"code":"/**\n * An Adapter can be used to apply chained synchronous transformations to any\n * value at runtime.\n *\n * Each type class using Adapters must have `adapters` property and adapter\n * interface defined.\n *\n * Adapters can be used to allow external code to apply transformations to any\n * value at any time.\n *\n * For example we have a Weather class which has a method `now()` which returns\n * current temperature.\n *\n * ```\n * function now() {\n *   // ... calculate temperature\n *   let temp = \"Temperature now is \" + degrees + \"F\";\n *   return temp;\n * }\n * ```\n *\n * Now, supposed we want to let other classes to modify the output of the\n * `now()`? We just apply an adapter to the `temp` before it is returned:\n *\n * ```\n * temp = this.adapters.apply(\"now\", {\n *   temp: temp,\n *   degrees: degrees\n * }).temp;\n * ```\n *\n * Some other class might tap onto it by defining an Adapter that calculates\n * the temperature in Celsius:\n *\n * weather.adapters.add(\"now\", (arg) => {\n *   arg.temp += \"(\" + farenheitToCelsius(arg.degrees) + \"C)\";\n *   return arh;\n * });\n *\n * Furthermore some time-related class could add time:\n *\n * weather.adapters.add(\"now\", (arg) => {\n *   arg.temp += \"; the time now is \" + (new Date().toLocaleString());\n *   return arh;\n * });\n *\n * So without adapters we would get output like this:\n *\n * ```\n * Temperature now is 90F\n * ```\n *\n * With adapters applied we now have:\n *\n * ```\n * Temperature now is 90F (32C); the time now is 12/11/2012, 7:00:00 PM\n * ```\n */\n\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { SortedList } from \"./SortedList\";\nimport * as $number from \"./Number\";\nimport * as $order from \"./Order\";\nimport * as $iter from \"../utils/Iterator\";\nimport * as $array from \"../utils/Array\";\nimport * as $type from \"../utils/Type\";\n/**\n * ============================================================================\n * GLOBAL ADAPTER\n * ============================================================================\n * @hidden\n */\n\n/**\n * A global adapter is an adpater that is attached to a class type rather than\n * specific object instance.\n *\n * @ignore Exclude from docs\n */\n\nvar GlobalAdapter =\n/** @class */\nfunction () {\n  function GlobalAdapter() {\n    /**\n     * Callback id iterator.\n     */\n    this._callbackId = 0;\n    /**\n     * A list of if callbacks (adapters).\n     */\n\n    this._callbacks = new SortedList(function (left, right) {\n      return $order.or($number.order(left.priority, right.priority), $number.order(left.id, right.id));\n    });\n  }\n  /**\n   * Adds a global callback which is not specific to any particular object.\n   * Whenever an adapter in any object of the specific class type is invoked\n   * global adapters will kick in.\n   *\n   * @param type      Class type\n   * @param key       Adapter key\n   * @param callback  Callback function\n   * @param priority  Priority (higher priority meaning adapter will be applied later)\n   * @param scope     Callback function scaope\n   */\n\n\n  GlobalAdapter.prototype.addAll = function (type, key, callback, priority, scope) {\n    if (priority === void 0) {\n      priority = 0;\n    }\n\n    this._callbacks.insert({\n      id: ++this._callbackId,\n      key: key,\n      callback: callback,\n      priority: priority,\n      scope: scope,\n      type: type\n    });\n  };\n  /**\n   * Returns if there are adapters for specific type available.\n   *\n   * @param type  Adapter type\n   * @param key   Adapter key\n   * @return {boolean}\n   */\n\n\n  GlobalAdapter.prototype.isEnabled = function (type, key) {\n    // TODO check the type and key\n    return this._callbacks.length > 0;\n  };\n  /**\n   * Applies global adapters for the object of the specific type.\n   *\n   * @param type   Class type\n   * @param key    Adapter key\n   * @param value  Value\n   */\n\n\n  GlobalAdapter.prototype.applyAll = function (type, key, value) {\n    // This is needed to improve the performance and reduce garbage collection\n    var callbacks = this._callbacks.values;\n    var length = callbacks.length;\n\n    if (length == 0) {\n      return value;\n    } // Cycle through all callbacks and find the ones we need to use\n\n\n    for (var i = 0; i < length; ++i) {\n      var item = callbacks[i];\n\n      if (item.key === key && type instanceof item.type) {\n        value = item.callback.call(item.scope, value, type, key);\n      }\n    }\n\n    return value;\n  };\n\n  return GlobalAdapter;\n}();\n\nexport { GlobalAdapter };\n/**\n * A global Adapter for plugins that want to add specific\n * functionality for any chart, not just specific instance.\n *\n * If you want to add an adapter which applies to all instances of the same\n * object type, like, for instance all slices in PieSeries, you can use\n * global adapter.\n *\n * Global adapter is a system-wide instance, accessible via `globalAdapter`.\n *\n * ```TypeScript\n * am4core.globalAdapter.addAll<am4charts.IPieSeriesAdapters, am4charts.PieSeries, \"fill\">(am4charts.PieSeries, \"fill\", (value, target, key) => {\n *   return am4core.color(\"#005500\");\n * });\n * ```\n * ```JavaScript\n * am4core.globalAdapter.addAll(am4charts.PieSeries, \"fill\", (value, target, key) => {\n *   return am4core.color(\"#005500\");\n * });\n * ```\n *\n * @todo Description (improve)\n */\n\nexport var globalAdapter = new GlobalAdapter();\n/**\n * ============================================================================\n * REGULAR ADAPTER\n * ============================================================================\n * @hidden\n */\n\n/**\n * Adapter allows adding ordered callback functions and associating them with a\n * string-based key. An Adapter user can then easily invoke those callbacks to\n * apply custom functions on its input, output or intermediate values.\n *\n * Custom code and plugins can add their own callbacks to modify and enhance\n * core functionality.\n *\n * See the description of `add()` for an example.\n *\n * Almost any object in amCharts4 has own adapter, accessible with `adapter`\n * property.\n *\n * Any adapters added to it will be applied to that object only.\n *\n * ### Global Adapters\n *\n * If you want to add an adapter which applies to all instances of the same\n * object type, like, for instance all slices in PieSeries, you can use\n * global adapter.\n *\n * Global adapter is a system-wide instance, accessible via `globalAdapter`.\n *\n * ```TypeScript\n * am4core.globalAdapter.addAll<am4charts.IPieSeriesAdapters, am4charts.PieSeries, \"fill\">(am4charts.PieSeries. \"fill\", (value, target, key) => {\n *   return am4core.color(\"#005500\");\n * });\n * ```\n * ```JavaScript\n * am4core.globalAdapter.addAll(am4charts.PieSeries. \"fill\", (value, target, key) => {\n *   return am4core.color(\"#005500\");\n * });\n * ```\n *\n * {@link https://www.amcharts.com/docs/v4/reference/adapter_module/#globalAdapter_property More info}.\n *\n * @important\n */\n\nvar Adapter =\n/** @class */\nfunction () {\n  /**\n   * Constructor, sets the object referece this Adapter should be used for.\n   *\n   * @param c Object\n   */\n  function Adapter(c) {\n    /**\n     * Internal counter for callback ids.\n     */\n    this._callbackId = 0;\n    /**\n     * A list of adapter callbacks.\n     *\n     * @param $number.order(left.priority, right.priority) [description]\n     * @param $number.order(left.id,       right.id));\t}  [description]\n     */\n\n    this._callbacks = new SortedList(function (left, right) {\n      return $order.or($number.order(left.priority, right.priority), $number.order(left.id, right.id));\n    });\n    this.object = c; // TODO this exposes the internal events\n\n    this.events = this._callbacks.events;\n  }\n  /**\n   * Adds a callback for a specific key.\n   *\n   * ```TypeScript\n   * // Override fill color value and make all slices green\n   * chart.series.template.adapter.add(\"fill\", (value, target, key) => {\n   *   return am4core.color(\"#005500\");\n   * });\n   * ```\n   * ```JavaScript\n   * // Override fill color value and make all slices green\n   * chart.series.template.adapter.add(\"fill\", function(value, target, key) {\n   *   return am4core.color(\"#005500\");\n   * });\n   * ```\n   * ```JSON\n   * {\n   *   // ...\n   *   \"series\": [{\n   *     // ...\n   *     \"adapter\": {\n   *     \t// Override fill color value and make all slices green\n   *     \t\"fill\": function(value, target, key) {\n   *     \t  return am4core.color(\"#005500\");\n   *     \t}\n   *     }\n   *   }]\n   * }\n   * ```\n   *\n   * The above will call user-defined function (adapter) whenever `fill` value\n   * is requested from the Pie series, allowing it to override the default\n   * using custom code and any fuzzy logic.\n   *\n   * There can be any number of adapters set on one property key.\n   *\n   * In this case adapters will be applied in daisy-chain fashion. The first\n   * adapter in queue will make its transformation. The next one will have\n   * the output of the first adapter as a starting value, etc.\n   *\n   * The order of the adapters are determined either by the order they were\n   * added in, or their `priority` value.\n   *\n   * The heigher the `priority`, the later in the game adapter will be applied.\n   *\n   * @param key       Key\n   * @param callback  A callback function\n   * @param priority  The higher priority, the more chance the adapter will be applied last\n   * @param scope     Scope for the callback function\n   */\n\n\n  Adapter.prototype.add = function (key, callback, priority, scope) {\n    if (priority === void 0) {\n      priority = 0;\n    }\n\n    this._callbacks.insert({\n      id: ++this._callbackId,\n      key: key,\n      callback: callback,\n      priority: priority,\n      scope: scope\n    });\n  };\n  /**\n   * Checks whether specific adapter is already set.\n   *\n   * @param key       Key\n   * @param callback  A callback function\n   * @param priority  The higher priority, the more chance the adapter will be applied last\n   * @param scope     Scope for the callback function\n   * @returns                            Adapter set?\n   */\n\n\n  Adapter.prototype.has = function (key, callback, priority, scope) {\n    if (priority === void 0) {\n      priority = 0;\n    } // @todo Implement actual check\n\n\n    return false;\n  };\n  /**\n   * Removes adapter callbacks for the specific `key`.\n   *\n   * If `priority` is specified, only callbacks for that priority are removed.\n   *\n   * @param key      Key\n   * @param priority Priority\n   * @todo Implement\n   */\n\n\n  Adapter.prototype.remove = function (key, priority) {\n    var _this = this; // It has to make a copy because it removes the elements while iterating\n    // TODO inefficient\n\n\n    $array.each($iter.toArray(this._callbacks.iterator()), function (item) {\n      // TODO test this\n      if (item.key === key && (!$type.isNumber(priority) || priority === item.priority)) {\n        _this._callbacks.remove(item);\n      }\n    });\n  };\n  /**\n   * Returns if there are any adapters set for the specific `key`.\n   *\n   * @returns Are there any adapters for the key?\n   */\n\n\n  Adapter.prototype.isEnabled = function (key) {\n    // TODO check the key\n    return this._callbacks.length > 0 || globalAdapter.isEnabled(this.object, key);\n  };\n  /**\n   * Passes the input value through all the callbacks for the defined `key`.\n   *\n   * @param key      Key\n   * @param value    Input value\n   * @param ...rest  Rest of the parameters to be passed into callback\n   * @return Output value\n   */\n\n\n  Adapter.prototype.apply = function (key, value) {\n    // This is needed to improve the performance and reduce garbage collection\n    var callbacks = this._callbacks.values;\n    var length = callbacks.length;\n\n    if (length > 0) {\n      for (var i = 0; i < length; ++i) {\n        var item = callbacks[i];\n\n        if (item.key === key) {\n          value = item.callback.call(item.scope, value, this.object, key);\n        }\n      }\n    } // Apply global adapters\n\n\n    value = globalAdapter.applyAll(this.object, key, value);\n    return value;\n  };\n  /**\n   * Returns all adapter keys that are currently in effect.\n   *\n   * @return Adapter keys\n   */\n\n\n  Adapter.prototype.keys = function () {\n    // TODO inefficient\n    return $iter.toArray($iter.map(this._callbacks.iterator(), function (x) {\n      return x.key;\n    }));\n  };\n  /**\n   * Copies all the adapter callbacks from `source`.\n   *\n   * @param source  An Adapter to copy items from\n   */\n\n\n  Adapter.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    $iter.each(source._callbacks.iterator(), function (x) {\n      _this.add(x.key, x.callback, x.priority, x.scope);\n    });\n  };\n  /**\n   * Clears all callbacks from this Adapter.\n   */\n\n\n  Adapter.prototype.clear = function () {\n    this._callbacks.clear();\n  };\n\n  return Adapter;\n}();\n\nexport { Adapter };","map":{"version":3,"sources":["../../../../../src/.internal/core/utils/Adapter.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDG;;AAEH;;;;;AAKG;AACH,SAAS,UAAT,QAA2B,cAA3B;AAEA,OAAO,KAAK,OAAZ,MAAyB,UAAzB;AACA,OAAO,KAAK,MAAZ,MAAwB,SAAxB;AACA,OAAO,KAAK,KAAZ,MAAuB,mBAAvB;AACA,OAAO,KAAK,MAAZ,MAAwB,gBAAxB;AACA,OAAO,KAAK,KAAZ,MAAuB,eAAvB;AAiCA;;;;;AAKG;;AAEH;;;;;AAKG;;AACH,IAAA,aAAA;AAAA;AAAA,YAAA;AAAA,WAAA,aAAA,GAAA;AAEC;;AAEG;AACK,SAAA,WAAA,GAAsB,CAAtB;AAER;;AAEG;;AACK,SAAA,UAAA,GAAa,IAAI,UAAJ,CAAuC,UAAC,IAAD,EAAO,KAAP,EAAY;AACvE,aAAO,MAAM,CAAC,EAAP,CAAU,OAAO,CAAC,KAAR,CAAc,IAAI,CAAC,QAAnB,EAA6B,KAAK,CAAC,QAAnC,CAAV,EACN,OAAO,CAAC,KAAR,CAAc,IAAI,CAAC,EAAnB,EAAuB,KAAK,CAAC,EAA7B,CADM,CAAP;AAEA,KAHoB,CAAb;AAkFR;AA9DA;;;;;;;;;;AAUG;;;AACI,EAAA,aAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,IAAd,EAAyB,GAAzB,EAAmC,QAAnC,EAAkD,QAAlD,EAAwE,KAAxE,EAAmF;AAAjC,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAA,CAAA;AAAoB;;AACrE,SAAK,UAAL,CAAgB,MAAhB,CAAuB;AACtB,MAAA,EAAE,EAAE,EAAE,KAAK,WADW;AAEtB,MAAA,GAAG,EAAE,GAFiB;AAGtB,MAAA,QAAQ,EAAE,QAHY;AAItB,MAAA,QAAQ,EAAE,QAJY;AAKtB,MAAA,KAAK,EAAE,KALe;AAMtB,MAAA,IAAI,EAAE;AANgB,KAAvB;AAQA,GATM;AAWP;;;;;;AAMG;;;AACI,EAAA,aAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiD,IAAjD,EAA+D,GAA/D,EAAuE;AACtE;AACA,WAAO,KAAK,UAAL,CAAgB,MAAhB,GAAyB,CAAhC;AACA,GAHM;AAKP;;;;;;AAMG;;;AACI,EAAA,aAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAA0D,IAA1D,EAAwE,GAAxE,EAAkF,KAAlF,EAA+F;AAC9F;AACA,QAAM,SAAS,GAAG,KAAK,UAAL,CAAgB,MAAlC;AACA,QAAM,MAAM,GAAG,SAAS,CAAC,MAAzB;;AAEA,QAAI,MAAM,IAAI,CAAd,EAAiB;AAChB,aAAO,KAAP;AACA,KAP6F,CAS9F;;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,EAAE,CAA9B,EAAiC;AAChC,UAAM,IAAI,GAAG,SAAS,CAAC,CAAD,CAAtB;;AAEA,UAAI,IAAI,CAAC,GAAL,KAAa,GAAb,IAAoB,IAAI,YAAY,IAAI,CAAC,IAA7C,EAAmD;AAClD,QAAA,KAAK,GAAG,IAAI,CAAC,QAAL,CAAc,IAAd,CAAmB,IAAI,CAAC,KAAxB,EAA+B,KAA/B,EAAsC,IAAtC,EAA4C,GAA5C,CAAR;AACA;AACD;;AAED,WAAO,KAAP;AACA,GAnBM;;AAqBR,SAAA,aAAA;AAAC,CA5FD,EAAA;;;AA8FA;;;;;;;;;;;;;;;;;;;;;;AAsBG;;AACH,OAAO,IAAI,aAAa,GAAkB,IAAI,aAAJ,EAAnC;AAGP;;;;;AAKG;;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCG;;AACH,IAAA,OAAA;AAAA;AAAA,YAAA;AA+BC;;;;AAIG;AACH,WAAA,OAAA,CAAY,CAAZ,EAAqB;AAlCrB;;AAEG;AACK,SAAA,WAAA,GAAsB,CAAtB;AAER;;;;;AAKG;;AACK,SAAA,UAAA,GAAa,IAAI,UAAJ,CAA4C,UAAC,IAAD,EAAO,KAAP,EAAY;AAC5E,aAAO,MAAM,CAAC,EAAP,CAAU,OAAO,CAAC,KAAR,CAAc,IAAI,CAAC,QAAnB,EAA6B,KAAK,CAAC,QAAnC,CAAV,EACN,OAAO,CAAC,KAAR,CAAc,IAAI,CAAC,EAAnB,EAAuB,KAAK,CAAC,EAA7B,CADM,CAAP;AAEA,KAHoB,CAAb;AAwBP,SAAK,MAAL,GAAc,CAAd,CADoB,CAGpB;;AACA,SAAK,MAAL,GAAc,KAAK,UAAL,CAAgB,MAA9B;AACA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDG;;;AACI,EAAA,OAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAmC,GAAnC,EAA6C,QAA7C,EAAqH,QAArH,EAA2I,KAA3I,EAAoJ;AAA/B,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAA,CAAA;AAAoB;;AACxI,SAAK,UAAL,CAAgB,MAAhB,CAAuB;AACtB,MAAA,EAAE,EAAE,EAAE,KAAK,WADW;AAEtB,MAAA,GAAG,EAAE,GAFiB;AAGtB,MAAA,QAAQ,EAAE,QAHY;AAItB,MAAA,QAAQ,EAAE,QAJY;AAKtB,MAAA,KAAK,EAAE;AALe,KAAvB;AAOA,GARM;AAUP;;;;;;;;AAQG;;;AACI,EAAA,OAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAmC,GAAnC,EAA6C,QAA7C,EAAqH,QAArH,EAA2I,KAA3I,EAAoJ;AAA/B,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAA,CAAA;AAAoB,KAAW,CACnJ;;;AACA,WAAO,KAAP;AACA,GAHM;AAKP;;;;;;;;AAQG;;;AACI,EAAA,OAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,GAAd,EAA2B,QAA3B,EAA4C;AAA5C,QAAA,KAAA,GAAA,IAAA,CAA4C,CAC3C;AACA;;;AACA,IAAA,MAAM,CAAC,IAAP,CAAY,KAAK,CAAC,OAAN,CAAc,KAAK,UAAL,CAAgB,QAAhB,EAAd,CAAZ,EAAuD,UAAC,IAAD,EAAK;AAC3D;AACA,UAAI,IAAI,CAAC,GAAL,KAAa,GAAb,KAAqB,CAAC,KAAK,CAAC,QAAN,CAAe,QAAf,CAAD,IAA6B,QAAQ,KAAK,IAAI,CAAC,QAApE,CAAJ,EAAmF;AAClF,QAAA,KAAI,CAAC,UAAL,CAAgB,MAAhB,CAAuB,IAAvB;AACA;AACD,KALD;AAMA,GATM;AAWP;;;;AAIG;;;AACI,EAAA,OAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAsC,GAAtC,EAA8C;AAC7C;AACA,WAAO,KAAK,UAAL,CAAgB,MAAhB,GAAyB,CAAzB,IAA8B,aAAa,CAAC,SAAd,CAAwC,KAAK,MAA7C,EAAqD,GAArD,CAArC;AACA,GAHM;AAKP;;;;;;;AAOG;;;AACI,EAAA,OAAA,CAAA,SAAA,CAAA,KAAA,GAAP,UAAkC,GAAlC,EAA4C,KAA5C,EAAyD;AACxD;AACA,QAAM,SAAS,GAAG,KAAK,UAAL,CAAgB,MAAlC;AACA,QAAM,MAAM,GAAG,SAAS,CAAC,MAAzB;;AAEA,QAAI,MAAM,GAAG,CAAb,EAAgB;AACf,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,EAAE,CAA9B,EAAiC;AAChC,YAAM,IAAI,GAAG,SAAS,CAAC,CAAD,CAAtB;;AAEA,YAAI,IAAI,CAAC,GAAL,KAAa,GAAjB,EAAsB;AACrB,UAAA,KAAK,GAAG,IAAI,CAAC,QAAL,CAAc,IAAd,CAAmB,IAAI,CAAC,KAAxB,EAA+B,KAA/B,EAAsC,KAAK,MAA3C,EAAmD,GAAnD,CAAR;AACA;AACD;AACD,KAbuD,CAexD;;;AACA,IAAA,KAAK,GAAG,aAAa,CAAC,QAAd,CAAuC,KAAK,MAA5C,EAAoD,GAApD,EAAyD,KAAzD,CAAR;AAEA,WAAO,KAAP;AACA,GAnBM;AAqBP;;;;AAIG;;;AACI,EAAA,OAAA,CAAA,SAAA,CAAA,IAAA,GAAP,YAAA;AACC;AACA,WAAO,KAAK,CAAC,OAAN,CAAc,KAAK,CAAC,GAAN,CAAU,KAAK,UAAL,CAAgB,QAAhB,EAAV,EAAsC,UAAC,CAAD,EAAE;AAAK,aAAA,CAAC,CAAD,GAAA;AAAK,KAAlD,CAAd,CAAP;AACA,GAHM;AAMP;;;;AAIG;;;AACI,EAAA,OAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,MAAhB,EAA4B;AAA5B,QAAA,KAAA,GAAA,IAAA;;AACC,IAAA,KAAK,CAAC,IAAN,CAAW,MAAM,CAAC,UAAP,CAAkB,QAAlB,EAAX,EAAyC,UAAC,CAAD,EAAE;AAC1C,MAAA,KAAI,CAAC,GAAL,CAAS,CAAC,CAAC,GAAX,EAAgB,CAAC,CAAC,QAAlB,EAA4B,CAAC,CAAC,QAA9B,EAAwC,CAAC,CAAC,KAA1C;AACA,KAFD;AAGA,GAJM;AAMP;;AAEG;;;AACI,EAAA,OAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AACC,SAAK,UAAL,CAAgB,KAAhB;AACA,GAFM;;AAIR,SAAA,OAAA;AAAC,CA7MD,EAAA","sourcesContent":["/**\r\n * An Adapter can be used to apply chained synchronous transformations to any\r\n * value at runtime.\r\n *\r\n * Each type class using Adapters must have `adapters` property and adapter\r\n * interface defined.\r\n *\r\n * Adapters can be used to allow external code to apply transformations to any\r\n * value at any time.\r\n *\r\n * For example we have a Weather class which has a method `now()` which returns\r\n * current temperature.\r\n *\r\n * ```\r\n * function now() {\r\n *   // ... calculate temperature\r\n *   let temp = \"Temperature now is \" + degrees + \"F\";\r\n *   return temp;\r\n * }\r\n * ```\r\n *\r\n * Now, supposed we want to let other classes to modify the output of the\r\n * `now()`? We just apply an adapter to the `temp` before it is returned:\r\n *\r\n * ```\r\n * temp = this.adapters.apply(\"now\", {\r\n *   temp: temp,\r\n *   degrees: degrees\r\n * }).temp;\r\n * ```\r\n *\r\n * Some other class might tap onto it by defining an Adapter that calculates\r\n * the temperature in Celsius:\r\n *\r\n * weather.adapters.add(\"now\", (arg) => {\r\n *   arg.temp += \"(\" + farenheitToCelsius(arg.degrees) + \"C)\";\r\n *   return arh;\r\n * });\r\n *\r\n * Furthermore some time-related class could add time:\r\n *\r\n * weather.adapters.add(\"now\", (arg) => {\r\n *   arg.temp += \"; the time now is \" + (new Date().toLocaleString());\r\n *   return arh;\r\n * });\r\n *\r\n * So without adapters we would get output like this:\r\n *\r\n * ```\r\n * Temperature now is 90F\r\n * ```\r\n *\r\n * With adapters applied we now have:\r\n *\r\n * ```\r\n * Temperature now is 90F (32C); the time now is 12/11/2012, 7:00:00 PM\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SortedList } from \"./SortedList\";\r\nimport { EventDispatcher } from \"./EventDispatcher\";\r\nimport * as $number from \"./Number\";\r\nimport * as $order from \"./Order\";\r\nimport * as $iter from \"../utils/Iterator\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Adapter interface.\r\n */\r\ninterface IAdapterCallback<Target, T> {\r\n\tid: number;\r\n\tkey: any;\r\n\tcallback: any;\r\n\tscope: any;\r\n\tpriority: number;\r\n}\r\n\r\n/**\r\n * Defines an interface for a global adapter.\r\n */\r\ninterface IGlobalAdapterCallback {\r\n\tid: number;\r\n\tkey: string;\r\n\tcallback: <T, Target, Key extends keyof T, C>(this: C, value: T[Key], target: Target, key?: keyof T) => T[Key];\r\n\tscope: any;\r\n\tpriority: number;\r\n\ttype: { new(): any };\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * GLOBAL ADAPTER\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A global adapter is an adpater that is attached to a class type rather than\r\n * specific object instance.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport class GlobalAdapter {\r\n\r\n\t/**\r\n\t * Callback id iterator.\r\n\t */\r\n\tprivate _callbackId: number = 0;\r\n\r\n\t/**\r\n\t * A list of if callbacks (adapters).\r\n\t */\r\n\tprivate _callbacks = new SortedList<IGlobalAdapterCallback>((left, right) => {\r\n\t\treturn $order.or($number.order(left.priority, right.priority),\r\n\t\t\t$number.order(left.id, right.id));\r\n\t});\r\n\r\n\tpublic addAll<T, Target, Key extends keyof T>(\r\n\t\ttype: { new(): Target },\r\n\t\tkey: Key,\r\n\t\tcallback: (value: T[Key], target: Target, key: keyof T) => T[Key],\r\n\t\tpriority?: number\r\n\t): void;\r\n\r\n\tpublic addAll<T, Target, Key extends keyof T, C>(\r\n\t\ttype: { new(): Target },\r\n\t\tkey: Key,\r\n\t\tcallback: (this: C, value: T[Key], target: Target, key: keyof T) => T[Key],\r\n\t\tpriority?: number,\r\n\t\tscope?: C\r\n\t): void;\r\n\r\n\t/**\r\n\t * Adds a global callback which is not specific to any particular object.\r\n\t * Whenever an adapter in any object of the specific class type is invoked\r\n\t * global adapters will kick in.\r\n\t *\r\n\t * @param type      Class type\r\n\t * @param key       Adapter key\r\n\t * @param callback  Callback function\r\n\t * @param priority  Priority (higher priority meaning adapter will be applied later)\r\n\t * @param scope     Callback function scaope\r\n\t */\r\n\tpublic addAll(type: any, key: any, callback: any, priority: number = 0, scope?: any): void {\r\n\t\tthis._callbacks.insert({\r\n\t\t\tid: ++this._callbackId,\r\n\t\t\tkey: key,\r\n\t\t\tcallback: callback,\r\n\t\t\tpriority: priority,\r\n\t\t\tscope: scope,\r\n\t\t\ttype: type\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if there are adapters for specific type available.\r\n\t *\r\n\t * @param type  Adapter type\r\n\t * @param key   Adapter key\r\n\t * @return {boolean}\r\n\t */\r\n\tpublic isEnabled<T, Target, Key extends keyof T>(type: Target, key: Key): boolean {\r\n\t\t// TODO check the type and key\r\n\t\treturn this._callbacks.length > 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Applies global adapters for the object of the specific type.\r\n\t *\r\n\t * @param type   Class type\r\n\t * @param key    Adapter key\r\n\t * @param value  Value\r\n\t */\r\n\tpublic applyAll<T, Target, Key extends keyof T = keyof T>(type: Target, key: Key, value: T[Key]): T[Key] {\r\n\t\t// This is needed to improve the performance and reduce garbage collection\r\n\t\tconst callbacks = this._callbacks.values;\r\n\t\tconst length = callbacks.length;\r\n\r\n\t\tif (length == 0) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\t// Cycle through all callbacks and find the ones we need to use\r\n\t\tfor (let i = 0; i < length; ++i) {\r\n\t\t\tconst item = callbacks[i];\r\n\r\n\t\t\tif (item.key === key && type instanceof item.type) {\r\n\t\t\t\tvalue = item.callback.call(item.scope, value, type, key);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A global Adapter for plugins that want to add specific\r\n * functionality for any chart, not just specific instance.\r\n *\r\n * If you want to add an adapter which applies to all instances of the same\r\n * object type, like, for instance all slices in PieSeries, you can use\r\n * global adapter.\r\n *\r\n * Global adapter is a system-wide instance, accessible via `globalAdapter`.\r\n *\r\n * ```TypeScript\r\n * am4core.globalAdapter.addAll<am4charts.IPieSeriesAdapters, am4charts.PieSeries, \"fill\">(am4charts.PieSeries, \"fill\", (value, target, key) => {\r\n *   return am4core.color(\"#005500\");\r\n * });\r\n * ```\r\n * ```JavaScript\r\n * am4core.globalAdapter.addAll(am4charts.PieSeries, \"fill\", (value, target, key) => {\r\n *   return am4core.color(\"#005500\");\r\n * });\r\n * ```\r\n *\r\n * @todo Description (improve)\r\n */\r\nexport let globalAdapter: GlobalAdapter = new GlobalAdapter();\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REGULAR ADAPTER\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Adapter allows adding ordered callback functions and associating them with a\r\n * string-based key. An Adapter user can then easily invoke those callbacks to\r\n * apply custom functions on its input, output or intermediate values.\r\n *\r\n * Custom code and plugins can add their own callbacks to modify and enhance\r\n * core functionality.\r\n *\r\n * See the description of `add()` for an example.\r\n *\r\n * Almost any object in amCharts4 has own adapter, accessible with `adapter`\r\n * property.\r\n *\r\n * Any adapters added to it will be applied to that object only.\r\n *\r\n * ### Global Adapters\r\n *\r\n * If you want to add an adapter which applies to all instances of the same\r\n * object type, like, for instance all slices in PieSeries, you can use\r\n * global adapter.\r\n *\r\n * Global adapter is a system-wide instance, accessible via `globalAdapter`.\r\n *\r\n * ```TypeScript\r\n * am4core.globalAdapter.addAll<am4charts.IPieSeriesAdapters, am4charts.PieSeries, \"fill\">(am4charts.PieSeries. \"fill\", (value, target, key) => {\r\n *   return am4core.color(\"#005500\");\r\n * });\r\n * ```\r\n * ```JavaScript\r\n * am4core.globalAdapter.addAll(am4charts.PieSeries. \"fill\", (value, target, key) => {\r\n *   return am4core.color(\"#005500\");\r\n * });\r\n * ```\r\n *\r\n * {@link https://www.amcharts.com/docs/v4/reference/adapter_module/#globalAdapter_property More info}.\r\n *\r\n * @important\r\n */\r\nexport class Adapter<Target, T> {\r\n\r\n\t/**\r\n\t * Internal counter for callback ids.\r\n\t */\r\n\tprivate _callbackId: number = 0;\r\n\r\n\t/**\r\n\t * A list of adapter callbacks.\r\n\t *\r\n\t * @param $number.order(left.priority, right.priority) [description]\r\n\t * @param $number.order(left.id,       right.id));\t}  [description]\r\n\t */\r\n\tprivate _callbacks = new SortedList<IAdapterCallback<Target, T>>((left, right) => {\r\n\t\treturn $order.or($number.order(left.priority, right.priority),\r\n\t\t\t$number.order(left.id, right.id));\r\n\t});\r\n\r\n\t/**\r\n\t * Holds an object reference this Adapter is for.\r\n\t */\r\n\tpublic object: Target;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t */\r\n\tpublic events: EventDispatcher<{\r\n\t\tinserted: {};\r\n\t\tremoved: {};\r\n\t}>;\r\n\r\n\t/**\r\n\t * Constructor, sets the object referece this Adapter should be used for.\r\n\t *\r\n\t * @param c Object\r\n\t */\r\n\tconstructor(c: Target) {\r\n\t\tthis.object = c;\r\n\r\n\t\t// TODO this exposes the internal events\r\n\t\tthis.events = this._callbacks.events;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a callback for a specific key.\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Override fill color value and make all slices green\r\n\t * chart.series.template.adapter.add(\"fill\", (value, target, key) => {\r\n\t *   return am4core.color(\"#005500\");\r\n\t * });\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Override fill color value and make all slices green\r\n\t * chart.series.template.adapter.add(\"fill\", function(value, target, key) {\r\n\t *   return am4core.color(\"#005500\");\r\n\t * });\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"adapter\": {\r\n\t *     \t// Override fill color value and make all slices green\r\n\t *     \t\"fill\": function(value, target, key) {\r\n\t *     \t  return am4core.color(\"#005500\");\r\n\t *     \t}\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will call user-defined function (adapter) whenever `fill` value\r\n\t * is requested from the Pie series, allowing it to override the default\r\n\t * using custom code and any fuzzy logic.\r\n\t *\r\n\t * There can be any number of adapters set on one property key.\r\n\t *\r\n\t * In this case adapters will be applied in daisy-chain fashion. The first\r\n\t * adapter in queue will make its transformation. The next one will have\r\n\t * the output of the first adapter as a starting value, etc.\r\n\t *\r\n\t * The order of the adapters are determined either by the order they were\r\n\t * added in, or their `priority` value.\r\n\t *\r\n\t * The heigher the `priority`, the later in the game adapter will be applied.\r\n\t *\r\n\t * @param key       Key\r\n\t * @param callback  A callback function\r\n\t * @param priority  The higher priority, the more chance the adapter will be applied last\r\n\t * @param scope     Scope for the callback function\r\n\t */\r\n\tpublic add<Key extends keyof T, C>(key: Key, callback: (this: C, value: T[Key], target: Target, key: Key) => T[Key], priority: number = 0, scope?: C): void {\r\n\t\tthis._callbacks.insert({\r\n\t\t\tid: ++this._callbackId,\r\n\t\t\tkey: key,\r\n\t\t\tcallback: callback,\r\n\t\t\tpriority: priority,\r\n\t\t\tscope: scope\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether specific adapter is already set.\r\n\t *\r\n\t * @param key       Key\r\n\t * @param callback  A callback function\r\n\t * @param priority  The higher priority, the more chance the adapter will be applied last\r\n\t * @param scope     Scope for the callback function\r\n\t * @returns                            Adapter set?\r\n\t */\r\n\tpublic has<Key extends keyof T, C>(key: Key, callback: (this: C, value: T[Key], target: Target, key: Key) => T[Key], priority: number = 0, scope?: C): boolean {\r\n\t\t// @todo Implement actual check\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes adapter callbacks for the specific `key`.\r\n\t *\r\n\t * If `priority` is specified, only callbacks for that priority are removed.\r\n\t *\r\n\t * @param key      Key\r\n\t * @param priority Priority\r\n\t * @todo Implement\r\n\t */\r\n\tpublic remove(key: string, priority?: number): void {\r\n\t\t// It has to make a copy because it removes the elements while iterating\r\n\t\t// TODO inefficient\r\n\t\t$array.each($iter.toArray(this._callbacks.iterator()), (item) => {\r\n\t\t\t// TODO test this\r\n\t\t\tif (item.key === key && (!$type.isNumber(priority) || priority === item.priority)) {\r\n\t\t\t\tthis._callbacks.remove(item);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if there are any adapters set for the specific `key`.\r\n\t *\r\n\t * @returns Are there any adapters for the key?\r\n\t */\r\n\tpublic isEnabled<Key extends keyof T>(key: Key): boolean {\r\n\t\t// TODO check the key\r\n\t\treturn this._callbacks.length > 0 || globalAdapter.isEnabled<T, Target, Key>(this.object, key);\r\n\t}\r\n\r\n\t/**\r\n\t * Passes the input value through all the callbacks for the defined `key`.\r\n\t *\r\n\t * @param key      Key\r\n\t * @param value    Input value\r\n\t * @param ...rest  Rest of the parameters to be passed into callback\r\n\t * @return Output value\r\n\t */\r\n\tpublic apply<Key extends keyof T>(key: Key, value: T[Key]): T[Key] {\r\n\t\t// This is needed to improve the performance and reduce garbage collection\r\n\t\tconst callbacks = this._callbacks.values;\r\n\t\tconst length = callbacks.length;\r\n\r\n\t\tif (length > 0) {\r\n\t\t\tfor (let i = 0; i < length; ++i) {\r\n\t\t\t\tconst item = callbacks[i];\r\n\r\n\t\t\t\tif (item.key === key) {\r\n\t\t\t\t\tvalue = item.callback.call(item.scope, value, this.object, key);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Apply global adapters\r\n\t\tvalue = globalAdapter.applyAll<T, Target, Key>(this.object, key, value);\r\n\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns all adapter keys that are currently in effect.\r\n\t *\r\n\t * @return Adapter keys\r\n\t */\r\n\tpublic keys(): Array<string> {\r\n\t\t// TODO inefficient\r\n\t\treturn $iter.toArray($iter.map(this._callbacks.iterator(), (x) => x.key));\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all the adapter callbacks from `source`.\r\n\t *\r\n\t * @param source  An Adapter to copy items from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\t$iter.each(source._callbacks.iterator(), (x) => {\r\n\t\t\tthis.add(x.key, x.callback, x.priority, x.scope);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Clears all callbacks from this Adapter.\r\n\t */\r\n\tpublic clear(): void {\r\n\t\tthis._callbacks.clear();\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}