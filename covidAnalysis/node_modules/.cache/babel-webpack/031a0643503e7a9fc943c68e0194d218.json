{"ast":null,"code":"/**\n * Cursor for XY chart\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\n\nimport { Cursor } from \"./Cursor\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { registry } from \"../../core/Registry\";\nimport { color } from \"../../core/utils/Color\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { getInteraction } from \"../../core/interaction/Interaction\";\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * A cursor used on [[XYChart]].\n *\n * @see {@link IXYCursorEvents} for a list of available events\n * @see {@link IXYCursorAdapters} for a list of available Adapters\n * @todo Add description, examples\n */\n\nvar XYCursor =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(XYCursor, _super);\n  /**\n   * Constructor\n   */\n\n\n  function XYCursor() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\n     * Vertical cursor line element.\n     */\n\n\n    _this._lineX = new MutableValueDisposer();\n    /**\n     * Horizontal cursor line element.\n     */\n\n    _this._lineY = new MutableValueDisposer();\n    /**\n     * Horizontal [[Axis]].\n     */\n\n    _this._xAxis = new MutableValueDisposer();\n    /**\n     * Vertical [[Axis]].\n     */\n\n    _this._yAxis = new MutableValueDisposer();\n    _this.className = \"XYCursor\"; // Defaults\n\n    _this.behavior = \"zoomX\";\n    _this.maxPanOut = 0.1;\n    var interfaceColors = new InterfaceColorSet(); // Create selection element\n\n    var selection = _this.createChild(Sprite);\n\n    selection.shouldClone = false;\n    selection.fillOpacity = 0.2;\n    selection.fill = interfaceColors.getFor(\"alternativeBackground\");\n    selection.isMeasured = false;\n    selection.interactionsEnabled = false;\n    _this.selection = selection;\n\n    _this._disposers.push(_this.selection); // Create cursor's vertical line\n\n\n    var lineX = _this.createChild(Sprite);\n\n    lineX.shouldClone = false;\n    lineX.stroke = interfaceColors.getFor(\"grid\");\n    lineX.fill = color();\n    lineX.strokeDasharray = \"3,3\";\n    lineX.isMeasured = false;\n    lineX.strokeOpacity = 0.4;\n    lineX.interactionsEnabled = false;\n    lineX.y = 0; // important\n\n    _this.lineX = lineX;\n\n    _this._disposers.push(_this.lineX); // Create cursor's horizontal line\n\n\n    var lineY = _this.createChild(Sprite);\n\n    lineY.shouldClone = false;\n    lineY.stroke = interfaceColors.getFor(\"grid\");\n    lineY.fill = color();\n    lineY.strokeDasharray = \"3,3\";\n    lineY.isMeasured = false;\n    lineY.strokeOpacity = 0.4;\n    lineY.interactionsEnabled = false;\n    lineY.x = 0; // important\n\n    _this.lineY = lineY;\n\n    _this._disposers.push(_this.lineY); // Add handler for size changes\n\n\n    _this.events.on(\"sizechanged\", _this.updateSize, _this, false);\n\n    _this._disposers.push(_this._lineX);\n\n    _this._disposers.push(_this._lineY);\n\n    _this._disposers.push(_this._xAxis);\n\n    _this._disposers.push(_this._yAxis);\n\n    _this.mask = _this; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\n   * Updates cursor element dimensions on size change.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  XYCursor.prototype.updateSize = function () {\n    if (this.lineX) {\n      this.lineX.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: 0,\n        y: this.innerHeight\n      });\n    }\n\n    if (this.lineY) {\n      this.lineY.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: this.innerWidth,\n        y: 0\n      });\n    }\n  };\n  /**\n   * Updates selection dimensions on size change.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  XYCursor.prototype.updateSelection = function () {\n    if (this._usesSelection) {\n      var downPoint = this.downPoint;\n\n      if (downPoint) {\n        var point = this.point;\n\n        if (this.lineX) {\n          point.x = this.lineX.pixelX;\n        }\n\n        if (this.lineY) {\n          point.y = this.lineY.pixelY;\n        }\n\n        var selection = this.selection;\n        var x = Math.min(point.x, downPoint.x);\n        var y = Math.min(point.y, downPoint.y);\n        var w = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\n        var h = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\n\n        switch (this.behavior) {\n          case \"zoomX\":\n            y = 0;\n            h = this.pixelHeight;\n            break;\n\n          case \"zoomY\":\n            x = 0;\n            w = this.pixelWidth;\n            break;\n\n          case \"selectX\":\n            y = 0;\n            h = this.pixelHeight;\n            break;\n\n          case \"selectY\":\n            x = 0;\n            w = this.pixelWidth;\n            break;\n        }\n\n        selection.x = x;\n        selection.y = y;\n        selection.path = $path.rectangle(w, h);\n        selection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\n      } else {\n        this.selection.hide();\n      }\n    }\n  };\n  /**\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  XYCursor.prototype.fixPoint = function (point) {\n    point.x = Math.max(0, point.x);\n    point.y = Math.max(0, point.y);\n    point.x = Math.min(this.pixelWidth, point.x);\n    point.y = Math.min(this.pixelHeight, point.y);\n    return point;\n  };\n  /**\n   * Places the cursor at specific point.\n   *\n   * @param point Point to place cursor at\n   */\n\n\n  XYCursor.prototype.triggerMoveReal = function (point) {\n    _super.prototype.triggerMoveReal.call(this, point);\n\n    if (this.snapToSeries && !this.snapToSeries.isHidden) {} else {\n      this.updateLinePositions(point);\n    }\n\n    if (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\n      if (this._generalBehavior == \"pan\") {\n        this.getPanningRanges();\n        this.dispatch(\"panning\");\n      }\n    }\n  };\n  /**\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  XYCursor.prototype.updateLinePositions = function (point) {\n    point = this.fixPoint(this.point);\n\n    if (this.lineX && this.lineX.visible && !this.xAxis) {\n      this.lineX.x = point.x;\n    }\n\n    if (this.lineY && this.lineY.visible && !this.yAxis) {\n      this.lineY.y = point.y;\n    }\n\n    this.updateSelection();\n  };\n\n  XYCursor.prototype.triggerDownReal = function (point) {\n    if (this.visible && !this.isHiding) {\n      if (this.fitsToBounds(point)) {\n        this.downPoint = {\n          x: point.x,\n          y: point.y\n        };\n        this.updatePoint(point); //this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\n\n        this.point.x = this.downPoint.x;\n        this.point.y = this.downPoint.y;\n        var selection = this.selection;\n        var selectionX = this.downPoint.x;\n        var selectionY = this.downPoint.y;\n\n        if (this._usesSelection) {\n          selection.x = selectionX;\n          selection.y = selectionY;\n          selection.path = \"\";\n          selection.show();\n        }\n\n        _super.prototype.triggerDownReal.call(this, point);\n      } else {\n        this.downPoint = undefined;\n      }\n    } else {\n      this.downPoint = undefined;\n    }\n  };\n  /**\n   * Updates the coordinates of where pointer down event occurred\n   * (was pressed).\n   */\n\n\n  XYCursor.prototype.updatePoint = function (point) {\n    if (this.lineX) {\n      point.x = this.lineX.pixelX;\n    }\n\n    if (this.lineY) {\n      point.y = this.lineY.pixelY;\n    }\n  };\n\n  XYCursor.prototype.triggerUpReal = function (point) {\n    if ($math.getDistance(this._upPointOrig, this._downPointOrig) > getInteraction().getHitOption(this.interactions, \"hitTolerance\")) {\n      if (this.downPoint) {\n        this.upPoint = point;\n        this.updatePoint(this.upPoint);\n        this.getRanges();\n\n        if (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {// void\n        } else {\n          this.selection.hide();\n        }\n\n        _super.prototype.triggerUpReal.call(this, point);\n      }\n    } else {\n      this.selection.hide(0); // reset cursor style, just in case\n\n      if (this._generalBehavior == \"pan\") {\n        var interaction = getInteraction();\n        interaction.setGlobalStyle(MouseCursorStyle.default);\n      }\n    }\n\n    this.downPoint = undefined;\n  };\n  /**\n   * [getRanges description]\n   *\n   * @todo Description\n   */\n\n\n  XYCursor.prototype.getPanningRanges = function () {\n    var startX = $math.round(this.downPoint.x / this.innerWidth, 5);\n    var startY = $math.round(this.downPoint.y / this.innerHeight, 5);\n    var currentX = $math.round(this.point.x / this.innerWidth, 5);\n    var currentY = $math.round(this.point.y / this.innerHeight, 5);\n    var deltaX = startX - currentX;\n    var deltaY = -startY + currentY;\n    this.xRange = {\n      start: deltaX,\n      end: 1 + deltaX\n    };\n    this.yRange = {\n      start: deltaY,\n      end: 1 + deltaY\n    };\n\n    if (this.behavior == \"panX\") {\n      this.yRange.start = 0;\n      this.yRange.end = 1;\n    }\n\n    if (this.behavior == \"panY\") {\n      this.xRange.start = 0;\n      this.xRange.end = 1;\n    }\n  };\n  /**\n   * [getRanges description]\n   *\n   * @todo Description\n   */\n\n\n  XYCursor.prototype.getRanges = function () {\n    if (this.lineX) {\n      this.upPoint.x = this.lineX.pixelX;\n    }\n\n    if (this.lineY) {\n      this.upPoint.y = this.lineY.pixelY;\n    } // @todo Is this needed?\n\n\n    $utils.used(this.selection);\n    var startX = $math.round(this.downPoint.x / this.innerWidth, 5);\n    var endX = $math.round(this.upPoint.x / this.innerWidth, 5);\n    var startY = $math.round(this.downPoint.y / this.innerHeight, 5);\n    var endY = $math.round(this.upPoint.y / this.innerHeight, 5);\n    this.xRange = {\n      start: $math.min(startX, endX),\n      end: $math.max(startX, endX)\n    };\n    this.yRange = {\n      start: $math.min(startY, endY),\n      end: $math.max(startY, endY)\n    };\n  };\n\n  Object.defineProperty(XYCursor.prototype, \"behavior\", {\n    /**\n     * Behavior\n     */\n    get: function get() {\n      return this.getPropertyValue(\"behavior\");\n    },\n\n    /**\n     * Cursor's behavior when it's moved with pointer down:\n     *\n     * * \"zoomX\" - zooms horizontally;\n     * * \"zoomY\" - zooms vertically;\n     * * \"zoomXY\" - zooms both horizontally and vertically;\n     * * \"selectX\" - selects a range horizontally;\n     * * \"selectY\" - selects a range vertically;\n     * * \"selectXY\" - selects a range both horizontally and vertically;\n     * * \"panX\" - moves (pans) current selection horizontally;\n     * * \"panY\" - moves (pans) current selection vertically;\n     * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\n     * * \"none\" - does nothing with pointer down.\n     *\n     * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\n     * and dragging it will start zooming the chart.\n     *\n     * @param value Bheavior\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"behavior\", value, true);\n      this._usesSelection = false;\n\n      if (value.indexOf(\"zoom\") != -1) {\n        this._generalBehavior = \"zoom\";\n        this._usesSelection = true;\n      }\n\n      if (value.indexOf(\"select\") != -1) {\n        this._generalBehavior = \"select\";\n        this._usesSelection = true;\n      }\n\n      if (value.indexOf(\"pan\") != -1) {\n        this._generalBehavior = \"pan\";\n        this._usesSelection = false;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Determines whether Cursor should prevent default action on move.\n   *\n   * If cursor's behavior is \"none\", it should not obstruct the page scrolling.\n   *\n   * @return Prevent default?\n   */\n\n  XYCursor.prototype.shouldPreventGestures = function (touch) {\n    return (!this.interactions.isTouchProtected || !touch) && this.behavior != \"none\";\n  };\n\n  Object.defineProperty(XYCursor.prototype, \"fullWidthLineX\", {\n    /**\n     * @return Full width?\n     */\n    get: function get() {\n      return this.getPropertyValue(\"fullWidthLineX\");\n    },\n\n    /**\n     * Cursor's horizontal line is expanded to take full width of the related\n     * Axis' cell/category.\n     *\n     * NOTE: this setting will work properly if `xAxis` is set and only in case\n     * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\n     *\n     * @param value Full width?\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"fullWidthLineX\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"fullWidthLineY\", {\n    /**\n     * @return Full width?\n     */\n    get: function get() {\n      return this.getPropertyValue(\"fullWidthLineY\");\n    },\n\n    /**\n     * Cursor's vertical line is expanded to take full width of the related\n     * Axis' cell/category.\n     *\n     * NOTE: this setting will work properly if `yAxis` is set and only in case\n     * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\n     *\n     * @param value Full width?\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"fullWidthLineY\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"maxPanOut\", {\n    /**\n     * @return Full width?\n     */\n    get: function get() {\n      return this.getPropertyValue(\"maxPanOut\");\n    },\n\n    /**\n     * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\n     * This setting specifies relative value by how much we can pan out the plot\n     *\n     * @param value\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"maxPanOut\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"xAxis\", {\n    /**\n     * @return X axis\n     */\n    get: function get() {\n      return this._xAxis.get();\n    },\n\n    /**\n     * A reference to X [[Axis]].\n     *\n     * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\n     * you have axis tooltip enabled and you want cursor line to be at the same\n     * position as tooltip.\n     *\n     * This works with [[CategoryAxis]] and [[DateAxis]] but not with\n     * [[ValueAxis]].\n     *\n     * @todo Description (review)\n     * @param axis X axis\n     */\n    set: function set(axis) {\n      if (this._xAxis.get() != axis) {\n        this._xAxis.set(axis, new MultiDisposer([axis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false)]));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"yAxis\", {\n    /**\n     * @return Y Axis\n     */\n    get: function get() {\n      return this._yAxis.get();\n    },\n\n    /**\n     * A reference to Y [[Axis]].\n     *\n     * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\n     * you have axis tooltip enabled and you want cursor line to be at the same\n     * position as tooltip.\n     *\n     * This works with [[CategoryAxis]] and [[DateAxis]] but not with\n     * [[ValueAxis]].\n     *\n     * @todo Description (review)\n     * @param axis Y axis\n     */\n    set: function set(axis) {\n      if (this._yAxis.get() != axis) {\n        this._yAxis.set(axis, new MultiDisposer([axis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false)]));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Updates Cursor's position when axis tooltip changes position.\n   *\n   * @ignore Exclude from docs\n   * @param event Original Axis event\n   */\n\n  XYCursor.prototype.handleXTooltipPosition = function (event) {\n    var tooltip = this.xAxis.tooltip;\n    var point = $utils.svgPointToSprite({\n      x: tooltip.pixelX,\n      y: tooltip.pixelY\n    }, this);\n    var x = point.x;\n\n    if (this.lineX) {\n      this.lineX.x = x;\n\n      if (!this.fitsToBounds(point)) {\n        this.hide();\n      }\n    }\n\n    if (this.xAxis && this.fullWidthLineX) {\n      var startPoint = this.xAxis.currentItemStartPoint;\n      var endPoint = this.xAxis.currentItemEndPoint;\n\n      if (startPoint && endPoint) {\n        this.lineX.x = x;\n        var width = endPoint.x - startPoint.x;\n        this.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\n      }\n    }\n  };\n  /**\n   * Updates Cursor's position when Y axis changes position or scale.\n   *\n   * @ignore Exclude from docs\n   * @param event Original Axis event\n   */\n\n\n  XYCursor.prototype.handleYTooltipPosition = function (event) {\n    var tooltip = this.yAxis.tooltip;\n    var point = $utils.svgPointToSprite({\n      x: tooltip.pixelX,\n      y: tooltip.pixelY\n    }, this);\n    var y = point.y;\n\n    if (this.lineY) {\n      this.lineY.y = y;\n\n      if (!this.fitsToBounds(point)) {\n        this.hide();\n      }\n    }\n\n    if (this.yAxis && this.fullWidthLineY) {\n      var startPoint = this.yAxis.currentItemStartPoint;\n      var endPoint = this.yAxis.currentItemEndPoint;\n\n      if (startPoint && endPoint) {\n        this.lineY.y = y;\n        var height = endPoint.y - startPoint.y;\n        this.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\n      }\n    }\n  };\n\n  Object.defineProperty(XYCursor.prototype, \"lineX\", {\n    /**\n     * @return Line element\n     */\n    get: function get() {\n      return this._lineX.get();\n    },\n\n    /**\n     * A Line element to use for X axis.\n     *\n     * @param lineX Line\n     */\n    set: function set(lineX) {\n      if (lineX) {\n        lineX.setElement(this.paper.add(\"path\"));\n\n        this._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\n\n        lineX.interactionsEnabled = false;\n        lineX.parent = this;\n      } else {\n        this._lineX.reset();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"lineY\", {\n    /**\n     * @return Line element\n     */\n    get: function get() {\n      return this._lineY.get();\n    },\n\n    /**\n     * A Line element to use Y axis.\n     *\n     * @param lineY Line\n     */\n    set: function set(lineY) {\n      if (lineY) {\n        lineY.setElement(this.paper.add(\"path\"));\n\n        this._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\n\n        lineY.parent = this;\n        lineY.interactionsEnabled = false;\n      } else {\n        this._lineY.reset();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"selection\", {\n    /**\n     * @return Selection rectangle\n     */\n    get: function get() {\n      return this._selection;\n    },\n\n    /**\n     * A selection element ([[Sprite]]).\n     *\n     * @param selection Selection rectangle\n     */\n    set: function set(selection) {\n      this._selection = selection;\n\n      if (selection) {\n        selection.element = this.paper.add(\"path\");\n        selection.parent = this;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Processes JSON-based config before it is applied to the object.\n   *\n   * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\n   * with real references.\n   *\n   * @ignore Exclude from docs\n   * @param config  Config\n   */\n\n  XYCursor.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up axes\n      if ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\n        if (this.map.hasKey(config.xAxis)) {\n          config.xAxis = this.map.getKey(config.xAxis);\n        } else {\n          this.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`\");\n          delete config.xAxis;\n        }\n      }\n\n      if ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\n        if (this.map.hasKey(config.yAxis)) {\n          config.yAxis = this.map.getKey(config.yAxis);\n        } else {\n          this.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`\");\n          delete config.yAxis;\n        }\n      }\n\n      if ($type.hasValue(config.snapToSeries) && $type.isString(config.snapToSeries)) {\n        if (this.map.hasKey(config.snapToSeries)) {\n          config.snapToSeries = this.map.getKey(config.snapToSeries);\n        } else {\n          this.processingErrors.push(\"[XYCursor] No series with id \\\"\" + config.snapToSeries + \"\\\" found for `series`\");\n          delete config.snapToSeries;\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  Object.defineProperty(XYCursor.prototype, \"snapToSeries\", {\n    /**\n     * @return {XYSeries}\n     */\n    get: function get() {\n      return this.getPropertyValue(\"snapToSeries\");\n    },\n\n    /**\n     * Specifies to which series cursor lines should be snapped. Works when one\n     * of the axis is `DateAxis` or `CategoryAxis`. Won't work if both axes are\n     * `ValueAxis`.\n     *\n     * @param {XYSeries}\n     */\n    set: function set(series) {\n      if (this.setPropertyValue(\"snapToSeries\", series)) {\n        if (this._snapToDisposer) {\n          this._snapToDisposer.dispose();\n        }\n\n        if (series) {\n          this._snapToDisposer = series.events.on(\"tooltipshownat\", this.handleSnap, this, false);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * [handleSnap description]\n   *\n   * @ignore\n   * @todo Description\n   */\n\n  XYCursor.prototype.handleSnap = function () {\n    var series = this.snapToSeries;\n    var y = series.tooltipY;\n    var x = series.tooltipX;\n\n    if (this.xAxis) {\n      if (this.xAxis.renderer.opposite) {\n        y -= this.pixelHeight;\n      }\n    }\n\n    this.point = {\n      x: x,\n      y: y\n    };\n    this.getPositions();\n    var xx = x;\n    var yy = y;\n    x -= this.pixelWidth;\n\n    if (this.yAxis) {\n      if (this.yAxis.renderer.opposite) {\n        x += this.pixelWidth;\n      }\n    }\n\n    var tooltip = series.tooltip;\n    var duration = tooltip.animationDuration;\n    var easing = tooltip.animationEasing;\n\n    if (series.baseAxis == series.xAxis) {\n      series.yAxis.showTooltipAtPosition(this.yPosition);\n    }\n\n    if (series.baseAxis == series.yAxis) {\n      series.xAxis.showTooltipAtPosition(this.xPosition);\n    }\n\n    this.lineX.animate([{\n      property: \"y\",\n      to: y\n    }], duration, easing);\n    this.lineY.animate([{\n      property: \"x\",\n      to: x\n    }], duration, easing);\n\n    if (!this.xAxis) {\n      this.lineX.animate([{\n        property: \"x\",\n        to: xx\n      }], duration, easing);\n    }\n\n    if (!this.yAxis) {\n      this.lineY.animate([{\n        property: \"y\",\n        to: yy\n      }], duration, easing);\n    }\n  };\n  /**\n   * Destroys this object and all related data.\n   */\n\n\n  XYCursor.prototype.dispose = function () {\n    this.hide(0);\n\n    _super.prototype.dispose.call(this);\n  };\n\n  return XYCursor;\n}(Cursor);\n\nexport { XYCursor };\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n *\n * @ignore\n */\n\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;","map":{"version":3,"sources":["../../../../../src/.internal/charts/cursors/XYCursor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer, IDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped. Works when one\r\n\t * of the axis is `DateAxis` or `CategoryAxis`. Won't work if both axes are\r\n\t * `ValueAxis`.\r\n\t */\r\n\tsnapToSeries: XYSeries;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\tprotected _snapToDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tselection.interactionsEnabled = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tlineX.interactionsEnabled = false;\r\n\t\tlineX.y = 0;// important\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tlineY.interactionsEnabled = false;\r\n\t\tlineY.x = 0; // important\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this, false);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.mask = this;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (this.behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.path = $path.rectangle(w, h);\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\r\n\t\tsuper.triggerMoveReal(point);\r\n\r\n\t\tif ((this.snapToSeries && !this.snapToSeries.isHidden)) {\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.updateLinePositions(point);\r\n\t\t}\r\n\r\n\t\tif (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = { x: point.x, y: point.y };\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.path = \"\";\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\t\tif ($math.getDistance(this._upPointOrig, this._downPointOrig) > getInteraction().getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tif (this.downPoint) {\r\n\t\t\t\tthis.upPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\t\tthis.getRanges();\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerUpReal(point);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.selection.hide(0);\r\n\r\n\t\t\t// reset cursor style, just in case\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tlet interaction = getInteraction();\r\n\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.downPoint = undefined;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = -startY + currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\t$utils.used(this.selection);\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally;\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * @param value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Behavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * If cursor's behavior is \"none\", it should not obstruct the page scrolling.\r\n\t *\r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(touch: boolean): boolean {\r\n\t\treturn (!this.interactions.isTouchProtected || !touch) && this.behavior != \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false),\r\n\t\t\t\t//axis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false),\r\n\t\t\t\t//axis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.xAxis)) {\r\n\t\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.yAxis)) {\r\n\t\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`\");\r\n\t\t\t\t\tdelete config.yAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.snapToSeries) && $type.isString(config.snapToSeries)) {\r\n\t\t\t\tif (this.map.hasKey(config.snapToSeries)) {\r\n\t\t\t\t\tconfig.snapToSeries = this.map.getKey(config.snapToSeries);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No series with id \\\"\" + config.snapToSeries + \"\\\" found for `series`\");\r\n\t\t\t\t\tdelete config.snapToSeries;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped. Works when one\r\n\t * of the axis is `DateAxis` or `CategoryAxis`. Won't work if both axes are\r\n\t * `ValueAxis`.\r\n\t *\r\n\t * @param {XYSeries}\r\n\t */\r\n\tpublic set snapToSeries(series: XYSeries) {\r\n\t\tif (this.setPropertyValue(\"snapToSeries\", series)) {\r\n\t\t\tif (this._snapToDisposer) {\r\n\t\t\t\tthis._snapToDisposer.dispose();\r\n\t\t\t}\r\n\r\n\t\t\tif (series) {\r\n\t\t\t\tthis._snapToDisposer = series.events.on(\"tooltipshownat\", this.handleSnap, this, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYSeries}\r\n\t */\r\n\tpublic get snapToSeries(): XYSeries {\r\n\t\treturn this.getPropertyValue(\"snapToSeries\");\r\n\t}\r\n\r\n\t/**\r\n\t * [handleSnap description]\r\n\t *\r\n\t * @ignore\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleSnap() {\r\n\r\n\t\tlet series = this.snapToSeries;\r\n\t\tlet y = series.tooltipY;\r\n\t\tlet x = series.tooltipX;\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tif (this.xAxis.renderer.opposite) {\r\n\t\t\t\ty -= this.pixelHeight;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.point = { x: x, y: y };\r\n\t\tthis.getPositions();\r\n\r\n\t\tlet xx = x;\r\n\t\tlet yy = y;\r\n\r\n\t\tx -= this.pixelWidth;\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tif (this.yAxis.renderer.opposite) {\r\n\t\t\t\tx += this.pixelWidth;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet tooltip = series.tooltip;\r\n\t\tlet duration = tooltip.animationDuration;\r\n\t\tlet easing = tooltip.animationEasing;\r\n\r\n\t\tif (series.baseAxis == series.xAxis) {\r\n\t\t\tseries.yAxis.showTooltipAtPosition(this.yPosition);\r\n\t\t}\r\n\r\n\t\tif (series.baseAxis == series.yAxis) {\r\n\t\t\tseries.xAxis.showTooltipAtPosition(this.xPosition);\r\n\t\t}\r\n\r\n\t\tthis.lineX.animate([{ property: \"y\", to: y }], duration, easing);\r\n\t\tthis.lineY.animate([{ property: \"x\", to: x }], duration, easing);\r\n\r\n\t\tif (!this.xAxis) {\r\n\t\t\tthis.lineX.animate([{ property: \"x\", to: xx }], duration, easing);\r\n\t\t}\r\n\t\tif (!this.yAxis) {\r\n\t\t\tthis.lineY.animate([{ property: \"y\", to: yy }], duration, easing);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose(){\r\n\t\tthis.hide(0);\r\n\t\tsuper.dispose();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}