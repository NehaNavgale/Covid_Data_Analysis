{"ast":null,"code":"/**\n * XY Chart module.\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\n\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\nimport { Container } from \"../../core/Container\";\nimport { List } from \"../../core/utils/List\";\nimport { DateAxis } from \"../axes/DateAxis\";\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\nimport { XYSeries } from \"../series/XYSeries\";\nimport { XYCursor } from \"../cursors/XYCursor\";\nimport { Disposer } from \"../../core/utils/Disposer\";\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $array from \"../../core/utils/Array\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\n/**\n * ============================================================================\n * DATA ITEM\n * ============================================================================\n * @hidden\n */\n\n/**\n * Defines a [[DataItem]] for [[XYChart]].\n *\n * @see {@link DataItem}\n */\n\nvar XYChartDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(XYChartDataItem, _super);\n  /**\n   * Constructor\n   */\n\n\n  function XYChartDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"XYChartDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return XYChartDataItem;\n}(SerialChartDataItem);\n\nexport { XYChartDataItem };\n/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\n *\n * Basically this is a chart type, that is used to display any chart\n * information in a square plot area.\n *\n * The horizontal and vertical scale is determined by the type of Axis.\n *\n * The plot types are determined by type of Series.\n *\n * ```TypeScript\n * // Includes\n * import * as am4core from \"@amcharts/amcharts4/core\";\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\n *\n * // Create chart\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\n *\n * // Add Data\n * chart.data = [{\n * \"country\": \"USA\",\n * \"visits\": 3025\n * }, {\n * \t\"country\": \"China\",\n * \t\"visits\": 1882\n * }, {\n * \t\"country\": \"Japan\",\n * \t\"visits\": 1809\n * }];\n *\n * // Add category axis\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\n * categoryAxis.dataFields.category = \"country\";\n *\n * // Add value axis\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n *\n * // Add series\n * let series = chart.series.push(new am4charts.ColumnSeries());\n * series.name = \"Web Traffic\";\n * series.dataFields.categoryX = \"country\";\n * series.dataFields.valueY = \"visits\";\n * ```\n * ```JavaScript\n * // Create chart\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\n *\n * // The following would work as well:\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\n *\n * // Add Data\n * chart.data = [{\n * \"country\": \"USA\",\n * \"visits\": 3025\n * }, {\n * \t\"country\": \"China\",\n * \t\"visits\": 1882\n * }, {\n * \t\"country\": \"Japan\",\n * \t\"visits\": 1809\n * }];\n *\n * // Add category axis\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\n * categoryAxis.dataFields.category = \"country\";\n *\n * // Add value axis\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n *\n * // Add series\n * var series = chart.series.push(new am4charts.ColumnSeries());\n * series.name = \"Web Traffic\";\n * series.dataFields.categoryX = \"country\";\n * series.dataFields.valueY = \"visits\";\n * ```\n * ```JSON\n * var chart = am4core.createFromConfig({\n *\n * \t// Category axis\n * \t\"xAxes\": [{\n * \t\t\"type\": \"CategoryAxis\",\n * \t\t\"dataFields\": {\n * \t\t\t\"category\": \"country\"\n * \t\t}\n * \t}],\n *\n * \t// Value axis\n * \t\"yAxes\": [{\n * \t\t\"type\": \"ValueAxis\"\n * \t}],\n *\n * \t// Series\n * \t\"series\": [{\n * \t\t\"type\": \"ColumnSeries\",\n * \t\t\"dataFields\": {\n * \t\t\t\"categoryX\": \"country\",\n * \t\t\t\"valueY\": \"visits\"\n * \t\t},\n * \t\t\"name\": \"Web Traffic\"\n * \t}],\n *\n * \t// Cursor\n * \t\"cursor\": {},\n *\n * \t// Data\n * \t\"data\": [{\n * \t\t\"country\": \"USA\",\n * \t\t\"visits\": 3025\n * \t}, {\n * \t\t\"country\": \"China\",\n * \t\t\"visits\": 1882\n * \t}, {\n * \t\t\"country\": \"Japan\",\n * \t\t\"visits\": 1809\n * \t}]\n *\n * }, \"chartdiv\", \"XYChart\");\n * ```\n *\n *\n * @see {@link IXYChartEvents} for a list of available Events\n * @see {@link IXYChartAdapters} for a list of available Adapters\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\n * @important\n */\n\nvar XYChart =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(XYChart, _super);\n  /**\n   * Constructor\n   */\n\n\n  function XYChart() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\n     * Defines the type of horizontal axis rederer.\n     */\n\n\n    _this._axisRendererX = AxisRendererX;\n    /**\n     * Defines the type of vertical axis rederer.\n     */\n\n    _this._axisRendererY = AxisRendererY;\n    /**\n     * @ignore\n     */\n\n    _this._seriesPoints = [];\n    _this.className = \"XYChart\"; // Set defaults\n    //this.margin(10, 10, 10, 10);\n\n    _this.maskBullets = true;\n    _this.arrangeTooltips = true; // Create main chart container\n\n    var chartContainer = _this.chartContainer;\n    chartContainer.layout = \"vertical\";\n\n    _this.padding(15, 15, 15, 15); // Create top axes container\n\n\n    var topAxesCont = chartContainer.createChild(Container);\n    topAxesCont.shouldClone = false;\n    topAxesCont.layout = \"vertical\";\n    topAxesCont.width = percent(100);\n    topAxesCont.zIndex = 1;\n    _this.topAxesContainer = topAxesCont; // Create vertical axes and plot area container\n    // Plot area and vertical axes share the whole width of the chart,\n    // so we need to put then into a separate container so that layouting\n    // engine takes care of the positioning\n\n    var yAxesAndPlotCont = chartContainer.createChild(Container);\n    yAxesAndPlotCont.shouldClone = false;\n    yAxesAndPlotCont.layout = \"horizontal\";\n    yAxesAndPlotCont.width = percent(100);\n    yAxesAndPlotCont.height = percent(100);\n    yAxesAndPlotCont.zIndex = 0;\n    _this.yAxesAndPlotContainer = yAxesAndPlotCont; // Create a container for bottom axes\n\n    var bottomAxesCont = chartContainer.createChild(Container);\n    bottomAxesCont.shouldClone = false;\n    bottomAxesCont.width = percent(100);\n    bottomAxesCont.layout = \"vertical\";\n    bottomAxesCont.zIndex = 1;\n    _this.bottomAxesContainer = bottomAxesCont; // Create a container for left-side axes\n\n    var leftAxesCont = yAxesAndPlotCont.createChild(Container);\n    leftAxesCont.shouldClone = false;\n    leftAxesCont.layout = \"horizontal\";\n    leftAxesCont.height = percent(100);\n    leftAxesCont.contentAlign = \"right\";\n    leftAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\n    leftAxesCont.zIndex = 1;\n    _this.leftAxesContainer = leftAxesCont; // Create a container for plot area\n\n    var plotCont = yAxesAndPlotCont.createChild(Container);\n    plotCont.shouldClone = false;\n    plotCont.height = percent(100);\n    plotCont.width = percent(100); // Create transparend background for plot container so that hover works\n    // on all of it\n\n    plotCont.background.fillOpacity = 0;\n    _this.plotContainer = plotCont; // must go below plot container\n\n    _this.mouseWheelBehavior = \"none\";\n    _this._cursorContainer = plotCont; // Create a container for right-side axes\n\n    var rightAxesCont = yAxesAndPlotCont.createChild(Container);\n    rightAxesCont.shouldClone = false;\n    rightAxesCont.layout = \"horizontal\";\n    rightAxesCont.height = percent(100);\n    rightAxesCont.zIndex = 1;\n    rightAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\n    _this.rightAxesContainer = rightAxesCont;\n    _this.seriesContainer.parent = plotCont;\n    _this.bulletsContainer.parent = plotCont;\n    var zoomOutButton = plotCont.createChild(ZoomOutButton);\n    zoomOutButton.shouldClone = false;\n    zoomOutButton.align = \"right\";\n    zoomOutButton.valign = \"top\";\n    zoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\n    zoomOutButton.marginTop = 5;\n    zoomOutButton.marginRight = 5;\n    zoomOutButton.hide(0);\n    _this.zoomOutButton = zoomOutButton;\n    _this._bulletMask = _this.plotContainer; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\n   * Sets defaults that instantiate some objects that rely on parent, so they\n   * cannot be set in constructor.\n   */\n\n\n  XYChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n\n    this.zoomOutButton.exportable = false; // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"X/Y chart\");\n    }\n  };\n  /**\n   * Draws the chart.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  XYChart.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    this.seriesContainer.toFront();\n    this.bulletsContainer.toFront();\n\n    if (this.maskBullets) {\n      this.bulletsContainer.mask = this._bulletMask;\n    }\n\n    this.updateSeriesLegend();\n  };\n  /**\n   * Triggers a redrawing of all chart's series.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  XYChart.prototype.updatePlotElements = function () {\n    $iter.each(this.series.iterator(), function (series) {\n      series.invalidate();\n    });\n  };\n  /**\n   * Triggers data (re)validation which in turn can cause a redraw of the\n   * whole chart or just aprticular series / elements.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  XYChart.prototype.validateData = function () {\n    // tell axes that data changed\n    if (this._parseDataFrom == 0) {\n      $iter.each(this.xAxes.iterator(), function (axis) {\n        axis.dataChangeUpdate();\n      });\n      $iter.each(this.yAxes.iterator(), function (axis) {\n        axis.dataChangeUpdate();\n      });\n      $iter.each(this.series.iterator(), function (series) {\n        series.dataChangeUpdate();\n      });\n    }\n\n    _super.prototype.validateData.call(this);\n  };\n  /**\n   * Updates margins for horizontal axes based on settings and available space.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  XYChart.prototype.updateXAxesMargins = function () {\n    var leftAxesWidth = this.leftAxesContainer.measuredWidth;\n    var rightAxesWidth = this.rightAxesContainer.measuredWidth;\n    var bottomAxesCont = this.bottomAxesContainer;\n\n    if (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\n      bottomAxesCont.paddingLeft = leftAxesWidth;\n      bottomAxesCont.paddingRight = rightAxesWidth;\n    }\n\n    var topAxesCont = this.topAxesContainer;\n\n    if (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\n      topAxesCont.paddingLeft = leftAxesWidth;\n      topAxesCont.paddingRight = rightAxesWidth;\n    }\n  };\n  /**\n   * Triggers an update on the horizontal axis when one of its properties\n   * change.\n   *\n   * @ignore Exclude from docs\n   * @param event An event object\n   */\n\n\n  XYChart.prototype.handleXAxisChange = function (event) {\n    this.updateXAxis(event.target);\n  };\n  /**\n   * Triggers an update on the vertical axis when one of its properties\n   * change.\n   *\n   * @ignore Exclude from docs\n   * @param event An event object\n   */\n\n\n  XYChart.prototype.handleYAxisChange = function (event) {\n    this.updateYAxis(event.target);\n  };\n  /**\n   * Sets up a new horizontal (X) axis when it is added to the chart.\n   *\n   * @ignore Exclude from docs\n   * @param event  Axis insert event\n   */\n\n\n  XYChart.prototype.processXAxis = function (event) {\n    var axis = event.newValue;\n    axis.chart = this;\n\n    if (!axis.renderer) {\n      axis.renderer = new this._axisRendererX();\n      axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\n    }\n\n    axis.axisLetter = \"X\";\n    axis.events.on(\"startendchanged\", this.handleXAxisRangeChange, this, false); //axis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\n    // Although axis does not use data directly, we set dataProvider here\n    // (but not add to chart data users) to hold up rendering before data\n    // is parsed (system handles this)\n\n    axis.dataProvider = this;\n    this.updateXAxis(axis.renderer);\n    this.processAxis(axis);\n  };\n  /**\n   * Sets up a new vertical (Y) axis when it is added to the chart.\n   *\n   * @ignore Exclude from docs\n   * @param event Axis insert event\n   */\n\n\n  XYChart.prototype.processYAxis = function (event) {\n    var axis = event.newValue;\n    axis.chart = this;\n\n    if (!axis.renderer) {\n      axis.renderer = new this._axisRendererY();\n      axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\n    }\n\n    axis.axisLetter = \"Y\";\n    axis.events.on(\"startendchanged\", this.handleYAxisRangeChange, this, false); //axis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\n    // Although axis does not use data directly, we set dataProvider here\n    // (but not add to chart data users) to hold up rendering before data\n    // is parsed (system handles this)\n\n    axis.dataProvider = this;\n    this.updateYAxis(axis.renderer);\n    this.processAxis(axis);\n  };\n  /**\n   * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\n   * value range changes.\n   */\n\n\n  XYChart.prototype.handleXAxisRangeChange = function () {\n    var range = this.getCommonAxisRange(this.xAxes);\n\n    if (this.scrollbarX) {\n      this.zoomAxes(this.xAxes, range, true);\n    }\n\n    this.toggleZoomOutButton();\n    this.updateScrollbar(this.scrollbarX, range);\n  };\n  /**\n   * Shows or hides the Zoom Out button depending on whether the chart is fully\n   * zoomed out or not.\n   */\n\n\n  XYChart.prototype.toggleZoomOutButton = function () {\n    if (this.zoomOutButton) {\n      var show_1 = false;\n      $iter.eachContinue(this.xAxes.iterator(), function (axis) {\n        if ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\n          show_1 = true;\n          return false;\n        }\n\n        return true;\n      });\n      $iter.eachContinue(this.yAxes.iterator(), function (axis) {\n        if ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\n          show_1 = true;\n          return false;\n        }\n\n        return true;\n      });\n\n      if (!this.seriesAppeared) {\n        show_1 = false;\n      }\n\n      if (show_1) {\n        this.zoomOutButton.show();\n      } else {\n        this.zoomOutButton.hide();\n      }\n    }\n  };\n  /**\n   * @ignore\n   * moved this check to a separate method so that we could override it in TreeMapSeries\n   */\n\n\n  XYChart.prototype.seriesAppeared = function () {\n    var appeared = false;\n    $iter.each(this.series.iterator(), function (series) {\n      if (!series.appeared) {\n        appeared = false;\n        return false;\n      }\n    });\n    return appeared;\n  };\n  /**\n   * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\n   * value range changes.\n   */\n\n\n  XYChart.prototype.handleYAxisRangeChange = function () {\n    var range = this.getCommonAxisRange(this.yAxes);\n\n    if (this.scrollbarY) {\n      this.zoomAxes(this.yAxes, range, true);\n    }\n\n    this.toggleZoomOutButton();\n    this.updateScrollbar(this.scrollbarY, range);\n  };\n  /**\n   * Updates a relative scrollbar whenever data range of the axis changes.\n   *\n   * @param scrollbar  Scrollbar instance\n   * @param range      New data (values) range of the axis\n   */\n\n\n  XYChart.prototype.updateScrollbar = function (scrollbar, range) {\n    if (scrollbar) {\n      scrollbar.skipRangeEvents();\n      scrollbar.start = range.start;\n      scrollbar.end = range.end;\n    }\n  };\n  /**\n   * Returns a common range of values between a list of axes.\n   *\n   * This is used to synchronize the zoom between multiple axes.\n   *\n   * @ignore Exclude from docs\n   * @param axes  A list of axes\n   * @return Common value range\n   */\n\n\n  XYChart.prototype.getCommonAxisRange = function (axes) {\n    var start;\n    var end;\n    $iter.each(axes.iterator(), function (axis) {\n      var axisStart = axis.start;\n      var axisEnd = axis.end;\n\n      if (axis.renderer.inversed) {\n        axisStart = 1 - axis.end;\n        axisEnd = 1 - axis.start;\n      }\n\n      if (!$type.isNumber(start) || axisStart < start) {\n        start = axisStart;\n      }\n\n      if (!$type.isNumber(end) || axisEnd > end) {\n        end = axisEnd;\n      }\n    });\n    return {\n      start: start,\n      end: end\n    };\n  };\n  /**\n   * Triggers (re)rendering of the horizontal (X) axis.\n   *\n   * @ignore Exclude from docs\n   * @param axis  Axis\n   */\n\n\n  XYChart.prototype.updateXAxis = function (renderer) {\n    var axis = renderer.axis;\n\n    if (renderer.opposite) {\n      axis.parent = this.topAxesContainer;\n      axis.toFront();\n    } else {\n      axis.parent = this.bottomAxesContainer;\n      axis.toBack();\n    }\n\n    if (axis.renderer) {\n      axis.renderer.processRenderer();\n    }\n  };\n  /**\n   * Triggers (re)rendering of the vertical (Y) axis.\n   *\n   * @ignore Exclude from docs\n   * @param axis  Axis\n   */\n\n\n  XYChart.prototype.updateYAxis = function (renderer) {\n    var axis = renderer.axis;\n\n    if (renderer.opposite) {\n      axis.parent = this.rightAxesContainer;\n      axis.toBack();\n    } else {\n      axis.parent = this.leftAxesContainer;\n      axis.toFront();\n    }\n\n    if (axis.renderer) {\n      axis.renderer.processRenderer();\n    }\n  };\n  /**\n   * Decorates an Axis for use with this chart, e.g. sets proper renderer\n   * and containers for placement.\n   *\n   * @param axis  Axis\n   */\n\n\n  XYChart.prototype.processAxis = function (axis) {\n    var _this = this; // Value axis does not use data directly, only category axis does\n\n\n    if (axis instanceof CategoryAxis) {\n      this._dataUsers.moveValue(axis);\n    }\n\n    var renderer = axis.renderer;\n    renderer.gridContainer.parent = this.plotContainer;\n    renderer.gridContainer.toBack();\n    renderer.breakContainer.parent = this.plotContainer;\n    renderer.breakContainer.toFront();\n    renderer.breakContainer.zIndex = 10;\n    axis.addDisposer(new Disposer(function () {\n      _this.dataUsers.removeValue(axis);\n    }));\n    this.plotContainer.events.on(\"maxsizechanged\", function () {\n      if (_this.inited) {\n        axis.invalidateDataItems();\n\n        _this.updateSeriesMasks();\n      }\n    }, axis, false);\n  };\n  /**\n   * This is done because for some reason IE doesn't change mask if path of a\n   * mask changes.\n   */\n\n\n  XYChart.prototype.updateSeriesMasks = function () {\n    if ($utils.isIE()) {\n      this.series.each(function (series) {\n        var mask = series.mainContainer.mask;\n        series.mainContainer.mask = undefined;\n        series.mainContainer.mask = mask;\n      });\n    }\n  };\n\n  Object.defineProperty(XYChart.prototype, \"xAxes\", {\n    /**\n     * A list of horizontal (X) axes.\n     *\n     * @return List of axes\n     */\n    get: function get() {\n      if (!this._xAxes) {\n        this._xAxes = new List();\n\n        this._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\n\n        this._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\n      }\n\n      return this._xAxes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @ignore\n   */\n\n  XYChart.prototype.handleAxisRemoval = function (event) {\n    var axis = event.oldValue;\n    this.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\n\n    if (axis.autoDispose) {\n      axis.dispose();\n    }\n  };\n\n  Object.defineProperty(XYChart.prototype, \"yAxes\", {\n    /**\n     * A list of vertical (Y) axes.\n     *\n     * @return List of axes\n     */\n    get: function get() {\n      if (!this._yAxes) {\n        this._yAxes = new List();\n\n        this._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\n\n        this._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\n      }\n\n      return this._yAxes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Decorates a new [[XYSeries]] object with required parameters when it is\n   * added to the chart.\n   *\n   * @ignore Exclude from docs\n   * @param event  Event\n   */\n\n  XYChart.prototype.handleSeriesAdded = function (event) {\n    try {\n      _super.prototype.handleSeriesAdded.call(this, event);\n\n      var series = event.newValue;\n\n      if (this.xAxes.length == 0 || this.yAxes.length == 0) {\n        registry.removeFromInvalidComponents(series);\n        series.dataInvalid = false;\n      }\n\n      $utils.used(series.xAxis); // this is enough to get axis, handled in getter\n\n      $utils.used(series.yAxis); // this is enough to get axis, handled in getter\n\n      if (series.fill == undefined) {\n        series.fill = this.colors.next();\n      }\n\n      if (series.stroke == undefined) {\n        series.stroke = series.fill;\n      }\n    } catch (e) {\n      this.raiseCriticalError(e);\n    }\n  };\n\n  Object.defineProperty(XYChart.prototype, \"cursor\", {\n    /**\n     * @return Cursor\n     */\n    get: function get() {\n      return this._cursor;\n    },\n\n    /**\n     * Chart's [[Cursor]].\n     *\n     * @param cursor  Cursor\n     */\n    set: function set(cursor) {\n      if (this._cursor != cursor) {\n        if (this._cursor) {\n          this.removeDispose(this._cursor);\n        }\n\n        this._cursor = cursor;\n\n        if (cursor) {\n          // TODO this is wrong, fix it\n          this._disposers.push(cursor);\n\n          cursor.chart = this;\n          cursor.shouldClone = false;\n          cursor.parent = this._cursorContainer;\n          cursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\n          cursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\n          cursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\n          cursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\n          cursor.events.on(\"panning\", this.handleCursorPanning, this, false);\n          cursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\n          cursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\n          cursor.events.on(\"hidden\", this.handleHideCursor, this, false);\n          cursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\n\n          if (this.tapToActivate) {\n            // We need this in order to setup cursor properly\n            this.setTapToActivate(this.tapToActivate);\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Creates and returns a new [[Cursor]] suitable for this chart type.\n   *\n   * @return New cursor\n   */\n\n  XYChart.prototype.createCursor = function () {\n    return new XYCursor();\n  };\n  /**\n   * Performs tasks when the cursor's position changes, e.g. shows proper\n   * tooltips on axes and series.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  XYChart.prototype.handleCursorPositionChange = function () {\n    var cursor = this.cursor;\n\n    if (cursor.visible && !cursor.isHiding) {\n      var xPosition = this.cursor.xPosition;\n      var yPosition = this.cursor.yPosition;\n      this.showSeriesTooltip({\n        x: xPosition,\n        y: yPosition\n      });\n      var exceptAxis = void 0;\n      var snapToSeries = cursor.snapToSeries;\n\n      if (snapToSeries) {\n        if (snapToSeries.baseAxis == snapToSeries.xAxis) {\n          exceptAxis = snapToSeries.yAxis;\n        }\n\n        if (snapToSeries.baseAxis == snapToSeries.yAxis) {\n          exceptAxis = snapToSeries.xAxis;\n        }\n      }\n\n      this._seriesPoints = [];\n      this.showAxisTooltip(this.xAxes, xPosition, exceptAxis);\n      this.showAxisTooltip(this.yAxes, yPosition, exceptAxis);\n      this.sortSeriesTooltips(this._seriesPoints);\n    }\n  };\n  /**\n   * Hides all cursor-related tooltips when the cursor itself is hidden.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  XYChart.prototype.handleHideCursor = function () {\n    this.hideObjectTooltip(this.xAxes);\n    this.hideObjectTooltip(this.yAxes);\n    this.hideObjectTooltip(this.series);\n    this.updateSeriesLegend();\n  };\n  /**\n   * Updates values for each series' legend item.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  XYChart.prototype.updateSeriesLegend = function () {\n    $iter.each(this.series.iterator(), function (series) {\n      series.updateLegendValue();\n    });\n  };\n  /**\n   * Hides a tooltip for a list of objects.\n   *\n   * @ignore Exclude from docs\n   * @param sprites  A list of sprites to hide tooltip for\n   */\n\n\n  XYChart.prototype.hideObjectTooltip = function (sprites) {\n    $iter.each(sprites.iterator(), function (sprite) {\n      sprite.hideTooltip(0);\n    });\n  };\n  /**\n   * Shows a tooltip for all chart's series, using specific coordinates as a\n   * reference point.\n   *\n   * The tooltip might be shown at different coordinates depending on the\n   * actual data point's position, overlapping with other tooltips, etc.\n   *\n   * @ignore Exclude from docs\n   * @param position  Reference point\n   */\n\n\n  XYChart.prototype.showSeriesTooltip = function (position) {\n    var _this = this;\n\n    if (!position) {\n      this.series.each(function (series) {\n        series.hideTooltip();\n      });\n      return;\n    }\n\n    var seriesPoints = [];\n    this.series.each(function (series) {\n      //if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\n      if (series.xAxis instanceof DateAxis && series.xAxis.snapTooltip || series.yAxis instanceof DateAxis && series.yAxis.snapTooltip) {// void\n      } else {\n        var point = series.showTooltipAtPosition(position.x, position.y);\n\n        if (point) {\n          series.tooltip.setBounds({\n            x: 0,\n            y: 0,\n            width: _this.pixelWidth,\n            height: _this.pixelHeight\n          });\n          seriesPoints.push({\n            series: series,\n            point: point\n          });\n        }\n      } //}\n\n    });\n\n    if (this.arrangeTooltips) {\n      this.sortSeriesTooltips(seriesPoints);\n    }\n  };\n  /**\n   * @ignore\n   */\n\n\n  XYChart.prototype.sortSeriesTooltips = function (seriesPoints) {\n    var topLeft = $utils.spritePointToSvg({\n      x: -0.5,\n      y: -0.5\n    }, this.plotContainer);\n    var bottomRight = $utils.spritePointToSvg({\n      x: this.plotContainer.pixelWidth + 0.5,\n      y: this.plotContainer.pixelHeight + 0.5\n    }, this.plotContainer);\n    var sum = 0;\n    var filteredSeriesPoints = [];\n    $array.each(seriesPoints, function (seriesPoint) {\n      var point = seriesPoint.point;\n\n      if (point && $math.isInRectangle(point, {\n        x: topLeft.x,\n        y: topLeft.y,\n        width: bottomRight.x - topLeft.x,\n        height: bottomRight.y - topLeft.y\n      })) {\n        filteredSeriesPoints.push({\n          point: point,\n          series: seriesPoint.series\n        });\n        sum += point.y;\n      }\n    });\n    seriesPoints = filteredSeriesPoints;\n    seriesPoints.sort(function (a, b) {\n      if (a.point.y > b.point.y) {\n        return 1;\n      } else if (a.point.y < b.point.y) {\n        return -1;\n      } else {\n        return 0;\n      }\n    });\n    var averageY = sum / seriesPoints.length;\n    var maxY = $utils.svgPointToDocument({\n      x: 0,\n      y: 0\n    }, this.svgContainer.SVGContainer).y;\n\n    if (seriesPoints.length > 0) {\n      var top_1 = topLeft.y;\n      var bottom = bottomRight.y; // TODO is this needed ?\n\n      $utils.spritePointToDocument({\n        x: 0,\n        y: top_1\n      }, this);\n      var dropped = false;\n\n      if (averageY > top_1 + (bottom - top_1) / 2) {\n        var nextHeight = bottom;\n\n        for (var i = seriesPoints.length - 1; i >= 0; i--) {\n          var series = seriesPoints[i].series;\n          var tooltip = series.tooltip;\n          var pointY = seriesPoints[i].point.y;\n          tooltip.setBounds({\n            x: 0,\n            y: -maxY,\n            width: this.pixelWidth,\n            height: nextHeight + maxY\n          });\n\n          if (tooltip.invalid) {\n            tooltip.validate();\n          }\n\n          tooltip.toBack();\n          nextHeight = $utils.spritePointToSvg({\n            x: 0,\n            y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop\n          }, tooltip).y;\n\n          if (nextHeight < -maxY) {\n            dropped = true;\n            break;\n          }\n        }\n      }\n\n      if (averageY <= top_1 + (bottom - top_1) / 2 || dropped) {\n        var nextY = top_1;\n\n        for (var i = 0, len = seriesPoints.length; i < len; i++) {\n          var series = seriesPoints[i].series;\n          var pointY = seriesPoints[i].point.y;\n          var tooltip = series.tooltip;\n          tooltip.setBounds({\n            x: 0,\n            y: nextY,\n            width: this.pixelWidth,\n            height: bottom\n          });\n\n          if (tooltip.invalid) {\n            tooltip.validate();\n          }\n\n          tooltip.toBack();\n          nextY = $utils.spritePointToSvg({\n            x: 0,\n            y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom\n          }, tooltip).y;\n        }\n      }\n    }\n  };\n  /**\n   * Shows tooltips for a list of axes at specific position.\n   *\n   * Position might be X coordinate for horizontal axes, and Y coordinate for\n   * vertical axes.\n   *\n   * @ignore Exclude from docs\n   * @param axes      List of axes to show tooltip on\n   * @param position  Position (px)\n   */\n\n\n  XYChart.prototype.showAxisTooltip = function (axes, position, except) {\n    var _this = this;\n\n    $iter.each(axes.iterator(), function (axis) {\n      if (axis != except) {\n        if (_this.dataItems.length > 0 || axis.dataItems.length > 0) {\n          axis.showTooltipAtPosition(position);\n        }\n      }\n    });\n  };\n  /**\n   * Recalculates the value range for the axis taking into account zoom level & inversed.\n   *\n   * @param axis   Axis\n   * @param range  Range\n   * @return Modified range\n   */\n\n\n  XYChart.prototype.getUpdatedRange = function (axis, range) {\n    if (!axis) {\n      return;\n    }\n\n    var start;\n    var end;\n    var inversed = axis.renderer.inversed;\n\n    if (axis.renderer instanceof AxisRendererY) {\n      range = $math.invertRange(range);\n    }\n\n    if (inversed) {\n      $math.invertRange(range);\n      start = 1 - axis.end;\n      end = 1 - axis.start;\n    } else {\n      start = axis.start;\n      end = axis.end;\n    }\n\n    var difference = end - start;\n    return {\n      start: start + range.start * difference,\n      end: start + range.end * difference\n    };\n  };\n  /**\n   * Performs zoom and other operations when user finishes zooming using chart\n   * cursor, e.g. zooms axes.\n   *\n   * @param event Cursor's event\n   */\n\n\n  XYChart.prototype.handleCursorZoomEnd = function (event) {\n    var cursor = this.cursor;\n    var behavior = cursor.behavior;\n\n    if (behavior == \"zoomX\" || behavior == \"zoomXY\") {\n      var xRange = cursor.xRange;\n\n      if (xRange && this.xAxes.length > 0) {\n        xRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\n        xRange.priority = \"start\";\n        this.zoomAxes(this.xAxes, xRange);\n      }\n    }\n\n    if (behavior == \"zoomY\" || behavior == \"zoomXY\") {\n      var yRange = cursor.yRange;\n\n      if (yRange && this.yAxes.length > 0) {\n        yRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\n        yRange.priority = \"start\";\n        this.zoomAxes(this.yAxes, yRange);\n      }\n    }\n\n    this.handleHideCursor();\n  };\n  /**\n   * Performs zoom and other operations when user is panning chart plot using chart cursor.\n   *\n   * @param event Cursor's event\n   */\n\n\n  XYChart.prototype.handleCursorPanStart = function (event) {\n    var xAxis = this.xAxes.getIndex(0);\n\n    if (xAxis) {\n      this._panStartXRange = {\n        start: xAxis.start,\n        end: xAxis.end\n      };\n    }\n\n    var yAxis = this.yAxes.getIndex(0);\n\n    if (yAxis) {\n      this._panStartYRange = {\n        start: yAxis.start,\n        end: yAxis.end\n      };\n    }\n  };\n  /**\n   * Performs zoom and other operations when user ends panning\n   *\n   * @param event Cursor's event\n   */\n\n\n  XYChart.prototype.handleCursorPanEnd = function (event) {\n    var cursor = this.cursor;\n    var behavior = cursor.behavior;\n\n    if (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\n      var panEndRange = this._panEndXRange;\n      var delta = 0;\n\n      if (panEndRange.start < 0) {\n        delta = panEndRange.start;\n      }\n\n      if (panEndRange.end > 1) {\n        delta = panEndRange.end - 1;\n      }\n\n      this.zoomAxes(this.xAxes, {\n        start: panEndRange.start - delta,\n        end: panEndRange.end - delta\n      }, false, true);\n      this._panEndXRange = undefined;\n      this._panStartXRange = undefined;\n    }\n\n    if (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\n      var panEndRange = this._panEndYRange;\n      var delta = 0;\n\n      if (panEndRange.start < 0) {\n        delta = panEndRange.start;\n      }\n\n      if (panEndRange.end > 1) {\n        delta = panEndRange.end - 1;\n      }\n\n      this.zoomAxes(this.yAxes, {\n        start: panEndRange.start - delta,\n        end: panEndRange.end - delta\n      }, false, true);\n      this._panEndYRange = undefined;\n      this._panStartYRange = undefined;\n    }\n  };\n\n  XYChart.prototype.handleCursorCanceled = function () {\n    this._panEndXRange = undefined;\n    this._panStartXRange = undefined;\n  };\n  /**\n   * Performs zoom and other operations when user is panning chart plot using chart cursor.\n   *\n   * @param event Cursor's event\n   */\n\n\n  XYChart.prototype.handleCursorPanning = function (event) {\n    var cursor = this.cursor;\n    var behavior = cursor.behavior;\n    var maxPanOut = cursor.maxPanOut;\n\n    if (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\n      var panStartRange = this._panStartXRange;\n      var range = cursor.xRange;\n      var axisRange = this.getCommonAxisRange(this.xAxes);\n      var difference = panStartRange.end - panStartRange.start;\n      var delta = range.start * (axisRange.end - axisRange.start);\n      var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\n      var newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\n\n      if (newStart <= 0) {\n        newEnd = newStart + difference;\n      }\n\n      if (newEnd >= 1) {\n        newStart = newEnd - difference;\n      }\n\n      var newRange = {\n        start: newStart,\n        end: newEnd\n      };\n      this._panEndXRange = newRange;\n      this.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\n    }\n\n    if (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\n      var panStartRange = this._panStartYRange;\n      var range = cursor.yRange;\n      var axisRange = this.getCommonAxisRange(this.yAxes);\n      var difference = panStartRange.end - panStartRange.start;\n      var delta = range.start * (axisRange.end - axisRange.start);\n      var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\n      var newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\n\n      if (newStart <= 0) {\n        newEnd = newStart + difference;\n      }\n\n      if (newEnd >= 1) {\n        newStart = newEnd - difference;\n      }\n\n      var newRange = {\n        start: newStart,\n        end: newEnd\n      };\n      this._panEndYRange = newRange;\n      this.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\n    }\n\n    this.handleHideCursor();\n  };\n  /**\n   * Performs zoom and other operations when user starts zooming using chart\n   * cursor, e.g. zooms axes.\n   *\n   * @param event Cursor's event\n   */\n\n\n  XYChart.prototype.handleCursorZoomStart = function (event) {// Nothing here\n    // This method is here only as a \"placeholder\" for extending classes to\n    // override if necessary\n  };\n\n  Object.defineProperty(XYChart.prototype, \"scrollbarX\", {\n    /**\n     * @return Scrollbar\n     */\n    get: function get() {\n      return this._scrollbarX;\n    },\n\n    /**\n     * Horizontal (X) scrollbar.\n     *\n     * @param scrollbar Scrollbar\n     */\n    set: function set(scrollbar) {\n      var _this = this;\n\n      if (this._scrollbarX) {\n        this.removeDispose(this._scrollbarX);\n      }\n\n      this._scrollbarX = scrollbar;\n\n      if (scrollbar) {\n        this._disposers.push(scrollbar);\n\n        scrollbar.parent = this.topAxesContainer;\n        scrollbar.shouldClone = false;\n        scrollbar.startGrip.exportable = false;\n        scrollbar.endGrip.exportable = false;\n        scrollbar.toBack();\n        scrollbar.orientation = \"horizontal\";\n        scrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false); // accessibility related\n\n        scrollbar.adapter.add(\"positionValue\", function (arg) {\n          var xAxis = _this.xAxes.getIndex(0);\n\n          if (xAxis) {\n            arg.value = xAxis.getPositionLabel(arg.position);\n          }\n\n          return arg;\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart.prototype, \"scrollbarY\", {\n    /**\n     * @return Scrollbar\n     */\n    get: function get() {\n      return this._scrollbarY;\n    },\n\n    /**\n     * Vertical (Y) scrollbar.\n     *\n     * @param scrollbar Scrollbar\n     */\n    set: function set(scrollbar) {\n      var _this = this;\n\n      if (this._scrollbarY) {\n        this.removeDispose(this._scrollbarY);\n      }\n\n      this._scrollbarY = scrollbar;\n\n      if (scrollbar) {\n        this._disposers.push(scrollbar);\n\n        scrollbar.parent = this.rightAxesContainer;\n        scrollbar.startGrip.exportable = false;\n        scrollbar.shouldClone = false;\n        scrollbar.endGrip.exportable = false;\n        scrollbar.toFront();\n        scrollbar.orientation = \"vertical\";\n        scrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false); // accessibility related\n\n        scrollbar.adapter.add(\"positionValue\", function (arg) {\n          var yAxis = _this.yAxes.getIndex(0);\n\n          if (yAxis) {\n            arg.value = yAxis.getPositionLabel(arg.position);\n          }\n\n          return arg;\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Zooms axes affected by the horizontal (X) scrollbar when the selection\n   * on it changes.\n   *\n   * @param event Scrollbar range change event\n   */\n\n  XYChart.prototype.handleXScrollbarChange = function (event) {\n    if (this.inited) {\n      var scrollbar = event.target;\n      var range = scrollbar.range;\n\n      if (range.end == 1) {\n        range.priority = \"end\";\n      }\n\n      if (range.start == 0) {\n        range.priority = \"start\";\n      }\n\n      range = this.zoomAxes(this.xAxes, range);\n      scrollbar.fixRange(range);\n    }\n  };\n  /**\n   * Zooms axes affected by the vertical (Y) scrollbar when the selection\n   * on it changes.\n   *\n   * @param event Scrollbar range change event\n   */\n\n\n  XYChart.prototype.handleYScrollbarChange = function (event) {\n    if (this.inited) {\n      var scrollbar = event.target;\n      var range = scrollbar.range;\n\n      if (range.end == 1) {\n        range.priority = \"end\";\n      }\n\n      if (range.start == 0) {\n        range.priority = \"start\";\n      }\n\n      range = this.zoomAxes(this.yAxes, range);\n      scrollbar.fixRange(range);\n    }\n  };\n  /**\n   * Zooms axes that are affected by to specific relative range.\n   *\n   * @param axes       List of axes to zoom\n   * @param range      Range of values to zoom to (0-1)\n   * @param instantly  If set to `true` will skip zooming animation\n   * @return Recalculated range that is common to all involved axes\n   */\n\n\n  XYChart.prototype.zoomAxes = function (axes, range, instantly, round, declination) {\n    var realRange = {\n      start: 0,\n      end: 1\n    };\n    this.showSeriesTooltip(); // hides\n\n    if (!this.dataInvalid) {\n      $iter.each(axes.iterator(), function (axis) {\n        if (axis.renderer.inversed) {\n          range = $math.invertRange(range);\n        }\n\n        axis.hideTooltip(0);\n\n        if (round) {\n          //let diff = range.end - range.start;\n          range.start = axis.roundPosition(range.start + 0.0001, 0);\n          range.end = axis.roundPosition(range.end + 0.0001, 0);\n        }\n\n        var axisRange = axis.zoom(range, instantly, instantly, declination);\n\n        if (axis.renderer.inversed) {\n          axisRange = $math.invertRange(axisRange);\n        }\n\n        realRange = axisRange;\n      });\n    }\n\n    return realRange;\n  };\n\n  Object.defineProperty(XYChart.prototype, \"maskBullets\", {\n    /**\n     * @return Mask bullet container?\n     */\n    get: function get() {\n      return this.getPropertyValue(\"maskBullets\");\n    },\n\n    /**\n     * Indicates if bullet container is masked.\n     *\n     * If it is set to `true`, any bullets that do not fit into bullet container\n     * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\n     * of the plot area so they are not cut off.\n     *\n     * @param value Mask bullet container?\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"maskBullets\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart.prototype, \"arrangeTooltips\", {\n    /**\n     * @return Arrange tooltips?\n     */\n    get: function get() {\n      return this.getPropertyValue(\"arrangeTooltips\");\n    },\n\n    /**\n     * Indicates if chart should arrange series tooltips so that they would not\n     * overlap.\n     *\n     * If set to `true` (default), the chart will adjust vertical positions of\n     * all simultaneously shown tooltips to avoid overlapping.\n     *\n     * However, if you have a vertically-arranged chart, it might not make sense,\n     * because tooltips would most probably not be aligned horizontally. In this\n     * case it would probably be a good idea to set this setting to `false`.\n     *\n     * @default true\n     * @param value Arrange tooltips?\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"arrangeTooltips\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Handles mouse wheel event.\n   *\n   * @param event  Original event\n   */\n\n  XYChart.prototype.handleWheel = function (event) {\n    var plotContainer = this.plotContainer;\n    var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\n    var plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\n    var shift = event.shift.y;\n    var rangeX = this.getCommonAxisRange(this.xAxes);\n    var rangeY = this.getCommonAxisRange(this.yAxes);\n    var shiftStep = 0.05;\n    var maxPanOut = 0;\n    var mouseWheelBehavior = this.mouseWheelBehavior;\n\n    if (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\n      var differenceX = rangeX.end - rangeX.start;\n      var newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100);\n      var newEndX = Math.min(rangeX.end + shiftStep * shift / 100, 1 + maxPanOut);\n\n      if (newStartX <= 0) {\n        newEndX = newStartX + differenceX;\n      }\n\n      if (newEndX >= 1) {\n        newStartX = newEndX - differenceX;\n      }\n\n      this.zoomAxes(this.xAxes, {\n        start: newStartX,\n        end: newEndX\n      });\n    }\n\n    if (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\n      shift *= -1;\n      var differenceY = rangeY.end - rangeY.start;\n      var newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100);\n      var newEndY = Math.min(rangeY.end + shiftStep * shift / 100, 1 + maxPanOut);\n\n      if (newStartY <= 0) {\n        newEndY = newStartY + differenceY;\n      }\n\n      if (newEndY >= 1) {\n        newStartY = newEndY - differenceY;\n      }\n\n      this.zoomAxes(this.yAxes, {\n        start: newStartY,\n        end: newEndY\n      });\n    }\n\n    if (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\n      var locationX = plotPoint.x / plotContainer.maxWidth;\n      var newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * shift / 100 * locationX);\n      newStartX = Math.min(newStartX, rangeX.start + (rangeX.end - rangeX.start) * locationX - shiftStep * 0.05);\n      var newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (1 - locationX), 1 + maxPanOut);\n      newEndX = Math.max(newEndX, rangeX.start + (rangeX.end - rangeX.start) * locationX + shiftStep * 0.05);\n      this.zoomAxes(this.xAxes, {\n        start: newStartX,\n        end: newEndX\n      });\n    }\n\n    if (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\n      var locationY = plotPoint.y / plotContainer.maxHeight;\n      var newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * shift / 100 * (1 - locationY));\n      newStartY = Math.min(newStartY, rangeY.start + (rangeY.end - rangeY.start) * locationY - shiftStep * 0.05);\n      var newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY, 1 + maxPanOut);\n      newEndY = Math.max(newEndY, rangeY.start + (rangeY.end - rangeY.start) * locationY + shiftStep * 0.05);\n      this.zoomAxes(this.yAxes, {\n        start: newStartY,\n        end: newEndY\n      });\n    }\n  };\n\n  Object.defineProperty(XYChart.prototype, \"mouseWheelBehavior\", {\n    /**\n     * @return Mouse wheel behavior\n     */\n    get: function get() {\n      return this.getPropertyValue(\"mouseWheelBehavior\");\n    },\n\n    /**\n     * Specifies action for when mouse wheel is used when over the chart.\n     *\n     * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\n     *\n     * @default \"none\"\n     * @param mouse wheel behavior\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\n        if (value != \"none\") {\n          this._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\n\n          this._disposers.push(this._mouseWheelDisposer);\n        } else {\n          if (this._mouseWheelDisposer) {\n            this.plotContainer.wheelable = false;\n            this.plotContainer.hoverable = false;\n\n            this._mouseWheelDisposer.dispose();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * This function is called by the [[DataSource]]'s `dateFields` adapater\n   * so that particular chart types can popuplate this setting with their\n   * own type-specific data fields so they are parsed properly.\n   *\n   * @param fields  Array of date fields\n   * @return Array of date fields populated with chart's date fields\n   */\n\n  XYChart.prototype.dataSourceDateFields = function (fields) {\n    var _this = this; // Process parent\n\n\n    fields = _super.prototype.dataSourceDateFields.call(this, fields); // Check if we have any series with date-fields\n\n    $iter.each(this.series.iterator(), function (series) {\n      fields = _this.populateDataSourceFields(fields, series.dataFields, [\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]);\n    });\n    return fields;\n  };\n  /**\n   * This function is called by the [[DataSource]]'s `numberFields` adapater\n   * so that particular chart types can popuplate this setting with their\n   * own type-specific data fields so they are parsed properly.\n   *\n   * @param value  Array of number fields\n   * @return Array of number fields populated with chart's number fields\n   */\n\n\n  XYChart.prototype.dataSourceNumberFields = function (fields) {\n    var _this = this;\n\n    fields = _super.prototype.dataSourceDateFields.call(this, fields); // Check if we have any series with date-fields\n\n    $iter.each(this.series.iterator(), function (series) {\n      fields = _this.populateDataSourceFields(fields, series.dataFields, [\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]);\n    });\n    return fields;\n  };\n  /**\n   * Processes JSON-based config before it is applied to the object.\n   *\n   * @ignore Exclude from docs\n   * @param config  Config\n   */\n\n\n  XYChart.prototype.processConfig = function (config) {\n    if (config) {\n      // Save axis ranges for later processing\n      var xAxes = [];\n      var yAxes = []; // Set up axes\n\n      if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\n        for (var i = 0, len = config.xAxes.length; i < len; i++) {\n          if (!config.xAxes[i].type) {\n            throw Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\n          } else if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\n            xAxes.push({\n              axisRanges: config.xAxes[i][\"axisRanges\"],\n              index: i\n            });\n            delete config.xAxes[i][\"axisRanges\"];\n          }\n        }\n      }\n\n      if ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\n        for (var i = 0, len = config.yAxes.length; i < len; i++) {\n          if (!config.yAxes[i].type) {\n            throw Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\n          } else if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\n            yAxes.push({\n              axisRanges: config.yAxes[i][\"axisRanges\"],\n              index: i\n            });\n            delete config.yAxes[i][\"axisRanges\"];\n          }\n        }\n      } // Set up series\n\n\n      if ($type.hasValue(config.series) && $type.isArray(config.series)) {\n        for (var i = 0, len = config.series.length; i < len; i++) {\n          config.series[i].type = config.series[i].type || \"LineSeries\";\n        }\n      } // Set up cursor\n\n\n      if ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\n        config.cursor.type = \"XYCursor\";\n      } // Set up scrollbars\n\n\n      if ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\n        config.scrollbarX.type = \"Scrollbar\";\n      }\n\n      if ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\n        config.scrollbarY.type = \"Scrollbar\";\n      }\n\n      _super.prototype.processConfig.call(this, config); // Finish up with ranges.\n      // We need to do this here because series are processed last in JSON\n      // config. Therefore their respective objects are not yet are available\n      // when axis (and respectively their ranges) are being processed.\n\n\n      if (yAxes.length) {\n        for (var i = 0, len = yAxes.length; i < len; i++) {\n          this.yAxes.getIndex(yAxes[i].index).config = {\n            axisRanges: yAxes[i].axisRanges\n          };\n        }\n      }\n\n      if (xAxes.length) {\n        for (var i = 0, len = xAxes.length; i < len; i++) {\n          this.xAxes.getIndex(xAxes[i].index).config = {\n            axisRanges: xAxes[i].axisRanges\n          };\n        }\n      }\n    }\n  };\n  /**\n   * This function is used to sort element's JSON config properties, so that\n   * some properties that absolutely need to be processed last, can be put at\n   * the end.\n   *\n   * @ignore Exclude from docs\n   * @param a  Element 1\n   * @param b  Element 2\n   * @return Sorting number\n   */\n\n\n  XYChart.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    } // Must come last\n    else if (a == \"scrollbarX\") {\n        return 1;\n      } else if (b == \"scrollbarX\") {\n        return -1;\n      } else if (a == \"scrollbarY\") {\n        return 1;\n      } else if (b == \"scrollbarY\") {\n        return -1;\n      } else if (a == \"cursor\") {\n        return 1;\n      } else if (b == \"cursor\") {\n        return -1;\n      } else if (a == \"series\") {\n        return 1;\n      } else if (b == \"series\") {\n        return -1;\n      } else {\n        return _super.prototype.configOrder.call(this, a, b);\n      }\n  };\n  /**\n   * Creates a new Series of type suitable for this chart.\n   *\n   * @return New series\n   */\n\n\n  XYChart.prototype.createSeries = function () {\n    return new XYSeries();\n  };\n\n  Object.defineProperty(XYChart.prototype, \"zoomOutButton\", {\n    /**\n     * @return Zoom out button\n     */\n    get: function get() {\n      return this._zoomOutButton;\n    },\n\n    /**\n     * A [[Button]] element that is used for zooming out the chart.\n     *\n     * This button appears only when chart is zoomed in, and disappears\n     * autoamatically when it is zoome dout.\n     *\n     * @param button  Zoom out button\n     */\n    set: function set(button) {\n      var _this = this;\n\n      this._zoomOutButton = button;\n\n      if (button) {\n        button.events.on(\"hit\", function () {\n          _this.zoomAxes(_this.xAxes, {\n            start: 0,\n            end: 1\n          });\n\n          _this.zoomAxes(_this.yAxes, {\n            start: 0,\n            end: 1\n          });\n        }, undefined, false);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Copies all parameters from another [[XYChart]].\n   *\n   * @param source Source XYChart\n   */\n\n  XYChart.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    source.xAxes.each(function (axis) {\n      _this.xAxes.push(axis.clone());\n    });\n    source.yAxes.each(function (axis) {\n      _this.yAxes.push(axis.clone());\n    }); //this.xAxes.copyFrom(source.xAxes);\n    //this.yAxes.copyFrom(source.yAxes);\n\n    _super.prototype.copyFrom.call(this, source); //this.zoomOutButton.copyFrom(source.zoomOutButton);\n\n\n    if (source.cursor) {\n      this.cursor = source.cursor.clone();\n    }\n\n    if (source.scrollbarX) {\n      this.scrollbarX = source.scrollbarX.clone();\n    }\n\n    if (source.scrollbarY) {\n      this.scrollbarY = source.scrollbarY.clone();\n    } //@todo copy all container properties\n\n  };\n  /**\n   * @ignore\n   */\n\n\n  XYChart.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n\n    var scrollbarX = this.scrollbarX;\n\n    if (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\n      scrollbarX.scrollbarChart.disposeData();\n    }\n\n    var scrollbarY = this.scrollbarY;\n\n    if (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\n      scrollbarY.scrollbarChart.disposeData();\n    }\n\n    this.xAxes.each(function (axis) {\n      axis.disposeData();\n    });\n    this.yAxes.each(function (axis) {\n      axis.disposeData();\n    });\n  };\n  /**\n   * Adds one or several (array) of data items to the existing data.\n   *\n   * @param rawDataItem One or many raw data item objects\n   */\n\n\n  XYChart.prototype.addData = function (rawDataItem, removeCount) {\n    _super.prototype.addData.call(this, rawDataItem, removeCount);\n\n    if (this.scrollbarX instanceof XYChartScrollbar) {\n      this.scrollbarX.scrollbarChart.addData(rawDataItem, removeCount);\n    }\n\n    if (this.scrollbarY instanceof XYChartScrollbar) {\n      this.scrollbarY.scrollbarChart.addData(rawDataItem, removeCount);\n    }\n  };\n  /**\n   * @param  value  Tap to activate?\n   */\n\n\n  XYChart.prototype.setTapToActivate = function (value) {\n    _super.prototype.setTapToActivate.call(this, value);\n\n    if (this.cursor) {\n      this.cursor.interactions.isTouchProtected = value;\n      this.plotContainer.interactions.isTouchProtected = value;\n    }\n  };\n\n  XYChart.prototype.handleTapToActivate = function () {\n    _super.prototype.handleTapToActivate.call(this);\n\n    if (this.cursor) {\n      this.cursor.interactions.isTouchProtected = false;\n      this.plotContainer.interactions.isTouchProtected = false;\n    }\n  };\n\n  XYChart.prototype.handleTapToActivateDeactivation = function () {\n    _super.prototype.handleTapToActivateDeactivation.call(this);\n\n    if (this.cursor) {\n      this.cursor.interactions.isTouchProtected = true;\n      this.plotContainer.interactions.isTouchProtected = true;\n    }\n  };\n\n  return XYChart;\n}(SerialChart);\n\nexport { XYChart };\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n *\n * @ignore\n */\n\nregistry.registeredClasses[\"XYChart\"] = XYChart;\n/**\n * Add default responsive rules\n */\n\n/**\n * Remove horizontal scrollbar on narrow charts.\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function state(target, stateId) {\n    if (target instanceof XYChart && target.scrollbarX) {\n      var state = target.states.create(stateId);\n      var sbstate = target.scrollbarX.states.create(stateId);\n      sbstate.properties.disabled = true;\n      return state;\n    }\n\n    return null;\n  }\n});\n/**\n * Remove vertical scrollbar on short charts.\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function state(target, stateId) {\n    if (target instanceof XYChart && target.scrollbarY) {\n      var state = target.states.create(stateId);\n      var sbstate = target.scrollbarY.states.create(stateId);\n      sbstate.properties.disabled = true;\n      return state;\n    }\n\n    return null;\n  }\n});","map":{"version":3,"sources":["../../../../../src/.internal/charts/types/XYChart.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, Disposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\r\n\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\tmouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Specifies if chart should arrange series tooltips so that they won't\r\n\t * overlap.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tarrangeTooltips?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\t\tthis.arrangeTooltips = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartContainer.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartContainer.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartContainer.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\t// Create transparend background for plot container so that hover works\r\n\t\t// on all of it\r\n\t\tplotCont.background.fillOpacity = 0;\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\t// must go below plot container\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tthis.zoomOutButton.exportable = false;\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\tif (!axis.renderer) {\r\n\t\t\taxis.renderer = new this._axisRendererX();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.events.on(\"startendchanged\", this.handleXAxisRangeChange, this, false);\r\n\t\t//axis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\t\tif (!axis.renderer) {\r\n\t\t\taxis.renderer = new this._axisRendererY();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.events.on(\"startendchanged\", this.handleYAxisRangeChange, this, false);\r\n\t\t//axis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tprotected toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param scrollbar  Scrollbar instance\r\n\t * @param range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes  A list of axes\r\n\t * @return Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tlet axisStart = axis.start;\r\n\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\tstart = axisStart;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\tend = axisEnd;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 10;\r\n\r\n\t\taxis.addDisposer(new Disposer(() => {\r\n\t\t\tthis.dataUsers.removeValue(axis);\r\n\t\t}))\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\taxis.invalidateDataItems();\r\n\t\t\t\tthis.updateSeriesMasks();\r\n\t\t\t}\r\n\t\t}, axis, false);\r\n\t}\r\n\r\n\t/**\r\n\t * This is done because for some reason IE doesn't change mask if path of a\r\n\t * mask changes.\r\n\t */\r\n\tprotected updateSeriesMasks(): void {\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tlet mask = series.mainContainer.mask;\r\n\t\t\t\tseries.mainContainer.mask = undefined;\r\n\t\t\t\tseries.mainContainer.mask = mask;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleAxisRemoval(event: IListEvents<Axis>[\"removed\"]) {\r\n\t\tlet axis = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\r\n\t\tif (axis.autoDispose) {\r\n\t\t\taxis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.handleSeriesAdded(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\r\n\t\t\tif (this.xAxes.length == 0 || this.yAxes.length == 0) {\r\n\t\t\t\tregistry.removeFromInvalidComponents(series);\r\n\t\t\t\tseries.dataInvalid = false;\r\n\t\t\t}\r\n\r\n\t\t\t$utils.used(series.xAxis); // this is enough to get axis, handled in getter\r\n\t\t\t$utils.used(series.yAxis); // this is enough to get axis, handled in getter\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (series.stroke == undefined) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.shouldClone = false;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this, false);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this, false);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\r\n\t\t\t\tif (this.tapToActivate) {\r\n\t\t\t\t\t// We need this in order to setup cursor properly\r\n\t\t\t\t\tthis.setTapToActivate(this.tapToActivate);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new [[Cursor]] suitable for this chart type.\r\n\t *\r\n\t * @return New cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new XYCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tlet cursor = this.cursor;\r\n\r\n\t\tif (cursor.visible && !cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\r\n\t\t\tlet exceptAxis: Axis;\r\n\t\t\tlet snapToSeries = cursor.snapToSeries;\r\n\t\t\tif (snapToSeries) {\r\n\t\t\t\tif (snapToSeries.baseAxis == snapToSeries.xAxis) {\r\n\t\t\t\t\texceptAxis = snapToSeries.yAxis;\r\n\t\t\t\t}\r\n\t\t\t\tif (snapToSeries.baseAxis == snapToSeries.yAxis) {\r\n\t\t\t\t\texceptAxis = snapToSeries.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._seriesPoints = [];\r\n\t\t\tthis.showAxisTooltip(this.xAxes, xPosition, exceptAxis);\r\n\t\t\tthis.showAxisTooltip(this.yAxes, yPosition, exceptAxis);\r\n\t\t\tthis.sortSeriesTooltips(this._seriesPoints);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Sprite>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tsprite.hideTooltip(0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position?: IPoint): void {\r\n\r\n\t\tif (!position) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.hideTooltip();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\t//if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n\r\n\t\t\tif ((series.xAxis instanceof DateAxis && series.xAxis.snapTooltip) || (series.yAxis instanceof DateAxis && series.yAxis.snapTooltip)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\t\tif (point) {\r\n\t\t\t\t\tseries.tooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight });\r\n\t\t\t\t\tseriesPoints.push({ series: series, point: point });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//}\r\n\t\t});\r\n\r\n\t\tif (this.arrangeTooltips) {\r\n\t\t\tthis.sortSeriesTooltips(seriesPoints);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic sortSeriesTooltips(seriesPoints: { point: IPoint, series: XYSeries }[]) {\r\n\r\n\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\tlet sum = 0;\r\n\t\tlet filteredSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\tlet point = seriesPoint.point;\r\n\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\tfilteredSeriesPoints.push({ point: point, series: seriesPoint.series });\r\n\t\t\t\tsum += point.y;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tseriesPoints = filteredSeriesPoints;\r\n\r\n\t\tseriesPoints.sort((a, b) => {\r\n\t\t\tif (a.point.y > b.point.y) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse if (a.point.y < b.point.y) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet averageY = sum / seriesPoints.length;\r\n\t\tlet maxY = $utils.svgPointToDocument({ x: 0, y: 0 }, this.svgContainer.SVGContainer).y;\r\n\r\n\t\tif (seriesPoints.length > 0) {\r\n\r\n\t\t\tlet top = topLeft.y;\r\n\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\t// TODO is this needed ?\r\n\t\t\t$utils.spritePointToDocument({ x: 0, y: top }, this);\r\n\r\n\t\t\tlet dropped = false;\r\n\r\n\t\t\tif (averageY > top + (bottom - top) / 2) {\r\n\t\t\t\tlet nextHeight = bottom;\r\n\t\t\t\tfor (let i = seriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\r\n\t\t\t\t\ttooltip.setBounds({ x: 0, y: -maxY, width: this.pixelWidth, height: nextHeight + maxY });\r\n\r\n\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttooltip.toBack();\r\n\t\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\r\n\t\t\t\t\tif (nextHeight < -maxY) {\r\n\t\t\t\t\t\tdropped = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (averageY <= top + (bottom - top) / 2 || dropped) {\r\n\t\t\t\tlet nextY = top;\r\n\t\t\t\tfor (let i = 0, len = seriesPoints.length; i < len; i++) {\r\n\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttooltip.toBack();\r\n\r\n\t\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes      List of axes to show tooltip on\r\n\t * @param position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number, except?: Axis): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (axis != except) {\r\n\t\t\t\tif (this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n\t\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n\t *\r\n\t * @param axis   Axis\r\n\t * @param range  Range\r\n\t * @return Modified range\r\n\t */\r\n\tpublic getUpdatedRange(axis: Axis<this[\"_xAxisRendererType\"]>, range: IRange): IRange {\r\n\r\n\t\tif (!axis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\trange = $math.invertRange(range);\r\n\t\t}\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif (xRange && this.xAxes.length > 0) {\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif (yRange && this.yAxes.length > 0) {\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.xAxes);\r\n\r\n\t\t\tlet difference = (panStartRange.end - panStartRange.start);\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\r\n\t\t\trange = this.zoomAxes(this.xAxes, range);\r\n\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\t\t\trange = this.zoomAxes(this.yAxes, range);\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param axes       List of axes to zoom\r\n\t * @param range      Range of values to zoom to (0-1)\r\n\t * @param instantly  If set to `true` will skip zooming animation\r\n\t * @return Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis<this[\"_xAxisRendererType\"]>>, range: IRange, instantly?: boolean, round?: boolean, declination?: number): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\r\n\t\tthis.showSeriesTooltip(); // hides\r\n\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\trange = $math.invertRange(range);\r\n\t\t\t\t}\r\n\r\n\t\t\t\taxis.hideTooltip(0);\r\n\r\n\t\t\t\tif (round) {\r\n\t\t\t\t\t//let diff = range.end - range.start;\r\n\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0);\r\n\t\t\t\t\trange.end = axis.roundPosition(range.end + 0.0001, 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly, declination);\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trealRange = axisRange;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if chart should arrange series tooltips so that they would not\r\n\t * overlap.\r\n\t *\r\n\t * If set to `true` (default), the chart will adjust vertical positions of\r\n\t * all simultaneously shown tooltips to avoid overlapping.\r\n\t *\r\n\t * However, if you have a vertically-arranged chart, it might not make sense,\r\n\t * because tooltips would most probably not be aligned horizontally. In this\r\n\t * case it would probably be a good idea to set this setting to `false`.\r\n\t *\r\n\t * @default true\r\n\t * @param value Arrange tooltips?\r\n\t */\r\n\tpublic set arrangeTooltips(value: boolean) {\r\n\t\tthis.setPropertyValue(\"arrangeTooltips\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Arrange tooltips?\r\n\t */\r\n\tpublic get arrangeTooltips(): boolean {\r\n\t\treturn this.getPropertyValue(\"arrangeTooltips\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\t\tlet shift = event.shift.y;\r\n\r\n\t\tlet rangeX: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tlet rangeY: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tlet shiftStep = 0.05;\r\n\r\n\t\tlet maxPanOut = 0;\r\n\r\n\t\tlet mouseWheelBehavior = this.mouseWheelBehavior;\r\n\r\n\t\tif (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n\r\n\t\t\tlet differenceX = rangeX.end - rangeX.start;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartX <= 0) {\r\n\t\t\t\tnewEndX = newStartX + differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndX >= 1) {\r\n\t\t\t\tnewStartX = newEndX - differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n\t\t\tshift *= -1;\r\n\t\t\tlet differenceY = rangeY.end - rangeY.start;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartY <= 0) {\r\n\t\t\t\tnewEndY = newStartY + differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndY >= 1) {\r\n\t\t\t\tnewStartY = newEndY - differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationX = plotPoint.x / plotContainer.maxWidth;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * shift / 100 * locationX);\r\n\t\t\tnewStartX = Math.min(newStartX, rangeX.start + (rangeX.end - rangeX.start) * locationX - shiftStep * 0.05);\r\n\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n\t\t\tnewEndX = Math.max(newEndX, rangeX.start + (rangeX.end - rangeX.start) * locationX + shiftStep * 0.05);\r\n \r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationY = plotPoint.y / plotContainer.maxHeight;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * shift / 100 * (1 - locationY));\r\n\t\t\tnewStartY = Math.min(newStartY, rangeY.start + (rangeY.end - rangeY.start) * locationY - shiftStep * 0.05);\r\n\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY, 1 + maxPanOut);\r\n \t\t\tnewEndY = Math.max(newEndY, rangeY.start + (rangeY.end - rangeY.start) * locationY + shiftStep * 0.05);\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * @default \"none\"\r\n\t * @param mouse wheel behavior\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param fields  Array of date fields\r\n\t * @return Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param value  Array of number fields\r\n\t * @return Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif (yAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = yAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (xAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = xAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"cursor\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"cursor\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\r\n\t\tsource.xAxes.each((axis) => {\r\n\t\t\tthis.xAxes.push(axis.clone());\r\n\t\t})\r\n\r\n\t\tsource.yAxes.each((axis) => {\r\n\t\t\tthis.yAxes.push(axis.clone());\r\n\t\t})\r\n\r\n\t\t//this.xAxes.copyFrom(source.xAxes);\r\n\t\t//this.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\t//this.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\r\n\t\tif (source.cursor) {\r\n\t\t\tthis.cursor = source.cursor.clone();\r\n\t\t}\r\n\r\n\t\tif (source.scrollbarX) {\r\n\t\t\tthis.scrollbarX = source.scrollbarX.clone();\r\n\t\t}\r\n\r\n\t\tif (source.scrollbarY) {\r\n\t\t\tthis.scrollbarY = source.scrollbarY.clone();\r\n\t\t}\r\n\t\t//@todo copy all container properties\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\r\n\t\tlet scrollbarX = this.scrollbarX;\r\n\t\tif (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarX.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tlet scrollbarY = this.scrollbarY;\r\n\t\tif (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarY.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxes.each((axis) => {\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number): void {\r\n\t\tsuper.addData(rawDataItem, removeCount);\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.scrollbarX.scrollbarChart.addData(rawDataItem, removeCount);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.scrollbarY.scrollbarChart.addData(rawDataItem, removeCount);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param  value  Tap to activate?\r\n\t */\r\n\tprotected setTapToActivate(value: boolean): void {\r\n\t\tsuper.setTapToActivate(value);\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = value;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = value;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleTapToActivate(): void {\r\n\t\tsuper.handleTapToActivate();\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = false;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = false;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleTapToActivateDeactivation(): void {\r\n\t\tsuper.handleTapToActivateDeactivation();\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = true;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = true;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Remove horizontal scrollbar on narrow charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarX.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove vertical scrollbar on short charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarY.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}