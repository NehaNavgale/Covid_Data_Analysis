{"ast":null,"code":"/**\n * This functionality is related to the HTML wrapper that houses `<svg>` tag.\n */\nimport { Disposer } from \"../utils/Disposer\";\nimport { Popup } from \"../elements/Popup\";\nimport { Modal } from \"../elements/Modal\";\nimport { ListTemplate, ListDisposer } from \"../utils/List\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $dom from \"../utils/DOM\";\nimport * as $array from \"../utils/Array\";\nimport * as $type from \"../utils/Type\";\nimport ResizeSensor from \"css-element-queries/src/ResizeSensor\";\n/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * A array of all SVG Containers (one SVG container per chart instance).\n *\n * @ignore Exclude from docs\n */\n\nexport var svgContainers = [];\n/**\n * A class used to create an HTML wrapper for the SVG contents.\n */\n\nvar SVGContainer =\n/** @class */\nfunction () {\n  /**\n   * Constructor\n   *\n   * * Creates an HTML wrapper for SVG\n   */\n  function SVGContainer(htmlElement) {\n    var _this = this;\n    /**\n     * Indicates if this object has already been deleted. Any\n     * destruction/disposal code should take this into account when deciding\n     * wheter to run potentially costly disposal operations if they already have\n     * been run.\n     */\n\n\n    this._disposed = false;\n    /**\n     * If this component is in a separate HTML container, `autoResize` means the\n     * module will constantly measure container's size and adopt contents to it.\n     */\n\n    this.autoResize = true;\n    /**\n     * Holds list of references to [[Sprite]] objects that should not be exported\n     * when exporting chart to an image.\n     *\n     * @ignore\n     */\n\n    this.nonExportableSprites = [];\n    /**\n     * List of objects that need to be disposed when this one is disposed.\n     */\n\n    this._disposers = [];\n    this.cssScale = 1; // Log parent HTML element\n\n    this.htmlElement = htmlElement;\n\n    var callback = function callback() {\n      _this.measure();\n    };\n\n    this.resizeSensor = new ResizeSensor(htmlElement, callback);\n\n    this._disposers.push(new Disposer(function () {\n      _this.resizeSensor.detach(callback);\n    })); // Adds to containers array\n\n\n    svgContainers.push(this);\n    /**\n     * Create child div for the container - it will have svg node\n     * It might seem that this container is not necessay, however having it solves\n     * a problems with mouse position detection and some other.\n     */\n\n    var svgContainer = document.createElement(\"div\");\n    var style = svgContainer.style;\n    style.width = \"100%\";\n    style.height = \"100%\";\n    style.position = \"relative\";\n    htmlElement.appendChild(svgContainer);\n    this.SVGContainer = svgContainer;\n  }\n  /**\n   * Measures size of parent HTML element.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  SVGContainer.prototype.measure = function () {\n    var width = $utils.width(this.htmlElement);\n    var height = $utils.height(this.htmlElement);\n    var container = this.container;\n\n    if (container) {\n      if (this.width != width || this.height != height) {\n        this.width = width;\n        this.height = height;\n\n        if (width > 0) {\n          container.maxWidth = width;\n        }\n\n        if (height > 0) {\n          container.maxHeight = height;\n        }\n\n        $dom.fixPixelPerfect(this.SVGContainer);\n      }\n\n      if (!container.maxWidth) {\n        container.maxWidth = 0;\n      }\n\n      if (!container.maxHeight) {\n        container.maxHeight = 0;\n      }\n\n      this.cssScale = 1;\n      this.checkTransform(this.htmlElement);\n    }\n  };\n\n  Object.defineProperty(SVGContainer.prototype, \"container\", {\n    /**\n     * @return Container\n     */\n    get: function get() {\n      return this._container;\n    },\n\n    /**\n     * A [[Container]] element which is placed into container.\n     *\n     * @param container  Container\n     */\n    set: function set(container) {\n      this._container = container;\n      this.measure();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns if this object has been already been disposed.\n   *\n   * @return Is disposed?\n   */\n\n  SVGContainer.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n  /**\n   * Removes this container from SVG container list in system, which\n   * effectively disables size change monitoring for it.\n   */\n\n\n  SVGContainer.prototype.dispose = function () {\n    if (!this._disposed) {\n      $array.remove(svgContainers, this);\n    }\n\n    $array.each(this._disposers, function (item) {\n      item.dispose();\n    });\n  };\n\n  Object.defineProperty(SVGContainer.prototype, \"hideOverflow\", {\n    /**\n     * Indicates if chart container should have its style set\n     * to `overflow: hidden`.\n     *\n     * Normally, we don't want that, so that certain elements, such as tooltips,\n     * would be able to go outside chart area.\n     *\n     * There is one issue though. Some browsers ignore SVG masks and would\n     * display scrollbars if chart elements, that go outside chart area extend\n     * outside window.\n     *\n     * This is especially true for [[MapChart]], which can have its elements\n     * extend very widely when zoomed in. Even if those parts are not visible\n     * because of SVG masks, some browsers might still display window scrollbars.\n     *\n     * This is why we set this setting to `true` in [[MapChart]].\n     *\n     * Other charts use default of `false`.\n     */\n    set: function set(value) {\n      if (value) {\n        this.SVGContainer.style.overflow = \"hidden\";\n      } else {\n        this.SVGContainer.style.overflow = \"\";\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SVGContainer.prototype, \"modal\", {\n    /**\n     * ==========================================================================\n     * MODAL/POPUP RELATED STUFF\n     * ==========================================================================\n     * @hidden\n     */\n\n    /**\n     * Returns a [[Modal]] instance, associated with this chart.\n     * (elements top parent)\n     *\n     * Accessing modal does not make it appear. To make a modal appear, use\n     * `showModal()` method.\n     *\n     * @see {@link Modal} for more information about using Modal windows\n     * @return Modal instance\n     */\n    get: function get() {\n      if (!$type.hasValue(this._modal)) {\n        // Create new modal\n        this._modal = new Modal();\n        this._modal.container = this.SVGContainer; // Add to disposers\n\n        this._disposers.push(this._modal);\n      }\n\n      return this._modal;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Opens a modal window with specific content (`text` parameter) and,\n   * optionally, `title`.\n   *\n   * The `text` parameter can contain HTML content.\n   *\n   * @see {@link Modal} for more information about using Modal windows\n   * @param text   Modal contents\n   * @param title  Title for the modal window\n   */\n\n  SVGContainer.prototype.openModal = function (text, title) {\n    // Hide previous modal\n    this.closeModal(); // Create modal\n\n    var modal = this.modal;\n    modal.content = text;\n    modal.readerTitle = title;\n    modal.open();\n    return modal;\n  };\n  /**\n   * Hides modal window if there is one currently open.\n   */\n\n\n  SVGContainer.prototype.closeModal = function () {\n    if (this._modal) {\n      this.modal.close();\n    }\n  };\n\n  Object.defineProperty(SVGContainer.prototype, \"popups\", {\n    /**\n     * A list of popups for this chart.\n     *\n     * @return Popups\n     */\n    get: function get() {\n      if (!$type.hasValue(this._popups)) {\n        // Create popup template\n        var popupTemplate = new Popup();\n        popupTemplate.container = this.SVGContainer; // Create the list\n\n        this._popups = new ListTemplate(popupTemplate); // Add to disposers\n\n        this._disposers.push(new ListDisposer(this._popups));\n\n        this._disposers.push(this._popups.template);\n      }\n\n      return this._popups;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Creates, opens, and returns a new [[Popup]] window.\n   *\n   * `text` can be any valid HTML.\n   *\n   * `title` is currently not supported.\n   *\n   * @param text   Popup contents\n   * @param title  Popup title\n   * @return Popup instance\n   */\n\n  SVGContainer.prototype.openPopup = function (text, title) {\n    var popup = this.popups.create();\n    popup.content = text;\n\n    if ($type.hasValue(title)) {\n      popup.title = title;\n    }\n\n    popup.open();\n    return popup;\n  };\n  /**\n   * Closes all currently open popup windows\n   */\n\n\n  SVGContainer.prototype.closeAllPopups = function () {\n    this.popups.each(function (popup) {\n      popup.close();\n    });\n  };\n\n  SVGContainer.prototype.checkTransform = function (div) {\n    if (window.getComputedStyle) {\n      if (div && div.style) {\n        var style = window.getComputedStyle(div, null);\n\n        if (style) {\n          var matrix = style.getPropertyValue(\"-webkit-transform\") || style.getPropertyValue(\"-moz-transform\") || style.getPropertyValue(\"-ms-transform\") || style.getPropertyValue(\"-o-transform\") || style.getPropertyValue(\"transform\");\n\n          if (matrix && matrix !== \"none\") {\n            var values = matrix.split('(')[1].split(')')[0].split(',');\n            var a = Number(values[0]);\n            var b = Number(values[1]);\n            var scale = Math.sqrt(a * a + b * b);\n\n            if (!isNaN(scale)) {\n              this.cssScale *= scale;\n            }\n          }\n        }\n      }\n\n      if (div.parentNode && div.parentNode instanceof HTMLElement) {\n        this.checkTransform(div.parentNode);\n      }\n    }\n  };\n\n  return SVGContainer;\n}();\n\nexport { SVGContainer };","map":{"version":3,"sources":["../../../../../src/.internal/core/rendering/SVGContainer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * This functionality is related to the HTML wrapper that houses `<svg>` tag.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../Container\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { IDisposer, Disposer } from \"../utils/Disposer\";\r\nimport { Popup } from \"../elements/Popup\";\r\nimport { Modal } from \"../elements/Modal\";\r\nimport { ListTemplate, ListDisposer } from \"../utils/List\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $type from \"../utils/Type\";\r\nimport ResizeSensor from \"css-element-queries/src/ResizeSensor\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n\r\n/**\r\n * A array of all SVG Containers (one SVG container per chart instance).\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport const svgContainers: Array<SVGContainer> = [];\r\n\r\n/**\r\n * A class used to create an HTML wrapper for the SVG contents.\r\n */\r\nexport class SVGContainer implements IDisposer {\r\n\r\n\t/**\r\n\t * Indicates if this object has already been deleted. Any\r\n\t * destruction/disposal code should take this into account when deciding\r\n\t * wheter to run potentially costly disposal operations if they already have\r\n\t * been run.\r\n\t */\r\n\tprotected _disposed: boolean = false;\r\n\r\n\t/**\r\n\t * Width of HTML element.\r\n\t */\r\n\tpublic width: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * Height of HTML element.\r\n\t */\r\n\tpublic height: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * A [[Container]] element which is placed into container.\r\n\t */\r\n\tprotected _container: $type.Optional<Container>;\r\n\r\n\t/**\r\n\t * A parent HTML container that SVG wrapper element is placed in.\r\n\t */\r\n\tpublic htmlElement: HTMLElement;\r\n\r\n\t/**\r\n\t * If this component is in a separate HTML container, `autoResize` means the\r\n\t * module will constantly measure container's size and adopt contents to it.\r\n\t */\r\n\tpublic autoResize: Boolean = true;\r\n\r\n\t/**\r\n\t * A `<div>` element which acts as a wrapper/holder for the SVG element.\r\n\t */\r\n\tpublic SVGContainer: HTMLDivElement;\r\n\r\n\t/**\r\n\t * A reference to ResizeSensor object which monitors changes of div size.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic resizeSensor: ResizeSensor;\r\n\r\n\t/**\r\n\t * Holds list of references to [[Sprite]] objects that should not be exported\r\n\t * when exporting chart to an image.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic nonExportableSprites: Sprite[] = [];\r\n\r\n\t/**\r\n\t * Holds [[Modal]] object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _modal: $type.Optional<Modal>;\r\n\r\n\t/**\r\n\t * Holds [[Popup]] objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _popups: $type.Optional<ListTemplate<Popup>>;\r\n\r\n\t/**\r\n\t * List of objects that need to be disposed when this one is disposed.\r\n\t */\r\n\tprotected _disposers: Array<IDisposer> = [];\r\n\r\n\tpublic cssScale: number = 1;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * * Creates an HTML wrapper for SVG\r\n\t */\r\n\tconstructor(htmlElement: HTMLElement) {\r\n\r\n\t\t// Log parent HTML element\r\n\t\tthis.htmlElement = htmlElement;\r\n\r\n\t\tconst callback = () => { this.measure() };\r\n\r\n\t\tthis.resizeSensor = new ResizeSensor(htmlElement, callback);\r\n\r\n\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\tthis.resizeSensor.detach(callback);\r\n\t\t}));\r\n\r\n\t\t// Adds to containers array\r\n\t\tsvgContainers.push(this);\r\n\r\n\t\t/**\r\n\t\t * Create child div for the container - it will have svg node\r\n\t\t * It might seem that this container is not necessay, however having it solves\r\n\t\t * a problems with mouse position detection and some other.\r\n\t\t */\r\n\t\tlet svgContainer = document.createElement(\"div\");\r\n\t\tlet style = svgContainer.style;\r\n\t\tstyle.width = \"100%\";\r\n\t\tstyle.height = \"100%\";\r\n\t\tstyle.position = \"relative\";\r\n\t\thtmlElement.appendChild(svgContainer);\r\n\r\n\t\tthis.SVGContainer = svgContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Measures size of parent HTML element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measure(): void {\r\n\t\tlet width: number = $utils.width(this.htmlElement);\r\n\t\tlet height: number = $utils.height(this.htmlElement);\r\n\t\tlet container = this.container;\r\n\t\tif (container) {\r\n\t\t\tif (this.width != width || this.height != height) {\r\n\t\t\t\tthis.width = width;\r\n\t\t\t\tthis.height = height;\r\n\r\n\t\t\t\tif (width > 0) {\r\n\t\t\t\t\tcontainer.maxWidth = width;\r\n\t\t\t\t}\r\n\t\t\t\tif (height > 0) {\r\n\t\t\t\t\tcontainer.maxHeight = height;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$dom.fixPixelPerfect(this.SVGContainer);\r\n\t\t\t}\r\n\r\n\t\t\tif (!container.maxWidth) {\r\n\t\t\t\tcontainer.maxWidth = 0;\r\n\t\t\t}\r\n\t\t\tif (!container.maxHeight) {\r\n\t\t\t\tcontainer.maxHeight = 0;\r\n\t\t\t}\r\n\t\t\tthis.cssScale = 1;\r\n\t\t\tthis.checkTransform(this.htmlElement);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Container]] element which is placed into container.\r\n\t *\r\n\t * @param container  Container\r\n\t */\r\n\tpublic set container(container: $type.Optional<Container>) {\r\n\t\tthis._container = container;\r\n\t\tthis.measure();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Container\r\n\t */\r\n\tpublic get container(): $type.Optional<Container> {\r\n\t\treturn this._container;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if this object has been already been disposed.\r\n\t *\r\n\t * @return Is disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._disposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes this container from SVG container list in system, which\r\n\t * effectively disables size change monitoring for it.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\t$array.remove(svgContainers, this);\r\n\t\t}\r\n\r\n\t\t$array.each(this._disposers, (item) => {\r\n\t\t\titem.dispose();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if chart container should have its style set\r\n\t * to `overflow: hidden`.\r\n\t *\r\n\t * Normally, we don't want that, so that certain elements, such as tooltips,\r\n\t * would be able to go outside chart area.\r\n\t *\r\n\t * There is one issue though. Some browsers ignore SVG masks and would\r\n\t * display scrollbars if chart elements, that go outside chart area extend\r\n\t * outside window.\r\n\t *\r\n\t * This is especially true for [[MapChart]], which can have its elements\r\n\t * extend very widely when zoomed in. Even if those parts are not visible\r\n\t * because of SVG masks, some browsers might still display window scrollbars.\r\n\t *\r\n\t * This is why we set this setting to `true` in [[MapChart]].\r\n\t *\r\n\t * Other charts use default of `false`.\r\n\t */\r\n\tpublic set hideOverflow(value: boolean) {\r\n\t\tif (value) {\r\n\t\t\tthis.SVGContainer.style.overflow = \"hidden\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.SVGContainer.style.overflow = \"\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * MODAL/POPUP RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns a [[Modal]] instance, associated with this chart.\r\n\t * (elements top parent)\r\n\t *\r\n\t * Accessing modal does not make it appear. To make a modal appear, use\r\n\t * `showModal()` method.\r\n\t *\r\n\t * @see {@link Modal} for more information about using Modal windows\r\n\t * @return Modal instance\r\n\t */\r\n\tpublic get modal(): Modal {\r\n\r\n\t\tif (!$type.hasValue(this._modal)) {\r\n\r\n\t\t\t// Create new modal\r\n\t\t\tthis._modal = new Modal();\r\n\t\t\tthis._modal.container = this.SVGContainer;\r\n\r\n\t\t\t// Add to disposers\r\n\t\t\tthis._disposers.push(this._modal);\r\n\t\t}\r\n\t\treturn this._modal;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Opens a modal window with specific content (`text` parameter) and,\r\n\t * optionally, `title`.\r\n\t *\r\n\t * The `text` parameter can contain HTML content.\r\n\t *\r\n\t * @see {@link Modal} for more information about using Modal windows\r\n\t * @param text   Modal contents\r\n\t * @param title  Title for the modal window\r\n\t */\r\n\tpublic openModal(text: string, title?: string): Modal {\r\n\r\n\t\t// Hide previous modal\r\n\t\tthis.closeModal();\r\n\r\n\t\t// Create modal\r\n\t\tlet modal = this.modal;\r\n\t\tmodal.content = text;\r\n\t\tmodal.readerTitle = title;\r\n\t\tmodal.open();\r\n\r\n\t\treturn modal;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides modal window if there is one currently open.\r\n\t */\r\n\tpublic closeModal(): void {\r\n\t\tif (this._modal) {\r\n\t\t\tthis.modal.close();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of popups for this chart.\r\n\t *\r\n\t * @return Popups\r\n\t */\r\n\tpublic get popups(): ListTemplate<Popup> {\r\n\r\n\t\tif (!$type.hasValue(this._popups)) {\r\n\r\n\t\t\t// Create popup template\r\n\t\t\tlet popupTemplate = new Popup();\r\n\t\t\tpopupTemplate.container = this.SVGContainer;\r\n\r\n\t\t\t// Create the list\r\n\t\t\tthis._popups = new ListTemplate(popupTemplate);\r\n\r\n\t\t\t// Add to disposers\r\n\t\t\tthis._disposers.push(new ListDisposer(this._popups));\r\n\t\t\tthis._disposers.push(this._popups.template);\r\n\t\t}\r\n\t\treturn this._popups;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates, opens, and returns a new [[Popup]] window.\r\n\t *\r\n\t * `text` can be any valid HTML.\r\n\t *\r\n\t * `title` is currently not supported.\r\n\t *\r\n\t * @param text   Popup contents\r\n\t * @param title  Popup title\r\n\t * @return Popup instance\r\n\t */\r\n\tpublic openPopup(text: string, title?: string): Popup {\r\n\t\tlet popup = this.popups.create();\r\n\t\tpopup.content = text;\r\n\t\tif ($type.hasValue(title)) {\r\n\t\t\tpopup.title = title;\r\n\t\t}\r\n\t\tpopup.open();\r\n\t\treturn popup;\r\n\t}\r\n\r\n\t/**\r\n\t * Closes all currently open popup windows\r\n\t */\r\n\tpublic closeAllPopups(): void {\r\n\t\tthis.popups.each((popup) => {\r\n\t\t\tpopup.close();\r\n\t\t});\r\n\t}\r\n\r\n\r\n\tprotected checkTransform(div: HTMLElement) {\r\n\t\tif (window.getComputedStyle) {\r\n\t\t\tif (div && div.style) {\r\n\t\t\t\tlet style = window.getComputedStyle(div, null);\r\n\t\t\t\tif (style) {\r\n\t\t\t\t\tlet matrix = style.getPropertyValue(\"-webkit-transform\") ||\r\n\t\t\t\t\t\tstyle.getPropertyValue(\"-moz-transform\") ||\r\n\t\t\t\t\t\tstyle.getPropertyValue(\"-ms-transform\") ||\r\n\t\t\t\t\t\tstyle.getPropertyValue(\"-o-transform\") ||\r\n\t\t\t\t\t\tstyle.getPropertyValue(\"transform\");\r\n\r\n\t\t\t\t\tif (matrix && matrix !== \"none\") {\r\n\t\t\t\t\t\tlet values = matrix.split('(')[1].split(')')[0].split(',');\r\n\t\t\t\t\t\tlet a = Number(values[0]);\r\n\t\t\t\t\t\tlet b = Number(values[1]);\r\n\r\n\t\t\t\t\t\tlet scale = Math.sqrt(a * a + b * b);\r\n\r\n\t\t\t\t\t\tif (!isNaN(scale)) {\r\n\t\t\t\t\t\t\tthis.cssScale *= scale;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (div.parentNode && div.parentNode instanceof HTMLElement) {\r\n\t\t\t\tthis.checkTransform(div.parentNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}