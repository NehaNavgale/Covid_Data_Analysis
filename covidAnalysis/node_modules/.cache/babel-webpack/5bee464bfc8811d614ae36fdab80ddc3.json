{"ast":null,"code":"/**\n * Base class for all Axis\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\n\nimport { Component } from \"../../core/Component\";\nimport { Container } from \"../../core/Container\";\nimport { DataItem } from \"../../core/DataItem\";\nimport { AxisBreak } from \"./AxisBreak\";\nimport { Label } from \"../../core/elements/Label\";\nimport { Tooltip } from \"../../core/elements/Tooltip\";\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\nimport { List, ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $number from \"../../core/utils/Number\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $type from \"../../core/utils/Type\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\n/**\n * ============================================================================\n * DATA ITEM\n * ============================================================================\n * @hidden\n */\n\n/**\n * Defines a [[DataItem]] for [[Axis]].\n *\n * @see {@link DataItem}\n */\n\nvar AxisDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AxisDataItem, _super);\n  /**\n   * Constructor\n   */\n\n\n  function AxisDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"AxisDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(AxisDataItem.prototype, \"grid\", {\n    /**\n     * @return Grid element\n     */\n    get: function get() {\n      if (!this._grid) {\n        var component_1 = this.component;\n\n        if (component_1) {\n          var template = void 0;\n          var grid_1;\n\n          if (this.isRange) {\n            template = component_1.axisRanges.template.grid;\n\n            if (template.disabled) {\n              return;\n            } else {\n              grid_1 = template.clone();\n            }\n          } else {\n            template = component_1.renderer.grid.template;\n\n            if (template.disabled) {\n              return;\n            } else {\n              grid_1 = component_1.renderer.grid.create();\n\n              this._disposers.push(new Disposer(function () {\n                component_1.renderer.grid.removeValue(grid_1);\n              }));\n            }\n          }\n\n          this.grid = grid_1;\n          grid_1.shouldClone = false;\n\n          this._disposers.push(grid_1);\n\n          grid_1.axis = this.component;\n        }\n      }\n\n      return this._grid;\n    },\n\n    /**\n     * A [[Grid]] element associated with this data item.\n     *\n     * If there is no grid element associated with data item, a new one is\n     * created and returned.\n     *\n     * @param grid  Grid element\n     */\n    set: function set(grid) {\n      if (this._grid && this._grid != grid) {\n        $array.remove(this.sprites, this._grid);\n        this._grid.dataItem = undefined;\n      }\n\n      if (grid) {\n        if (grid.dataItem && grid.dataItem != this) {\n          $array.remove(grid.dataItem.sprites, grid);\n          grid.dataItem.grid = undefined;\n        }\n\n        this.addSprite(grid);\n      }\n\n      this._grid = grid;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisDataItem.prototype, \"tick\", {\n    /**\n     * @return Tick element\n     */\n    get: function get() {\n      if (!this._tick) {\n        var component_2 = this.component;\n\n        if (component_2) {\n          var template = void 0;\n          var tick_1;\n\n          if (this.isRange) {\n            template = component_2.axisRanges.template.tick;\n\n            if (template.disabled) {\n              return;\n            } else {\n              tick_1 = template.clone();\n            }\n          } else {\n            template = component_2.renderer.ticks.template;\n\n            if (template.disabled) {\n              return;\n            } else {\n              tick_1 = component_2.renderer.ticks.create();\n\n              this._disposers.push(new Disposer(function () {\n                component_2.renderer.ticks.removeValue(tick_1);\n              }));\n            }\n          }\n\n          this.tick = tick_1;\n          tick_1.axis = this.component;\n          tick_1.shouldClone = false;\n\n          this._disposers.push(tick_1);\n        }\n      }\n\n      return this._tick;\n    },\n\n    /**\n     * An [[AxisTick]] element associated with this data item.\n     *\n     * If there is no tick element associated with data item, a new one is\n     * created and returned.\n     *\n     * @param tick  Tick element\n     */\n    set: function set(tick) {\n      if (this._tick && this._tick != tick) {\n        $array.remove(this.sprites, this._tick);\n        this._tick.dataItem = undefined;\n      }\n\n      if (tick) {\n        if (tick.dataItem && tick.dataItem != this) {\n          $array.remove(tick.dataItem.sprites, tick);\n          tick.dataItem.tick = undefined;\n        }\n\n        this.addSprite(tick);\n      }\n\n      this._tick = tick;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisDataItem.prototype, \"label\", {\n    /**\n     * @return Label element\n     */\n    get: function get() {\n      if (!this._label) {\n        var component_3 = this.component;\n\n        if (component_3) {\n          var template = void 0;\n          var label_1;\n\n          if (this.isRange) {\n            template = component_3.axisRanges.template.label;\n\n            if (template.disabled) {\n              return;\n            } else {\n              label_1 = template.clone();\n            }\n          } else {\n            template = component_3.renderer.labels.template;\n\n            if (template.disabled) {\n              return;\n            } else {\n              label_1 = component_3.renderer.labels.create();\n\n              this._disposers.push(new Disposer(function () {\n                component_3.renderer.labels.removeValue(label_1);\n              }));\n            }\n          }\n\n          this._disposers.push(label_1);\n\n          this.label = label_1;\n          label_1.shouldClone = false;\n          label_1.axis = this.component;\n          label_1.virtualParent = component_3;\n        }\n      }\n\n      return this._label;\n    },\n\n    /**\n     * An [[AxisLabel]] element associated with this data item.\n     *\n     * If there is no label element associated with data item, a new one is\n     * created and returned.\n     *\n     * @param label Label element\n     */\n    set: function set(label) {\n      if (this._label && this._label != label) {\n        $array.remove(this.sprites, this._label);\n        this._label.dataItem = undefined;\n      }\n\n      if (label) {\n        if (label.dataItem && label.dataItem != this) {\n          $array.remove(label.dataItem.sprites, label);\n          label.dataItem.label = undefined;\n        }\n\n        this.addSprite(label);\n      }\n\n      this._label = label;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisDataItem.prototype, \"axisFill\", {\n    /**\n     * @return Label element\n     */\n    get: function get() {\n      if (!this._axisFill) {\n        var component_4 = this.component;\n\n        if (component_4) {\n          var template = void 0;\n          var axisFill_1;\n\n          if (this.isRange) {\n            template = component_4.axisRanges.template.axisFill;\n\n            if (!this.isTemplate && template.disabled) {\n              return;\n            } else {\n              axisFill_1 = template.clone();\n            }\n          } else {\n            template = component_4.renderer.axisFills.template;\n\n            if (template.disabled) {\n              return;\n            } else {\n              axisFill_1 = component_4.renderer.axisFills.create();\n\n              this._disposers.push(new Disposer(function () {\n                component_4.renderer.axisFills.removeValue(axisFill_1);\n              }));\n            }\n          }\n\n          this.axisFill = axisFill_1;\n          axisFill_1.shouldClone = false;\n\n          this._disposers.push(axisFill_1);\n        }\n      }\n\n      return this._axisFill;\n    },\n\n    /**\n     * An [[AxisFill]] associated element with this data item.\n     *\n     * If there is no fill element associated with data item, a new one is\n     * created and returned.\n     *\n     * @param label Label element\n     */\n    set: function set(axisFill) {\n      if (this._axisFill && this._axisFill != axisFill) {\n        $array.remove(this.sprites, this._axisFill);\n        this._axisFill.dataItem = undefined;\n      }\n\n      if (axisFill) {\n        if (axisFill.dataItem && axisFill.dataItem != this) {\n          $array.remove(axisFill.dataItem.sprites, axisFill);\n          axisFill.dataItem.axisFill = undefined;\n        }\n\n        axisFill.axis = this.component;\n        this.addSprite(axisFill);\n      }\n\n      this._axisFill = axisFill;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisDataItem.prototype, \"text\", {\n    /**\n     * @return Text label\n     */\n    get: function get() {\n      return this._text;\n    },\n\n    /**\n     * Text to be used as data item's label.\n     *\n     * @param text Text label\n     */\n    set: function set(text) {\n      this._text = text;\n\n      if (this._label) {\n        // do not use getter, it will create unwanted instances!\n        this._label.text = text;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisDataItem.prototype, \"mask\", {\n    /**\n     * Data item's mask.\n     *\n     * @return Mask\n     */\n    get: function get() {\n      return this._mask;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisDataItem.prototype, \"contents\", {\n    /**\n     * Returns a [[Container]] to place all visual elements, related to data item\n     * in.\n     *\n     * If there is no Container, a new one is created.\n     *\n     * @return Contents container\n     */\n    get: function get() {\n      if (!this._contents) {\n        var contents = new Container();\n        this.addSprite(contents);\n        contents.isMeasured = false;\n        this._contents = contents;\n        var component = this.component;\n\n        if (component) {\n          var mask = component.renderer.createFill(this.component);\n          mask.disabled = false;\n          mask.axis = component;\n          this.addSprite(mask);\n          this._mask = mask;\n          contents.mask = mask;\n        }\n      }\n\n      return this._contents;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisDataItem.prototype, \"axisBreak\", {\n    /**\n     * @return Axis break\n     */\n    get: function get() {\n      return this._axisBreak;\n    },\n\n    /**\n     * An [[AxisBreak]] this data item falls within.\n     *\n     * @param axisBreak Axis break\n     */\n    set: function set(axisBreak) {\n      if (this._axisBreak) {\n        this._axisBreak.dataItems.removeValue(this);\n      }\n\n      if (axisBreak) {\n        axisBreak.dataItems.push(this);\n      }\n\n      this._axisBreak = axisBreak;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Re-draws the element.\n   *\n   * @ignore Exclude from docs\n   */\n\n  AxisDataItem.prototype.validate = function () {\n    if (this.component) {\n      this.component.validateDataElement(this);\n    }\n  };\n  /**\n   * Appends data item's elements to the parent [[Container]].\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  AxisDataItem.prototype.appendChildren = function () {\n    if (this.component) {\n      this.component.appendDataItem(this);\n    }\n  };\n  /**\n   * Ordering function used in JSON setup.\n   *\n   * @param a  Item A\n   * @param b  Item B\n   * @return Order\n   */\n\n\n  AxisDataItem.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    } else if (a == \"language\") {\n      return -1;\n    } else if (b == \"language\") {\n      return 1;\n    } else if (a == \"component\") {\n      return -1;\n    } else if (b == \"component\") {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n  /**\n   * Checks if data item has particular property set.\n   *\n   * @param prop  Property name\n   * @return Property set?\n   */\n\n\n  AxisDataItem.prototype.hasProperty = function (prop) {\n    return prop == \"component\" ? true : _super.prototype.hasProperty.call(this, prop);\n  };\n  /**\n   * Copies all parameters from another [[AxisDataItem]].\n   *\n   * @param source Source AxisDataItem\n   */\n\n\n  AxisDataItem.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.text = source.text;\n  };\n\n  return AxisDataItem;\n}(DataItem);\n\nexport { AxisDataItem };\n/**\n * ============================================================================\n * REQUISITES\n * ============================================================================\n * @hidden\n */\n\n/**\n * Defines named positions for data item's location within [[Axis]].\n */\n\nexport var AxisItemLocation;\n\n(function (AxisItemLocation) {\n  AxisItemLocation[AxisItemLocation[\"Start\"] = 0] = \"Start\";\n  AxisItemLocation[AxisItemLocation[\"Middle\"] = 0.5] = \"Middle\";\n  AxisItemLocation[AxisItemLocation[\"End\"] = 1] = \"End\";\n})(AxisItemLocation || (AxisItemLocation = {}));\n/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * A base class for all Axis elements.\n *\n * @see {@link IAxisEvents} for a list of available Events\n * @see {@link IAxisAdapters} for a list of available Adapters\n */\n\n\nvar Axis =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Axis, _super);\n  /**\n   * Constructor\n   */\n\n\n  function Axis() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\n     * Number of Grid elements on the axis.\n     */\n\n\n    _this._gridCount = 10;\n    /**\n     * A list of [[XYSeries]] that are using this Axis.\n     */\n\n    _this._series = new List();\n    /**\n     * Specifies if axis should be automatically disposed when removing from\n     * chart's axis list.\n     *\n     * @default true\n     */\n\n    _this.autoDispose = true;\n    _this.className = \"Axis\";\n    _this.shouldClone = false;\n\n    _this.setPropertyValue(\"cursorTooltipEnabled\", true);\n\n    var interfaceColors = new InterfaceColorSet(); // Create title\n\n    _this.title = new Label();\n    _this.title.shouldClone = false;\n\n    _this._disposers.push(_this.title);\n\n    _this.setPropertyValue(\"startLocation\", 0);\n\n    _this.setPropertyValue(\"endLocation\", 1); // Data item iterator\n\n\n    _this._dataItemsIterator = new $iter.ListIterator(_this.dataItems, function () {\n      return _this.dataItems.create();\n    });\n    _this._dataItemsIterator.createNewItems = true; // Create tooltip\n\n    var tooltip = new Tooltip();\n\n    _this._disposers.push(tooltip);\n\n    tooltip.label.padding(5, 10, 5, 10);\n    tooltip.background.pointerLength = 5;\n    tooltip.fitPointerToBounds = true;\n    tooltip.background.filters.clear(); // Set virtual parentfor the tooltip so that it can properly inheirt\n    // formatters from the axis.\n\n    tooltip.virtualParent = _this; // Create background element for the tooltip\n\n    var background = tooltip.background;\n    background.cornerRadius = 0;\n    background.fill = interfaceColors.getFor(\"alternativeBackground\");\n    background.stroke = background.fill;\n    background.strokeWidth = 1;\n    background.fillOpacity = 1;\n    tooltip.label.fill = interfaceColors.getFor(\"alternativeText\");\n    _this.tooltip = tooltip;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\n   * Holds reference to a function that accepts a DataItem and its index as\n   * parameters.\n   *\n   * It can either return a fill opacity for a fill, or manipulate data item\n   * directly, to create various highlighting scenarios.\n   *\n   * For example, you can set it up to highlight only weekends on a\n   * [[DateAxis]].\n   */\n\n\n  Axis.prototype.fillRule = function (dataItem, index) {\n    if (!$type.isNumber(index)) {\n      index = dataItem.index;\n    }\n\n    if (index / 2 == Math.round(index / 2)) {\n      dataItem.axisFill.__disabled = true;\n      dataItem.axisFill.opacity = 0;\n    } else {\n      dataItem.axisFill.opacity = 1;\n      dataItem.axisFill.__disabled = false;\n    }\n  };\n  /**\n   * Returns a new/empty DataItem of the type appropriate for this object.\n   *\n   * @see {@link DataItem}\n   * @return Data Item\n   */\n\n\n  Axis.prototype.createDataItem = function () {\n    return new AxisDataItem();\n  };\n  /**\n   * Invalidates layout.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  Axis.prototype.invalidateLayout = function () {\n    _super.prototype.invalidateLayout.call(this); // this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%\n\n\n    $iter.each(this.series.iterator(), function (series) {\n      series.invalidateLayout();\n    });\n  };\n  /**\n   * Invalidates series of this axis.\n   */\n\n\n  Axis.prototype.invalidateSeries = function () {\n    // this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%\n    $iter.each(this.series.iterator(), function (series) {\n      series.invalidate();\n    });\n  };\n  /**\n   * Override to cancel super call for data element validation.\n   * @ignore\n   */\n\n\n  Axis.prototype.validateDataElements = function () {\n    if (this.ghostLabel) {\n      this.renderer.updateLabelElement(this.ghostLabel, this.start, this.end);\n    }\n  };\n  /**\n   * Recalculates the number of grid items on the axis.\n   */\n\n\n  Axis.prototype.updateGridCount = function () {\n    if (this.renderer) {\n      this._gridCount = this.axisLength / this.renderer.minGridDistance;\n    }\n  };\n  /**\n   * Redraws the element.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  Axis.prototype.validateLayout = function () {\n    this.axisFullLength = this.axisLength / (this.end - this.start);\n\n    _super.prototype.validateLayout.call(this);\n\n    this.updateGridCount();\n    this.renderer.updateAxisLine();\n    this.renderer.updateTooltip();\n    this.renderer.updateBaseGridElement();\n\n    if (this._prevLength != this.axisLength) {\n      this.dispatchImmediately(\"lengthchanged\");\n      this._prevLength = this.axisLength;\n    }\n  };\n  /**\n   * Initializes Axis' renderer.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  Axis.prototype.initRenderer = function () {};\n  /**\n   * Adds a data item to the Axis.\n   *\n   * @param dataItem Data item\n   */\n\n\n  Axis.prototype.appendDataItem = function (dataItem) {\n    var renderer = this.renderer;\n\n    if (dataItem.tick) {\n      dataItem.tick.parent = renderer.gridContainer;\n    }\n\n    if (dataItem.label) {\n      dataItem.label.parent = renderer;\n    }\n\n    if (dataItem.grid) {\n      dataItem.grid.parent = renderer.gridContainer;\n    }\n\n    if (dataItem.axisFill) {\n      dataItem.axisFill.parent = renderer.gridContainer;\n    }\n  };\n  /**\n   * Redraws Axis' related items.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  Axis.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    this.validateLayout();\n    this.renderer.updateGridContainer();\n  };\n  /**\n   * Redars Axis ranges.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  Axis.prototype.validateAxisRanges = function () {\n    var _this = this;\n\n    $iter.each(this.axisRanges.iterator(), function (axisRange) {\n      _this.appendDataItem(axisRange);\n\n      _this.validateDataElement(axisRange);\n\n      if (axisRange.grid) {\n        axisRange.grid.validate();\n      }\n\n      if (axisRange.tick) {\n        axisRange.tick.validate();\n      }\n\n      if (axisRange.axisFill) {\n        axisRange.axisFill.validate();\n      }\n\n      if (axisRange.label) {\n        axisRange.label.validate();\n      }\n    });\n  };\n  /**\n   * Invalidates all axis breaks, so they are redrawn.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  Axis.prototype.validateBreaks = function () {\n    $iter.each(this.axisBreaks.iterator(), function (axisBreak) {\n      axisBreak.invalidate();\n    });\n  };\n  /**\n   * Associates an Axis break with this Axis, after it is inserted into\n   * `axisBreaks`.\n   *\n   * @ignore Exclude from docs\n   * @param event Event\n   */\n\n\n  Axis.prototype.processBreak = function (event) {\n    var axisBreak = event.newValue;\n    axisBreak.parent = this.renderer.breakContainer;\n    axisBreak.axis = this;\n  };\n  /**\n   * Registers a [[XYSeries]] element with this Axis.\n   *\n   * Returns a [[Disposer]] for all events, added to Series for watching\n   * changes in Axis, and vice versa.\n   * @ignore\n   * @param series  Series\n   * @return Event disposer\n   */\n\n\n  Axis.prototype.registerSeries = function (series) {\n    var _this = this;\n\n    this.series.moveValue(series);\n    return new MultiDisposer([new Disposer(function () {\n      _this.series.removeValue(series);\n    }), this.events.on(\"lengthchanged\", series.invalidate, series, false), this.events.on(\"startchanged\", series.invalidate, series, false), this.events.on(\"endchanged\", series.invalidate, series, false) // TODO should these be disposed of ?\n    //series.events.on(\"datavalidated\", this.processSeriesDataItems, this),\n    //series.events.on(\"visibilitychanged\", this.processSeriesDataItems, this),\n    //series.events.on(\"hidden\", this.processSeriesDataItems, this)\n    ]);\n  };\n\n  Object.defineProperty(Axis.prototype, \"renderer\", {\n    /**\n     * @return Renderer\n     */\n    get: function get() {\n      return this._renderer;\n    },\n\n    /**\n     * An [[AxisRenderer]] to be used to render this Axis.\n     *\n     * Please note that most of the settings, related to Axis' appearance are set\n     * via its renderer. Not directly on the Axis.\n     *\n     * E.g.:\n     *\n     * ```TypeScript\n     * axis.renderer.inside = true;\n     * axis.renderer.minLabelPosition = 0.1;\n     * axis.renderer.maxLabelPosition = 0.9;\n     * ```\n     * ```JavaScript\n     * axis.renderer.inside = true;\n     * axis.renderer.minLabelPosition = 0.1;\n     * axis.renderer.maxLabelPosition = 0.9;\n     * ```\n     *\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/} for more info\n     * @param renderer  Renderer\n     */\n    set: function set(renderer) {\n      if (renderer != this._renderer) {\n        this._renderer = renderer;\n        renderer.chart = this.chart;\n        renderer.axis = this;\n        renderer.parent = this;\n        this.title.parent = this; // we add title to axis and set layout in renderer to avoid one extra container, as otherwise axis container would be used for holding renderer only\n\n        this.initRenderer();\n\n        this._disposers.push(renderer.gridContainer.events.on(\"maxsizechanged\", this.invalidate, this, false));\n\n        var ghostLabel_1 = this.renderer.labels.create();\n\n        this._disposers.push(ghostLabel_1);\n\n        ghostLabel_1.dataItem = this.dataItems.template.clone(); // just for the adapters not to fail\n\n        ghostLabel_1.text = \"L\";\n        ghostLabel_1.parent = this.renderer;\n        ghostLabel_1.shouldClone = false;\n        ghostLabel_1.fillOpacity = 0;\n        ghostLabel_1.opacity = 0;\n        ghostLabel_1.strokeOpacity = 0;\n        ghostLabel_1.interactionsEnabled = false;\n        ghostLabel_1.validate();\n        this.ghostLabel = ghostLabel_1;\n        this.events.on(\"beforedatavalidated\", function () {\n          ghostLabel_1.text = \"L\";\n        }, undefined, false);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Converts a relative position to angle. (for circular axes)\n   *\n   * @param position Position (0-1)\n   * @return Angle\n   */\n\n  Axis.prototype.positionToAngle = function (position) {\n    return this.renderer.positionToAngle(position);\n  };\n  /**\n   * Converts pixel coordinates to a relative position. (0-1)\n   *\n   * @param point  Coorinates (px)\n   * @return Position (0-1)\n   */\n\n\n  Axis.prototype.pointToPosition = function (point) {\n    return this.renderer.pointToPosition(point);\n  };\n  /**\n   * [getAnyRangePath description]\n   *\n   * @ignore Exclude from docs\n   * @todo Description\n   * @param start  [description]\n   * @param end    [description]\n   * @return [description]\n   */\n\n\n  Axis.prototype.getAnyRangePath = function (start, end) {\n    return this.renderer.getPositionRangePath(start, end);\n  };\n  /**\n   * Converts any positional parameter to a relative position on axis.\n   *\n   * @todo Description (review)\n   * @param value  Pisition\n   * @return Position (0-1)\n   */\n\n\n  Axis.prototype.anyToPosition = function (value) {\n    return 0;\n  };\n  /**\n   * Converts any positional parameter to a relative position on axis.\n   *\n   * @todo Description (review)\n   * @param value  Pisition\n   * @return Orientation point\n   */\n\n\n  Axis.prototype.anyToPoint = function (value) {\n    return {\n      x: 0,\n      y: 0,\n      angle: 0\n    };\n  };\n  /**\n   * [getPositionRangePath description]\n   *\n   * @ignore Exclude from docs\n   * @todo Description\n   * @param startPosition [description]\n   * @param endPosition   [description]\n   * @return [description]\n   */\n\n\n  Axis.prototype.getPositionRangePath = function (startPosition, endPosition) {\n    return this.renderer.getPositionRangePath(startPosition, endPosition);\n  };\n\n  Object.defineProperty(Axis.prototype, \"axisLength\", {\n    /**\n     * Actual axis length in pixels.\n     *\n     * @return Axis length (px)\n     */\n    get: function get() {\n      return this.renderer.axisLength;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Axis.prototype, \"cursorTooltipEnabled\", {\n    /**\n     * @return Display tooltip?\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cursorTooltipEnabled\");\n    },\n\n    /**\n     * Indicates if axis should display a tooltip for chart's cursor.\n     *\n     * @param value Display tooltip?\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"cursorTooltipEnabled\", value)) {\n        if (value && this.renderer) {\n          this.renderer.updateTooltip();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Shows Axis tooltip at specific relative position within Axis. (0-1)\n   *\n   * @param position Position (0-1)\n   * @param local or global position\n   */\n\n  Axis.prototype.showTooltipAtPosition = function (position, local) {\n    var tooltip = this._tooltip;\n\n    if (!local) {\n      position = this.toAxisPosition(position);\n    }\n\n    if (!$type.isNumber(position) || position < 0 || position > 1) {\n      tooltip.hide(0);\n      return;\n    }\n\n    var renderer = this.renderer;\n\n    if (tooltip && this.dataItems.length > 0) {\n      //@todo: think of how to solve this better\n      if (tooltip && !tooltip.parent) {\n        tooltip.parent = this.tooltipContainer;\n      }\n\n      var tooltipLocation = renderer.tooltipLocation;\n      var startPosition = this.getCellStartPosition(position);\n      var endPosition = this.getCellEndPosition(position);\n\n      if (this.tooltipPosition == \"fixed\") {\n        position = startPosition + (endPosition - startPosition) * tooltipLocation;\n      }\n\n      position = $math.fitToRange(position, this.start, this.end);\n      var startPoint = renderer.positionToPoint(startPosition);\n      var endPoint = renderer.positionToPoint(endPosition); // save values so cursor could use them\n\n      this.currentItemStartPoint = startPoint;\n      this.currentItemEndPoint = endPoint;\n\n      if (renderer.fullWidthTooltip) {\n        tooltip.width = endPoint.x - startPoint.x;\n        tooltip.height = endPoint.y - startPoint.y;\n      }\n\n      var point = renderer.positionToPoint(position);\n      var globalPoint = $utils.spritePointToSvg(point, this.renderer.line);\n      tooltip.text = this.getTooltipText(position);\n\n      if (tooltip.text) {\n        tooltip.pointTo(globalPoint);\n        tooltip.show();\n      }\n\n      if (!this.cursorTooltipEnabled) {\n        tooltip.hide(0);\n      }\n    }\n  };\n  /**\n   * Converts relative position (0-1) to Axis position with zoom level and\n   * inversed taken into account.\n   *\n   * @param position Global position (0-1)\n   * @return Position within Axis (0-1)\n   */\n\n\n  Axis.prototype.toAxisPosition = function (position) {\n    position = this.renderer.toAxisPosition(position);\n\n    if (position == undefined) {\n      return;\n    }\n\n    position = position * (this.end - this.start);\n\n    if (this.renderer.inversed) {\n      position = this.end - position;\n    } else {\n      position = this.start + position;\n    }\n\n    return position;\n  };\n  /**\n   * Converts position on the axis with zoom level and\n   * inversed taken into account to global position.\n   *\n   * @param position Axis position (0-1)\n   * @return Global position (0-1)\n   */\n\n\n  Axis.prototype.toGlobalPosition = function (position) {\n    if (this.renderer.inversed) {\n      position = this.end - position;\n    } else {\n      position = position - this.start;\n    }\n\n    return position / (this.end - this.start);\n  };\n  /**\n   * Returns text to be used for cursor's Axis tooltip.\n   *\n   * This is a placeholder to override for extending classes.\n   *\n   * @ignore Exclude from docs\n   * @param position  Position coordinate (px)\n   * @return Label text\n   */\n\n\n  Axis.prototype.getTooltipText = function (position) {\n    return;\n  };\n  /**\n   * Updates Axis' tooltip's position and possibly size, and pointer (stem)\n   * place.\n   *\n   * @ignore Exclude from docs\n   * @param pointerOrientation  Pointer (stem) orientation\n   * @param boundingRectangle   A rectangle for tooltip to fit within\n   */\n\n\n  Axis.prototype.updateTooltip = function (pointerOrientation, boundingRectangle) {\n    var tooltip = this._tooltip;\n\n    if (tooltip) {\n      tooltip.pointerOrientation = pointerOrientation;\n      tooltip.setBounds($utils.spriteRectToSvg(boundingRectangle, this.renderer.line));\n    }\n  };\n  /**\n   * [roundPosition description]\n   *\n   * @ignore Exclude from docs\n   * @todo Description\n   * @param position  Relative position\n   * @param location  Location on axis\n   * @return Rounded position\n   */\n\n\n  Axis.prototype.roundPosition = function (position, location) {\n    return position;\n  };\n  /**\n   * [getCellStartPosition description]\n   *\n   * @ignore Exclude from docs\n   * @todo Description\n   * @param position [description]\n   * @return [description]\n   */\n\n\n  Axis.prototype.getCellStartPosition = function (position) {\n    return position;\n  };\n  /**\n   * [getCellEndPosition description]\n   *\n   * @ignore Exclude from docs\n   * @todo Description\n   * @param position [description]\n   * @return [description]\n   */\n\n\n  Axis.prototype.getCellEndPosition = function (position) {\n    return position;\n  };\n\n  Object.defineProperty(Axis.prototype, \"axisRanges\", {\n    /**\n     * A list of axis ranges for this Axis.\n     *\n     * @return Axis ranges\n     */\n    get: function get() {\n      if (!this._axisRanges) {\n        var dataItem = this.createDataItem();\n        dataItem.isRange = true;\n        dataItem.axisFill = this.renderer.axisFills.template.clone();\n        dataItem.grid = this.renderer.grid.template.clone();\n        dataItem.tick = this.renderer.ticks.template.clone();\n        dataItem.label = this.renderer.labels.template.clone();\n        dataItem.isTemplate = true;\n        dataItem.component = this;\n        dataItem.axisFill.disabled = false;\n        dataItem.tick.disabled = false;\n        dataItem.grid.disabled = false;\n        dataItem.label.disabled = false;\n        this._axisRanges = new ListTemplate(dataItem);\n\n        this._axisRanges.events.on(\"inserted\", this.processAxisRange, this, false);\n\n        this._disposers.push(new ListDisposer(this._axisRanges));\n\n        this._disposers.push(this._axisRanges.template);\n      }\n\n      return this._axisRanges;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Decorates an axis range after it has been added to the axis range list.\n   *\n   * @param event Event\n   */\n\n  Axis.prototype.processAxisRange = function (event) {\n    var axisRange = event.newValue;\n    axisRange.component = this;\n    axisRange.isRange = true;\n  };\n\n  Object.defineProperty(Axis.prototype, \"axisBreaks\", {\n    /**\n     * A list of axis breaks on this Axis.\n     *\n     * @return Axis breaks.\n     */\n    get: function get() {\n      if (!this._axisBreaks) {\n        this._axisBreaks = new SortedListTemplate(this.createAxisBreak(), function (a, b) {\n          return $number.order(a.adjustedStartValue, b.adjustedStartValue);\n        });\n\n        this._axisBreaks.events.on(\"inserted\", this.processBreak, this, false);\n\n        this._disposers.push(new ListDisposer(this._axisBreaks));\n\n        this._disposers.push(this._axisBreaks.template);\n      }\n\n      return this._axisBreaks;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Creates a new axis break.\n   *\n   * @return Axis break\n   */\n\n  Axis.prototype.createAxisBreak = function () {\n    return new AxisBreak();\n  };\n\n  Object.defineProperty(Axis.prototype, \"series\", {\n    /**\n     * A list of Series currently associated with this Axis.\n     *\n     * @return Series\n     */\n    get: function get() {\n      if (!this._series) {\n        this._series = new List();\n      }\n\n      return this._series;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Processes Series' data items.\n   *\n   * This is a placeholder to override for extending classes.\n   *\n   * @ignore Exclude from docs\n   */\n\n  Axis.prototype.processSeriesDataItems = function () {};\n  /**\n   * Processes Series' single data item.\n   *\n   * This is a placeholder to override for extending classes.\n   *\n   * @ignore Exclude from docs\n   * @param dataItem Data item\n   */\n\n\n  Axis.prototype.processSeriesDataItem = function (dataItem, axisLetter) {};\n  /**\n   * Post-processes Serie's data items.\n   *\n   * This is a placeholder to override for extending classes.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  Axis.prototype.postProcessSeriesDataItems = function () {};\n  /**\n   * Post-processes Serie's single data item.\n   *\n   * This is a placeholder to override for extending classes.\n   *\n   * @ignore Exclude from docs\n   * @param dataItem Data item\n   */\n\n\n  Axis.prototype.postProcessSeriesDataItem = function (dataItem) {}; //\n\n  /**\n   * Updates Axis based on all Series that might influence it.\n   *\n   * Called by Series after Series data is validated.\n   *\n   * This is a placeholder to override for extending classes.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  Axis.prototype.updateAxisBySeries = function () {};\n  /**\n   * Hides unused data items.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  Axis.prototype.hideUnusedDataItems = function () {\n    var _this = this; // hide all unused\n\n\n    var dataItemsIterator = this._dataItemsIterator;\n    dataItemsIterator.createNewItems = false;\n    $iter.each(dataItemsIterator.iterator(), function (dataItem) {\n      _this.validateDataElement(dataItem); // solves shrinking\n\n\n      dataItem.__disabled = true;\n    });\n    dataItemsIterator.clear();\n    dataItemsIterator.createNewItems = true;\n  };\n  /**\n   * Returns a Series' data item that corresponds to specific position on Axis.\n   *\n   * This is a placeholder to override for extending classes.\n   *\n   * @ignore Exclude from docs\n   * @param series    Series\n   * @param position  Position (0-1)\n   * @param findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\n   * @return Data item\n   */\n\n\n  Axis.prototype.getSeriesDataItem = function (series, position, findNearest) {\n    return;\n  };\n  /**\n   * Returns an angle that corresponds to specific position on axis.\n   *\n   * This is a placeholder to override for extending classes.\n   *\n   * @ignore Exclude from docs\n   * @todo Description (review)\n   * @param dataItem  Data item\n   * @param key       ???\n   * @param location  Location\n   * @param stackKey  ???\n   * @return Angle\n   */\n\n\n  Axis.prototype.getAngle = function (dataItem, key, location, stackKey) {\n    return;\n  };\n  /**\n   * [getX description]\n   *\n   * This is a placeholder to override for extending classes.\n   *\n   * @ignore Exclude from docs\n   * @todo Description (review)\n   * @param dataItem [description]\n   * @param key      [description]\n   * @param location [description]\n   * @param stackKey [description]\n   * @return [description]\n   */\n\n\n  Axis.prototype.getX = function (dataItem, key, location, stackKey) {\n    return;\n  };\n  /**\n   * [getY description]\n   *\n   * This is a placeholder to override for extending classes.\n   *\n   * @ignore Exclude from docs\n   * @todo Description (review)\n   * @param dataItem [description]\n   * @param key      [description]\n   * @param location [description]\n   * @param stackKey [description]\n   * @return [description]\n   */\n\n\n  Axis.prototype.getY = function (dataItem, key, location, stackKey) {\n    return;\n  };\n\n  Object.defineProperty(Axis.prototype, \"basePoint\", {\n    /**\n     * Coordinates of the actual axis start.\n     *\n     * @ignore Exclude from docs\n     * @return Base point coordinates\n     */\n    get: function get() {\n      return {\n        x: 0,\n        y: 0\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * [dataChangeUpdate description]\n   *\n   * This is a placeholder to override for extending classes.\n   *\n   * @ignore Exclude from docs\n   * @todo Description\n   */\n\n  Axis.prototype.dataChangeUpdate = function () {};\n  /**\n   * [dataChangeUpdate description]\n   *\n   *\n   * @ignore Exclude from docs\n   * @todo Description\n   */\n\n\n  Axis.prototype.seriesDataChangeUpdate = function (series) {};\n  /**\n   * Removes axis breaks that fall between `min` and `max` (???)\n   *\n   * @ignore Exclude from docs\n   * @todo Description (review)\n   * @param min  Start value\n   * @param max  End value\n   * @return Spread o\n   */\n\n\n  Axis.prototype.adjustDifference = function (min, max) {\n    var difference = max - min;\n\n    if ($type.isNumber(difference)) {\n      $iter.eachContinue(this.axisBreaks.iterator(), function (axisBreak) {\n        var startValue = axisBreak.adjustedStartValue;\n        var endValue = axisBreak.adjustedEndValue;\n\n        if ($type.isNumber(startValue) && $type.isNumber(endValue)) {\n          // breaks are sorted, we don't need go further anymore\n          if (startValue > max) {\n            return false;\n          }\n\n          if (endValue >= min) {\n            if ($type.isNumber(startValue) && $type.isNumber(endValue)) {\n              var breakSize = axisBreak.breakSize;\n              var intersection = $math.intersection({\n                start: startValue,\n                end: endValue\n              }, {\n                start: min,\n                end: max\n              });\n\n              if (intersection) {\n                difference -= (intersection.end - intersection.start) * (1 - breakSize);\n              }\n            }\n          }\n\n          return true;\n        }\n      });\n      return difference;\n    }\n  };\n  /**\n   * Checks if specific value falls within a break.\n   *\n   * Returns [[AxisBreak]] the value falls into.\n   *\n   * @param value  Value to check\n   * @return Axis break\n   */\n\n\n  Axis.prototype.isInBreak = function (value) {\n    return $iter.find(this.axisBreaks.iterator(), function (axisBreak) {\n      return value >= axisBreak.adjustedStartValue && value <= axisBreak.adjustedEndValue;\n    });\n  };\n  /**\n   * [fixAxisBreaks description]\n   *\n   * @ignore Exclude from docs\n   * @todo Description\n   */\n\n\n  Axis.prototype.fixAxisBreaks = function () {\n    var _this = this;\n\n    var axisBreaks = this.axisBreaks;\n\n    if (axisBreaks.length > 0) {\n      // first make sure that startValue is <= end value\n      // This needs to make a copy of axisBreaks because it mutates the list while traversing\n      // TODO very inefficient\n      $array.each($iter.toArray(axisBreaks.iterator()), function (axisBreak) {\n        var startValue = $math.min(axisBreak.startValue, axisBreak.endValue);\n        var endValue = $math.max(axisBreak.startValue, axisBreak.endValue);\n        axisBreak.adjustedStartValue = startValue;\n        axisBreak.adjustedEndValue = endValue;\n\n        _this.axisBreaks.update(axisBreak);\n      });\n      var firstAxisBreak = axisBreaks.first;\n      var previousEndValue_1 = Math.min(firstAxisBreak.startValue, firstAxisBreak.endValue); // process breaks\n      // TODO does this need to call axisBreaks.update ?\n\n      $iter.each(this.axisBreaks.iterator(), function (axisBreak) {\n        var startValue = axisBreak.adjustedStartValue;\n        var endValue = axisBreak.adjustedEndValue; // breaks can't overlap\n        // if break starts before previous break ends\n\n        if (startValue < previousEndValue_1) {\n          startValue = previousEndValue_1;\n\n          if (endValue < previousEndValue_1) {\n            endValue = previousEndValue_1;\n          }\n        }\n\n        axisBreak.adjustedStartValue = startValue;\n        axisBreak.adjustedEndValue = endValue;\n      });\n    }\n  };\n\n  Object.defineProperty(Axis.prototype, \"startIndex\", {\n    /**\n     * @ignore Exclude from docs\n     * @return [description]\n     */\n    get: function get() {\n      return 0;\n    },\n\n    /**\n     * We need start/end indexes of axes to be 0 - `dataItems.length`.\n     *\n     * Yes, also for category axis, this helps to avoid jumping of categories\n     * while scrolling and does not do a lot of extra work as we use\n     * protected `_startIndex` and `_endIndex` when working with items.\n     *\n     * @hidden\n     */\n\n    /**\n     * [startIndex description]\n     *\n     * @ignore Exclude from docs\n     * @todo Description\n     * @param value [description]\n     */\n    set: function set(value) {},\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Axis.prototype, \"endIndex\", {\n    /**\n     * @ignore Exclude from docs\n     * @return [description]\n     */\n    get: function get() {\n      return this.dataItems.length;\n    },\n\n    /**\n     * [endIndex description]\n     *\n     * @ignore Exclude from docs\n     * @todo Description\n     * @param value [description]\n     */\n    set: function set(value) {},\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns a formatted label based on position.\n   *\n   * Individual axis types should override this method to generate a label\n   * that is relevant to axis type.\n   *\n   * Please note that `position` represents position within axis which may be\n   * zoomed and not correspond to Cursor's `position`.\n   *\n   * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\n   *\n   * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\n   * @param position  Relative position on axis (0-1)\n   * @return Position label\n   */\n\n  Axis.prototype.getPositionLabel = function (position) {\n    return Math.round(position * 100) + \"%x\";\n  };\n\n  Object.defineProperty(Axis.prototype, \"chart\", {\n    /**\n     * @return Chart\n     */\n    get: function get() {\n      return this._chart;\n    },\n\n    /**\n     * A Chart this Axis belongs to.\n     *\n     * @param value  Chart\n     */\n    set: function set(value) {\n      this._chart = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Creates a data item for a Series range.\n   *\n   * @param series  Target Series\n   * @return Range data item\n   */\n\n  Axis.prototype.createSeriesRange = function (series) {\n    var range = this.axisRanges.create();\n    range.component = this;\n    range.axisFill = this.renderer.axisFills.template.clone();\n    range.axisFill.disabled = false;\n    range.axisFill.fillOpacity = 0;\n    range.grid = this.renderer.grid.template.clone();\n    range.grid.disabled = true;\n    range.tick = this.renderer.ticks.template.clone();\n    range.tick.disabled = true;\n    range.label = this.renderer.labels.template.clone();\n    range.label.disabled = true;\n    series.axisRanges.push(range);\n    return range;\n  };\n  /**\n   * Copies all properties and related data from a different instance of Axis.\n   *\n   * @param source Source Axis\n   */\n\n\n  Axis.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (this.renderer) {\n      this.renderer.copyFrom(source.renderer);\n    } else {\n      if (source.renderer) {\n        this.renderer = source.renderer.clone();\n      }\n    }\n\n    if (source.title) {\n      this.title = source.title.clone();\n    }\n  };\n  /**\n   * Resets internal iterator.\n   */\n\n\n  Axis.prototype.resetIterators = function () {\n    this._dataItemsIterator.reset();\n  };\n  /**\n   * Processes JSON-based config before it is applied to the object.\n   *\n   * @ignore Exclude from docs\n   * @param config  Config\n   */\n\n\n  Axis.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up axis ranges\n      if ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\n        for (var i = 0, len = config.axisRanges.length; i < len; i++) {\n          var range = config.axisRanges[i]; // If `series` is set, we know it's a series range\n\n          if ($type.hasValue(range[\"series\"])) {\n            if ($type.isString(range[\"series\"])) {\n              if (this.map.hasKey(range[\"series\"])) {\n                //range[\"series\"] = this.map.getKey(range[\"series\"]);\n                config.axisRanges[i] = this.createSeriesRange(this.map.getKey(range[\"series\"]));\n                delete range[\"series\"];\n                config.axisRanges[i].config = range;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  Object.defineProperty(Axis.prototype, \"startLocation\", {\n    /**\n     * @return Location (0-1)\n     */\n    get: function get() {\n      return this.getPropertyValue(\"startLocation\");\n    },\n\n    /**\n     * Axis start location. Works on Date/Category axis, doesn't work on Value axis.\n     *\n     * * 0 - Full first cell is shown.\n     * * 0.5 - Half of first cell is shown.\n     * * 1 - None of the first cell is visible. (you probably don't want that)\n     *\n     * @param value Location (0-1)\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"startLocation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Axis.prototype, \"endLocation\", {\n    /**\n     * @return Location (0-1)\n     */\n    get: function get() {\n      return this.getPropertyValue(\"endLocation\");\n    },\n\n    /**\n     * Axis end location. Works on Date/Category axis, doesn't work on Value axis.\n     *\n     * * 0 - None of the last cell is shown. (don't do that)\n     * * 0.5 - Half of the last cell is shown.\n     * * 1 - Full last cell is shown.\n     *\n     * @param value Location (0-1)\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"endLocation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Axis;\n}(Component);\n\nexport { Axis };\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n *\n * @ignore\n */\n\nregistry.registeredClasses[\"Axis\"] = Axis;\nregistry.registeredClasses[\"AxisDataItem\"] = AxisDataItem;\n/**\n * Add default responsive rules\n */\n\n/**\n * Disable axis tooltips.\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function state(target, stateId) {\n    if (target instanceof Axis && target.tooltip) {\n      var state = target.states.create(stateId);\n      state.properties.cursorTooltipEnabled = false;\n      return state;\n    }\n\n    return null;\n  }\n});","map":{"version":3,"sources":["../../../../../src/.internal/charts/axes/Axis.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Base class for all Axis\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentAdapters, IComponentEvents } from \"../../core/Component\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { DataItem, IDataItemAdapters } from \"../../core/DataItem\";\r\n\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\n\r\n// Charts\r\nimport { Chart } from \"../Chart\";\r\n\r\n// Series\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\n\r\n// Elements\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Tooltip, PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { PointedRectangle } from \"../../core/elements/PointedRectangle\";\r\n\r\n// Types\r\nimport { IRange } from \"../../core/defs/IRange\";\r\n\r\n// Utils\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { List, ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Axis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class AxisDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Reference to a related [[Grid]] element.\r\n\t */\r\n\tprotected _grid: Grid;\r\n\r\n\t/**\r\n\t * Reference to a related [[AxisTick]] element.\r\n\t */\r\n\tprotected _tick: AxisTick;\r\n\r\n\t/**\r\n\t * Reference to a related [[AxisLabel]] element.\r\n\t */\r\n\tprotected _label: AxisLabel;\r\n\r\n\t/**\r\n\t * Reference to a related [[AxisFill]] element.\r\n\t */\r\n\tprotected _axisFill: AxisFill;\r\n\r\n\t/**\r\n\t * A mask for axis. We're using [[AxisFill]] since the mask, basically, has\r\n\t * the same shape and features.\r\n\t */\r\n\tprotected _mask: AxisFill;\r\n\r\n\t/**\r\n\t * Container which might be used to hold some extra items, like series\r\n\t * segments when data item is used for axis range.\r\n\t */\r\n\tprotected _contents: Container;\r\n\r\n\t/**\r\n\t * A text to be used as label for this data item.\r\n\t */\r\n\tprotected _text: string;\r\n\r\n\t/**\r\n\t * Holds a physical position of the grid line associated with this data item,\r\n\t * so that it can be used when measuring distance between points, and hiding\r\n\t * some of them so they don't overlap.\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * If the data item is within an existing [[AxisBreak]] this property will\r\n\t * hold a reference to that [[AxisBreak]].\r\n\t */\r\n\tpublic _axisBreak: AxisBreak;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Axis;\r\n\r\n\t/**\r\n\t * Used to distinguish from real data points and those data items that are\r\n\t * used for ranges, like `series.axisRanges` or `axis.axisRanges`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic isRange: boolean;\r\n\r\n\t/**\r\n\t * relative position of data item on axis\r\n\t */\r\n\tpublic position: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Grid]] element associated with this data item.\r\n\t *\r\n\t * If there is no grid element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param grid  Grid element\r\n\t */\r\n\tpublic set grid(grid: Grid) {\r\n\t\tif (this._grid && this._grid != grid) {\r\n\t\t\t$array.remove(this.sprites, this._grid);\r\n\t\t\tthis._grid.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (grid) {\r\n\t\t\tif (grid.dataItem && grid.dataItem != this) {\r\n\t\t\t\t$array.remove(grid.dataItem.sprites, grid);\r\n\t\t\t\tgrid.dataItem.grid = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(grid);\r\n\t\t}\r\n\t\tthis._grid = grid;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Grid element\r\n\t */\r\n\tpublic get grid(): Grid {\r\n\t\tif (!this._grid) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: Grid;\r\n\t\t\t\tlet grid: Grid;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.grid;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tgrid = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.grid.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tgrid = component.renderer.grid.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.grid.removeValue(grid);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.grid = grid;\r\n\t\t\t\tgrid.shouldClone = false;\r\n\t\t\t\tthis._disposers.push(grid);\r\n\t\t\t\tgrid.axis = this.component;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._grid;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisTick]] element associated with this data item.\r\n\t *\r\n\t * If there is no tick element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param tick  Tick element\r\n\t */\r\n\tpublic set tick(tick: AxisTick) {\r\n\t\tif (this._tick && this._tick != tick) {\r\n\t\t\t$array.remove(this.sprites, this._tick);\r\n\t\t\tthis._tick.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (tick) {\r\n\t\t\tif (tick.dataItem && tick.dataItem != this) {\r\n\t\t\t\t$array.remove(tick.dataItem.sprites, tick);\r\n\t\t\t\ttick.dataItem.tick = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(tick);\r\n\t\t}\r\n\t\tthis._tick = tick;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tick element\r\n\t */\r\n\tpublic get tick(): AxisTick {\r\n\t\tif (!this._tick) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: AxisTick;\r\n\t\t\t\tlet tick: AxisTick;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.tick;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttick = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.ticks.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttick = component.renderer.ticks.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.ticks.removeValue(tick);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.tick = tick;\r\n\t\t\t\ttick.axis = this.component;\r\n\t\t\t\ttick.shouldClone = false;\r\n\t\t\t\tthis._disposers.push(tick);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._tick;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisLabel]] element associated with this data item.\r\n\t *\r\n\t * If there is no label element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param label Label element\r\n\t */\r\n\tpublic set label(label: AxisLabel) {\r\n\t\tif (this._label && this._label != label) {\r\n\t\t\t$array.remove(this.sprites, this._label);\r\n\t\t\tthis._label.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (label) {\r\n\t\t\tif (label.dataItem && label.dataItem != this) {\r\n\t\t\t\t$array.remove(label.dataItem.sprites, label);\r\n\t\t\t\tlabel.dataItem.label = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(label);\r\n\t\t}\r\n\t\tthis._label = label;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label element\r\n\t */\r\n\tpublic get label(): AxisLabel {\r\n\t\tif (!this._label) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: AxisLabel;\r\n\t\t\t\tlet label: AxisLabel;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.label;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlabel = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.labels.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlabel = component.renderer.labels.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.labels.removeValue(label);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._disposers.push(label);\r\n\t\t\t\tthis.label = label;\r\n\t\t\t\tlabel.shouldClone = false;\r\n\t\t\t\tlabel.axis = this.component;\r\n\t\t\t\tlabel.virtualParent = component;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisFill]] associated element with this data item.\r\n\t *\r\n\t * If there is no fill element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param label Label element\r\n\t */\r\n\tpublic set axisFill(axisFill: AxisFill) {\r\n\t\tif (this._axisFill && this._axisFill != axisFill) {\r\n\t\t\t$array.remove(this.sprites, this._axisFill);\r\n\t\t\tthis._axisFill.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (axisFill) {\r\n\t\t\tif (axisFill.dataItem && axisFill.dataItem != this) {\r\n\t\t\t\t$array.remove(axisFill.dataItem.sprites, axisFill);\r\n\t\t\t\taxisFill.dataItem.axisFill = undefined;\r\n\t\t\t}\r\n\t\t\taxisFill.axis = this.component;\r\n\t\t\tthis.addSprite(axisFill);\r\n\t\t}\r\n\t\tthis._axisFill = axisFill;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label element\r\n\t */\r\n\tpublic get axisFill(): AxisFill {\r\n\t\tif (!this._axisFill) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: AxisFill;\r\n\t\t\t\tlet axisFill: AxisFill;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.axisFill;\r\n\t\t\t\t\tif (!this.isTemplate && template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\taxisFill = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.axisFills.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\taxisFill = component.renderer.axisFills.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.axisFills.removeValue(axisFill);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.axisFill = axisFill;\r\n\t\t\t\taxisFill.shouldClone = false;\r\n\t\t\t\tthis._disposers.push(axisFill);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._axisFill;\r\n\t}\r\n\r\n\t/**\r\n\t * Text to be used as data item's label.\r\n\t *\r\n\t * @param text Text label\r\n\t */\r\n\tpublic set text(text: string) {\r\n\t\tthis._text = text;\r\n\t\tif (this._label) { // do not use getter, it will create unwanted instances!\r\n\t\t\tthis._label.text = text;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Text label\r\n\t */\r\n\tpublic get text(): string {\r\n\t\treturn this._text;\r\n\t}\r\n\r\n\t/**\r\n\t * Data item's mask.\r\n\t *\r\n\t * @return Mask\r\n\t */\r\n\tpublic get mask(): AxisFill {\r\n\t\treturn this._mask;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[Container]] to place all visual elements, related to data item\r\n\t * in.\r\n\t *\r\n\t * If there is no Container, a new one is created.\r\n\t *\r\n\t * @return Contents container\r\n\t */\r\n\tpublic get contents(): Container {\r\n\t\tif (!this._contents) {\r\n\t\t\tlet contents = new Container();\r\n\t\t\tthis.addSprite(contents);\r\n\t\t\tcontents.isMeasured = false;\r\n\t\t\tthis._contents = contents;\r\n\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\t\t\t\tlet mask: AxisFill = component.renderer.createFill(this.component);\r\n\t\t\t\tmask.disabled = false;\r\n\t\t\t\tmask.axis = component;\r\n\t\t\t\tthis.addSprite(mask);\r\n\t\t\t\tthis._mask = mask;\r\n\t\t\t\tcontents.mask = mask;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._contents;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisBreak]] this data item falls within.\r\n\t *\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic set axisBreak(axisBreak: this[\"_axisBreak\"]) {\r\n\t\tif (this._axisBreak) {\r\n\t\t\tthis._axisBreak.dataItems.removeValue(this);\r\n\t\t}\r\n\t\tif (axisBreak) {\r\n\t\t\taxisBreak.dataItems.push(this);\r\n\t\t}\r\n\t\tthis._axisBreak = axisBreak;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis break\r\n\t */\r\n\tpublic get axisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn this._axisBreak;\r\n\t}\r\n\r\n\t/**\r\n\t * Re-draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tif (this.component) {\r\n\t\t\tthis.component.validateDataElement(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Appends data item's elements to the parent [[Container]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic appendChildren() {\r\n\t\tif (this.component) {\r\n\t\t\tthis.component.appendDataItem(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Ordering function used in JSON setup.\r\n\t *\r\n\t * @param a  Item A\r\n\t * @param b  Item B\r\n\t * @return Order\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse if (a == \"language\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (b == \"language\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (a == \"component\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (b == \"component\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if data item has particular property set.\r\n\t *\r\n\t * @param prop  Property name\r\n\t * @return Property set?\r\n\t */\r\n\tprotected hasProperty(prop: string): boolean {\r\n\t\treturn prop == \"component\" ? true : super.hasProperty(prop);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[AxisDataItem]].\r\n\t *\r\n\t * @param source Source AxisDataItem\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.text = source.text;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[AxisDataItem]]\r\n * Includes both the [[DataItemAdapter]] definitions and properties\r\n * @see {@link DataItemAdapter}\r\n */\r\nexport interface IAxisDataItemAdapters extends IDataItemAdapters {\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines named positions for data item's location within [[Axis]].\r\n */\r\nexport enum AxisItemLocation {\r\n\tStart = 0,\r\n\tMiddle = 0.5,\r\n\tEnd = 1\r\n}\r\n\r\n/**\r\n * Defines data fields for [[Axis]].\r\n */\r\nexport interface IAxisDataFields extends IComponentDataFields { }\r\n\r\n/**\r\n * Defines properties for [[Axis]].\r\n */\r\nexport interface IAxisProperties extends IComponentProperties {\r\n\r\n\t/**\r\n\t * Axis start location.\r\n\t *\r\n\t * * 0 - None of the first cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the first cell is shown.\r\n\t * * 1 - Full first cell is shown.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\r\n\t/**\r\n\t * Axis end location.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tendLocation?: number;\r\n\r\n\t/**\r\n\t * Indicates if cusor's tooltip should be shown on this Axis.\r\n\t */\r\n\tcursorTooltipEnabled?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[Axis]].\r\n */\r\nexport interface IAxisEvents extends IComponentEvents {\r\n\r\n\t/**\r\n\t * Invoked when available axis lenght changes, e.g. after resizing the whole\r\n\t * chart.\r\n\t */\r\n\tlengthchanged: {}\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Axis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisAdapters extends IComponentAdapters, IAxisProperties {\r\n\t/**\r\n\t * Applied to the tooltip text before it is shown.\r\n\t */\r\n\tgetTooltipText: string;\r\n\r\n}\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all Axis elements.\r\n *\r\n * @see {@link IAxisEvents} for a list of available Events\r\n * @see {@link IAxisAdapters} for a list of available Adapters\r\n */\r\nexport class Axis<T extends AxisRenderer = AxisRenderer> extends Component {\r\n\r\n\t/**\r\n\t * Defines list of data fields.\r\n\t */\r\n\tpublic _dataFields: IAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines the type of the [[DataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A list of Axis Ranges.\r\n\t */\r\n\tprotected _axisRanges: ListTemplate<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: AxisBreak;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisEvents;\r\n\r\n\t/**\r\n\t * A [[Label]] instance that is used for Axis title label.\r\n\t */\r\n\tpublic title: Label;\r\n\r\n\t/**\r\n\t * \"X\", \"Y\", etc.\r\n\t *\r\n\t * This is needed so that Axis knows which of the values from series' data\r\n\t * items it should use.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic axisLetter: string;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t */\r\n\tprotected _chart: Chart;\r\n\r\n\t/**\r\n\t * A type for renderer used for this Axis.\r\n\t */\r\n\tpublic _renderer: T;\r\n\r\n\t/**\r\n\t * Number of Grid elements on the axis.\r\n\t */\r\n\tprotected _gridCount: number = 10;\r\n\r\n\t/**\r\n\t * A list of [[XYSeries]] that are using this Axis.\r\n\t */\r\n\tprotected _series: List<XYSeries> = new List<XYSeries>();\r\n\r\n\t/**\r\n\t * Holds the length of the Axis, so that we can check if it changed after\r\n\t * other changes and we need to update layouts.\r\n\t */\r\n\tprotected _prevLength: number;\r\n\r\n\t/**\r\n\t * A list of Axis Breaks associated with this Axis.\r\n\t */\r\n\tprotected _axisBreaks: SortedListTemplate<this[\"_axisBreak\"]>;\r\n\r\n\t/**\r\n\t * A reference to the Iterator for Axis' data items.\r\n\t */\r\n\tprotected _dataItemsIterator: $iter.ListIterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A name of the data field this Axis looks for its data in, e.g. \"category\".\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic axisFieldName: string;\r\n\r\n\t// we save these values so that cursur could use them if axis line is a fill\r\n\r\n\t/**\r\n\t * [currentItemStartPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic currentItemStartPoint: IPoint;\r\n\r\n\t/**\r\n\t * [currentItemEndPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic currentItemEndPoint: IPoint;\r\n\r\n\t/**\r\n\t * Holds reference to a function that accepts a DataItem and its index as\r\n\t * parameters.\r\n\t *\r\n\t * It can either return a fill opacity for a fill, or manipulate data item\r\n\t * directly, to create various highlighting scenarios.\r\n\t *\r\n\t * For example, you can set it up to highlight only weekends on a\r\n\t * [[DateAxis]].\r\n\t */\r\n\tpublic fillRule(dataItem: this[\"_dataItem\"], index?: number): void {\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = dataItem.index;\r\n\t\t}\r\n\t\tif (index / 2 == Math.round(index / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t\tdataItem.axisFill.opacity = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.opacity = 1;\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Full length of the axis, in pixels.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic axisFullLength: number;\r\n\r\n\t/**\r\n\t * Ghost label is used to prevent chart shrinking/expanding when zooming or\r\n\t * when data is invalidated. You can set custom text on it so that it would\r\n\t * be bigger/smaller,\r\n\t */\r\n\tpublic ghostLabel: AxisLabel;\r\n\r\n\t/**\r\n\t * Specifies if axis should be automatically disposed when removing from\r\n\t * chart's axis list.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic autoDispose: boolean = true;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Axis\";\r\n\t\tthis.shouldClone = false;\r\n\t\tthis.setPropertyValue(\"cursorTooltipEnabled\", true);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create title\r\n\t\tthis.title = new Label();\r\n\t\tthis.title.shouldClone = false;\r\n\t\tthis._disposers.push(this.title);\r\n\t\tthis.setPropertyValue(\"startLocation\", 0);\r\n\t\tthis.setPropertyValue(\"endLocation\", 1);\r\n\r\n\t\t// Data item iterator\r\n\t\tthis._dataItemsIterator = new $iter.ListIterator<this[\"_dataItem\"]>(this.dataItems, () => this.dataItems.create());\r\n\t\tthis._dataItemsIterator.createNewItems = true;\r\n\r\n\t\t// Create tooltip\r\n\t\tlet tooltip: Tooltip = new Tooltip();\r\n\t\tthis._disposers.push(tooltip);\r\n\t\ttooltip.label.padding(5, 10, 5, 10);\r\n\t\ttooltip.background.pointerLength = 5;\r\n\t\ttooltip.fitPointerToBounds = true;\r\n\t\ttooltip.background.filters.clear();\r\n\r\n\t\t// Set virtual parentfor the tooltip so that it can properly inheirt\r\n\t\t// formatters from the axis.\r\n\t\ttooltip.virtualParent = this;\r\n\r\n\t\t// Create background element for the tooltip\r\n\t\tlet background: PointedRectangle = <PointedRectangle>tooltip.background;\r\n\t\tbackground.cornerRadius = 0;\r\n\t\tbackground.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tbackground.stroke = background.fill;\r\n\t\tbackground.strokeWidth = 1;\r\n\t\tbackground.fillOpacity = 1;\r\n\t\ttooltip.label.fill = interfaceColors.getFor(\"alternativeText\");\r\n\r\n\t\tthis.tooltip = tooltip;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new AxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates layout.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLayout(): void {\r\n\t\tsuper.invalidateLayout();\r\n\t\t// this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidateLayout();\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates series of this axis.\r\n\t */\r\n\tpublic invalidateSeries(): void {\r\n\t\t// this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Override to cancel super call for data element validation.\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tif (this.ghostLabel) {\r\n\t\t\tthis.renderer.updateLabelElement(this.ghostLabel, this.start, this.end);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the number of grid items on the axis.\r\n\t */\r\n\tprotected updateGridCount() {\r\n\t\tif (this.renderer) {\r\n\t\t\tthis._gridCount = this.axisLength / this.renderer.minGridDistance;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(): void {\r\n\r\n\t\tthis.axisFullLength = this.axisLength / (this.end - this.start);\r\n\r\n\t\tsuper.validateLayout();\r\n\t\tthis.updateGridCount();\r\n\t\tthis.renderer.updateAxisLine();\r\n\t\tthis.renderer.updateTooltip();\r\n\t\tthis.renderer.updateBaseGridElement();\r\n\r\n\t\tif (this._prevLength != this.axisLength) {\r\n\t\t\tthis.dispatchImmediately(\"lengthchanged\");\r\n\t\t\tthis._prevLength = this.axisLength;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a data item to the Axis.\r\n\t *\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic appendDataItem(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (dataItem.tick) {\r\n\t\t\tdataItem.tick.parent = renderer.gridContainer;\r\n\t\t}\r\n\r\n\t\tif (dataItem.label) {\r\n\t\t\tdataItem.label.parent = renderer;\r\n\t\t}\r\n\r\n\t\tif (dataItem.grid) {\r\n\t\t\tdataItem.grid.parent = renderer.gridContainer;\r\n\t\t}\r\n\r\n\t\tif (dataItem.axisFill) {\r\n\t\t\tdataItem.axisFill.parent = renderer.gridContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws Axis' related items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis.validateLayout();\r\n\r\n\t\tthis.renderer.updateGridContainer();\r\n\t}\r\n\r\n\t/**\r\n\t * Redars Axis ranges.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateAxisRanges(): void {\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\tthis.appendDataItem(axisRange);\r\n\t\t\tthis.validateDataElement(axisRange);\r\n\t\t\tif (axisRange.grid) {\r\n\t\t\t\taxisRange.grid.validate();\r\n\t\t\t}\r\n\t\t\tif (axisRange.tick) {\r\n\t\t\t\taxisRange.tick.validate();\r\n\t\t\t}\r\n\t\t\tif (axisRange.axisFill) {\r\n\t\t\t\taxisRange.axisFill.validate();\r\n\t\t\t}\r\n\t\t\tif (axisRange.label) {\r\n\t\t\t\taxisRange.label.validate();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all axis breaks, so they are redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateBreaks(): void {\r\n\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\taxisBreak.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Associates an Axis break with this Axis, after it is inserted into\r\n\t * `axisBreaks`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Event\r\n\t */\r\n\tpublic processBreak(event: IListEvents<this[\"_axisBreak\"]>[\"inserted\"]) {\r\n\t\tlet axisBreak: this[\"_axisBreak\"] = event.newValue;\r\n\t\taxisBreak.parent = this.renderer.breakContainer;\r\n\t\taxisBreak.axis = this;\r\n\t}\r\n\r\n\t/**\r\n\t * Registers a [[XYSeries]] element with this Axis.\r\n\t *\r\n\t * Returns a [[Disposer]] for all events, added to Series for watching\r\n\t * changes in Axis, and vice versa.\r\n\t * @ignore\r\n\t * @param series  Series\r\n\t * @return Event disposer\r\n\t */\r\n\tpublic registerSeries(series: XYSeries): IDisposer {\r\n\t\tthis.series.moveValue(series);\r\n\r\n\t\treturn new MultiDisposer([\r\n\t\t\tnew Disposer(() => {\r\n\t\t\t\tthis.series.removeValue(series);\r\n\t\t\t}),\r\n\r\n\t\t\tthis.events.on(\"lengthchanged\", series.invalidate, series, false),\r\n\t\t\tthis.events.on(\"startchanged\", series.invalidate, series, false),\r\n\t\t\tthis.events.on(\"endchanged\", series.invalidate, series, false)\r\n\r\n\t\t\t// TODO should these be disposed of ?\r\n\t\t\t//series.events.on(\"datavalidated\", this.processSeriesDataItems, this),\r\n\t\t\t//series.events.on(\"visibilitychanged\", this.processSeriesDataItems, this),\r\n\t\t\t//series.events.on(\"hidden\", this.processSeriesDataItems, this)\r\n\t\t]);\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisRenderer]] to be used to render this Axis.\r\n\t *\r\n\t * Please note that most of the settings, related to Axis' appearance are set\r\n\t * via its renderer. Not directly on the Axis.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.renderer.inside = true;\r\n\t * axis.renderer.minLabelPosition = 0.1;\r\n\t * axis.renderer.maxLabelPosition = 0.9;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.renderer.inside = true;\r\n\t * axis.renderer.minLabelPosition = 0.1;\r\n\t * axis.renderer.maxLabelPosition = 0.9;\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/} for more info\r\n\t * @param renderer  Renderer\r\n\t */\r\n\tpublic set renderer(renderer: this[\"_renderer\"]) {\r\n\t\tif (renderer != this._renderer) {\r\n\t\t\tthis._renderer = renderer;\r\n\t\t\trenderer.chart = this.chart;\r\n\t\t\trenderer.axis = this;\r\n\t\t\trenderer.parent = this;\r\n\t\t\tthis.title.parent = this; // we add title to axis and set layout in renderer to avoid one extra container, as otherwise axis container would be used for holding renderer only\r\n\t\t\tthis.initRenderer();\r\n\r\n\t\t\tthis._disposers.push(renderer.gridContainer.events.on(\"maxsizechanged\", this.invalidate, this, false));\r\n\r\n\t\t\tlet ghostLabel = this.renderer.labels.create();\r\n\t\t\tthis._disposers.push(ghostLabel);\r\n\t\t\tghostLabel.dataItem = this.dataItems.template.clone(); // just for the adapters not to fail\r\n\t\t\tghostLabel.text = \"L\";\r\n\t\t\tghostLabel.parent = this.renderer;\r\n\t\t\tghostLabel.shouldClone = false;\r\n\t\t\tghostLabel.fillOpacity = 0;\r\n\t\t\tghostLabel.opacity = 0;\r\n\t\t\tghostLabel.strokeOpacity = 0;\r\n\t\t\tghostLabel.interactionsEnabled = false;\r\n\t\t\tghostLabel.validate();\r\n\r\n\t\t\tthis.ghostLabel = ghostLabel;\r\n\r\n\t\t\tthis.events.on(\"beforedatavalidated\", () => {\r\n\t\t\t\tghostLabel.text = \"L\";\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Renderer\r\n\t */\r\n\tpublic get renderer(): this[\"_renderer\"] {\r\n\t\treturn this._renderer;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a relative position to angle. (for circular axes)\r\n\t *\r\n\t * @param position Position (0-1)\r\n\t * @return Angle\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\treturn this.renderer.positionToAngle(position);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel coordinates to a relative position. (0-1)\r\n\t *\r\n\t * @param point  Coorinates (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint): number {\r\n\t\treturn this.renderer.pointToPosition(point);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param start  [description]\r\n\t * @param end    [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: any, end: any): string {\r\n\t\treturn this.renderer.getPositionRangePath(start, end);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts any positional parameter to a relative position on axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Pisition\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic anyToPosition(value: any): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts any positional parameter to a relative position on axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Pisition\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic anyToPoint(value: any): IOrientationPoint {\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition [description]\r\n\t * @param endPosition   [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\treturn this.renderer.getPositionRangePath(startPosition, endPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Actual axis length in pixels.\r\n\t *\r\n\t * @return Axis length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.renderer.axisLength;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if axis should display a tooltip for chart's cursor.\r\n\t *\r\n\t * @param value Display tooltip?\r\n\t */\r\n\tpublic set cursorTooltipEnabled(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"cursorTooltipEnabled\", value)) {\r\n\t\t\tif (value && this.renderer) {\r\n\t\t\t\tthis.renderer.updateTooltip();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Display tooltip?\r\n\t */\r\n\tpublic get cursorTooltipEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorTooltipEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n\t *\r\n\t * @param position Position (0-1)\r\n\t * @param local or global position\r\n\t */\r\n\tpublic showTooltipAtPosition(position: number, local?: boolean) {\r\n\r\n\t\tlet tooltip: Tooltip = this._tooltip;\r\n\r\n\t\tif (!local) {\r\n\t\t\tposition = this.toAxisPosition(position);\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(position) || position < 0 || position > 1) {\r\n\t\t\ttooltip.hide(0);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet renderer = this.renderer;\r\n\r\n\t\tif (tooltip && this.dataItems.length > 0) {\r\n\t\t\t//@todo: think of how to solve this better\r\n\t\t\tif (tooltip && !tooltip.parent) {\r\n\t\t\t\ttooltip.parent = this.tooltipContainer;\r\n\t\t\t}\r\n\r\n\t\t\tlet tooltipLocation = renderer.tooltipLocation;\r\n\r\n\t\t\tlet startPosition: number = this.getCellStartPosition(position);\r\n\t\t\tlet endPosition: number = this.getCellEndPosition(position);\r\n\r\n\t\t\tif (this.tooltipPosition == \"fixed\") {\r\n\t\t\t\tposition = startPosition + (endPosition - startPosition) * tooltipLocation;\r\n\t\t\t}\r\n\t\t\tposition = $math.fitToRange(position, this.start, this.end);\r\n\r\n\t\t\tlet startPoint: IPoint = renderer.positionToPoint(startPosition);\r\n\t\t\tlet endPoint: IPoint = renderer.positionToPoint(endPosition);\r\n\r\n\t\t\t// save values so cursor could use them\r\n\t\t\tthis.currentItemStartPoint = startPoint;\r\n\t\t\tthis.currentItemEndPoint = endPoint;\r\n\r\n\t\t\tif (renderer.fullWidthTooltip) {\r\n\t\t\t\ttooltip.width = endPoint.x - startPoint.x;\r\n\t\t\t\ttooltip.height = endPoint.y - startPoint.y;\r\n\t\t\t}\r\n\r\n\t\t\tlet point: IPoint = renderer.positionToPoint(position);\r\n\t\t\tlet globalPoint: IPoint = $utils.spritePointToSvg(point, this.renderer.line);\r\n\t\t\ttooltip.text = this.getTooltipText(position);\r\n\r\n\t\t\tif (tooltip.text) {\r\n\t\t\t\ttooltip.pointTo(globalPoint);\r\n\t\t\t\ttooltip.show();\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.cursorTooltipEnabled) {\r\n\t\t\t\ttooltip.hide(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) to Axis position with zoom level and\r\n\t * inversed taken into account.\r\n\t *\r\n\t * @param position Global position (0-1)\r\n\t * @return Position within Axis (0-1)\r\n\t */\r\n\tpublic toAxisPosition(position: number): number {\r\n\r\n\t\tposition = this.renderer.toAxisPosition(position);\r\n\r\n\t\tif (position == undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tposition = position * (this.end - this.start);\r\n\t\tif (this.renderer.inversed) {\r\n\t\t\tposition = this.end - position;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = this.start + position;\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts position on the axis with zoom level and\r\n\t * inversed taken into account to global position.\r\n\t *\r\n\t * @param position Axis position (0-1)\r\n\t * @return Global position (0-1)\r\n\t */\r\n\tpublic toGlobalPosition(position: number): number {\r\n\t\tif (this.renderer.inversed) {\r\n\t\t\tposition = this.end - position;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = position - this.start;\r\n\t\t}\r\n\r\n\t\treturn position / (this.end - this.start);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to be used for cursor's Axis tooltip.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position coordinate (px)\r\n\t * @return Label text\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Axis' tooltip's position and possibly size, and pointer (stem)\r\n\t * place.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param pointerOrientation  Pointer (stem) orientation\r\n\t * @param boundingRectangle   A rectangle for tooltip to fit within\r\n\t */\r\n\tpublic updateTooltip(pointerOrientation: PointerOrientation, boundingRectangle: IRectangle): void {\r\n\t\tlet tooltip: Tooltip = this._tooltip;\r\n\t\tif (tooltip) {\r\n\t\t\ttooltip.pointerOrientation = pointerOrientation;\r\n\t\t\ttooltip.setBounds($utils.spriteRectToSvg(boundingRectangle, this.renderer.line));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [roundPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param position  Relative position\r\n\t * @param location  Location on axis\r\n\t * @return Rounded position\r\n\t */\r\n\tpublic roundPosition(position: number, location: AxisItemLocation): number {\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * [getCellStartPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param position [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * [getCellEndPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param position [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of axis ranges for this Axis.\r\n\t *\r\n\t * @return Axis ranges\r\n\t */\r\n\tpublic get axisRanges(): ListTemplate<this[\"_dataItem\"]> {\r\n\t\tif (!this._axisRanges) {\r\n\t\t\tlet dataItem: AxisDataItem = this.createDataItem();\r\n\t\t\tdataItem.isRange = true;\r\n\t\t\tdataItem.axisFill = this.renderer.axisFills.template.clone();\r\n\t\t\tdataItem.grid = this.renderer.grid.template.clone();\r\n\t\t\tdataItem.tick = this.renderer.ticks.template.clone();\r\n\t\t\tdataItem.label = this.renderer.labels.template.clone();\r\n\r\n\t\t\tdataItem.isTemplate = true;\r\n\t\t\tdataItem.component = this;\r\n\t\t\tdataItem.axisFill.disabled = false;\r\n\t\t\tdataItem.tick.disabled = false;\r\n\t\t\tdataItem.grid.disabled = false;\r\n\t\t\tdataItem.label.disabled = false;\r\n\r\n\t\t\tthis._axisRanges = new ListTemplate<this[\"_dataItem\"]>(dataItem);\r\n\t\t\tthis._axisRanges.events.on(\"inserted\", this.processAxisRange, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._axisRanges));\r\n\t\t\tthis._disposers.push(this._axisRanges.template);\r\n\t\t}\r\n\t\treturn this._axisRanges;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an axis range after it has been added to the axis range list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected processAxisRange(event: IListEvents<this[\"_dataItem\"]>[\"inserted\"]) {\r\n\t\tlet axisRange: AxisDataItem = event.newValue;\r\n\t\taxisRange.component = this;\r\n\t\taxisRange.isRange = true;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of axis breaks on this Axis.\r\n\t *\r\n\t * @return Axis breaks.\r\n\t */\r\n\tpublic get axisBreaks(): SortedListTemplate<this[\"_axisBreak\"]> {\r\n\t\tif (!this._axisBreaks) {\r\n\t\t\tthis._axisBreaks = new SortedListTemplate<this[\"_axisBreak\"]>(this.createAxisBreak(), (a, b) => {\r\n\t\t\t\treturn $number.order(a.adjustedStartValue, b.adjustedStartValue);\r\n\t\t\t});\r\n\r\n\t\t\tthis._axisBreaks.events.on(\"inserted\", this.processBreak, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._axisBreaks));\r\n\t\t\tthis._disposers.push(this._axisBreaks.template);\r\n\t\t}\r\n\t\treturn this._axisBreaks;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new axis break.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new AxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Series currently associated with this Axis.\r\n\t *\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes Series' data items.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processSeriesDataItems(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes Series' single data item.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Post-processes Serie's data items.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic postProcessSeriesDataItems(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Post-processes Serie's single data item.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\t/**\r\n\t * Updates Axis based on all Series that might influence it.\r\n\t *\r\n\t * Called by Series after Series data is validated.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisBySeries(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Hides unused data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic hideUnusedDataItems(): void {\r\n\t\t// hide all unused\r\n\t\tlet dataItemsIterator: $iter.ListIterator<this[\"_dataItem\"]> = this._dataItemsIterator;\r\n\r\n\t\tdataItemsIterator.createNewItems = false;\r\n\r\n\t\t$iter.each(dataItemsIterator.iterator(), (dataItem) => {\r\n\t\t\tthis.validateDataElement(dataItem); // solves shrinking\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t});\r\n\r\n\t\tdataItemsIterator.clear();\r\n\t\tdataItemsIterator.createNewItems = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series' data item that corresponds to specific position on Axis.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param series    Series\r\n\t * @param position  Position (0-1)\r\n\t * @param findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n\t * @return Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle that corresponds to specific position on axis.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       ???\r\n\t * @param location  Location\r\n\t * @param stackKey  ???\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * [getX description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * [getY description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point coordinates\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic seriesDataChangeUpdate(series: XYSeries): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes axis breaks that fall between `min` and `max` (???)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param min  Start value\r\n\t * @param max  End value\r\n\t * @return Spread o\r\n\t */\r\n\tprotected adjustDifference(min: number, max: number): number {\r\n\t\tlet difference: number = max - min;\r\n\t\tif ($type.isNumber(difference)) {\r\n\t\t\t$iter.eachContinue(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\t\t\t\tif ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n\t\t\t\t\t// breaks are sorted, we don't need go further anymore\r\n\t\t\t\t\tif (startValue > max) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (endValue >= min) {\r\n\t\t\t\t\t\tif ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n\t\t\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t\t\tlet intersection: IRange = $math.intersection({ start: startValue, end: endValue }, { start: min, end: max });\r\n\r\n\t\t\t\t\t\t\tif (intersection) {\r\n\t\t\t\t\t\t\t\tdifference -= (intersection.end - intersection.start) * (1 - breakSize);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn difference;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if specific value falls within a break.\r\n\t *\r\n\t * Returns [[AxisBreak]] the value falls into.\r\n\t *\r\n\t * @param value  Value to check\r\n\t * @return Axis break\r\n\t */\r\n\tprotected isInBreak(value: number): this[\"_axisBreak\"] {\r\n\t\treturn $iter.find(this.axisBreaks.iterator(), (axisBreak) =>\r\n\t\t\tvalue >= axisBreak.adjustedStartValue &&\r\n\t\t\tvalue <= axisBreak.adjustedEndValue);\r\n\t}\r\n\r\n\t/**\r\n\t * [fixAxisBreaks description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected fixAxisBreaks(): void {\r\n\t\tlet axisBreaks: SortedListTemplate<this[\"_axisBreak\"]> = this.axisBreaks;\r\n\t\tif (axisBreaks.length > 0) {\r\n\t\t\t// first make sure that startValue is <= end value\r\n\t\t\t// This needs to make a copy of axisBreaks because it mutates the list while traversing\r\n\t\t\t// TODO very inefficient\r\n\t\t\t$array.each($iter.toArray(axisBreaks.iterator()), (axisBreak) => {\r\n\t\t\t\tlet startValue: number = $math.min(axisBreak.startValue, axisBreak.endValue);\r\n\t\t\t\tlet endValue: number = $math.max(axisBreak.startValue, axisBreak.endValue);\r\n\r\n\t\t\t\taxisBreak.adjustedStartValue = startValue;\r\n\t\t\t\taxisBreak.adjustedEndValue = endValue;\r\n\r\n\t\t\t\tthis.axisBreaks.update(axisBreak);\r\n\t\t\t});\r\n\r\n\r\n\t\t\tlet firstAxisBreak: this[\"_axisBreak\"] = axisBreaks.first;\r\n\t\t\tlet previousEndValue: number = Math.min(firstAxisBreak.startValue, firstAxisBreak.endValue);\r\n\r\n\t\t\t// process breaks\r\n\t\t\t// TODO does this need to call axisBreaks.update ?\r\n\t\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t// breaks can't overlap\r\n\t\t\t\t// if break starts before previous break ends\r\n\t\t\t\tif (startValue < previousEndValue) {\r\n\t\t\t\t\tstartValue = previousEndValue;\r\n\r\n\t\t\t\t\tif (endValue < previousEndValue) {\r\n\t\t\t\t\t\tendValue = previousEndValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\taxisBreak.adjustedStartValue = startValue;\r\n\t\t\t\taxisBreak.adjustedEndValue = endValue;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * We need start/end indexes of axes to be 0 - `dataItems.length`.\r\n\t *\r\n\t * Yes, also for category axis, this helps to avoid jumping of categories\r\n\t * while scrolling and does not do a lot of extra work as we use\r\n\t * protected `_startIndex` and `_endIndex` when working with items.\r\n\t *\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * [startIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set startIndex(value: number) {\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return [description]\r\n\t */\r\n\tpublic get startIndex(): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * [endIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set endIndex(value: number) {\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return [description]\r\n\t */\r\n\tpublic get endIndex(): number {\r\n\t\treturn this.dataItems.length;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a formatted label based on position.\r\n\t *\r\n\t * Individual axis types should override this method to generate a label\r\n\t * that is relevant to axis type.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\treturn Math.round(position * 100) + \"%x\";\r\n\t}\r\n\r\n\t/**\r\n\t * A Chart this Axis belongs to.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: Chart) {\r\n\t\tthis._chart = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): Chart {\r\n\t\treturn this._chart;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a data item for a Series range.\r\n\t *\r\n\t * @param series  Target Series\r\n\t * @return Range data item\r\n\t */\r\n\tpublic createSeriesRange(series: XYSeries): this[\"_dataItem\"] {\r\n\t\tlet range = this.axisRanges.create();\r\n\t\trange.component = this;\r\n\t\trange.axisFill = this.renderer.axisFills.template.clone();\r\n\t\trange.axisFill.disabled = false;\r\n\t\trange.axisFill.fillOpacity = 0;\r\n\r\n\t\trange.grid = this.renderer.grid.template.clone();\r\n\t\trange.grid.disabled = true;\r\n\r\n\t\trange.tick = this.renderer.ticks.template.clone();\r\n\t\trange.tick.disabled = true;\r\n\r\n\t\trange.label = this.renderer.labels.template.clone();\r\n\t\trange.label.disabled = true;\r\n\r\n\t\tseries.axisRanges.push(range);\r\n\t\treturn range;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.renderer) {\r\n\t\t\tthis.renderer.copyFrom(source.renderer);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tif(source.renderer){\r\n\t\t\t\tthis.renderer = source.renderer.clone();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (source.title) {\r\n\t\t\tthis.title = source.title.clone();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Resets internal iterator.\r\n\t */\r\n\tprotected resetIterators(): void {\r\n\t\tthis._dataItemsIterator.reset();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\r\n\t\t\t\t\t// If `series` is set, we know it's a series range\r\n\t\t\t\t\tif ($type.hasValue(range[\"series\"])) {\r\n\t\t\t\t\t\tif ($type.isString(range[\"series\"])) {\r\n\t\t\t\t\t\t\tif (this.map.hasKey(range[\"series\"])) {\r\n\t\t\t\t\t\t\t\t//range[\"series\"] = this.map.getKey(range[\"series\"]);\r\n\t\t\t\t\t\t\t\tconfig.axisRanges[i] = this.createSeriesRange(this.map.getKey(range[\"series\"]));\r\n\t\t\t\t\t\t\t\tdelete (range[\"series\"]);\r\n\t\t\t\t\t\t\t\tconfig.axisRanges[i].config = range;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Axis start location. Works on Date/Category axis, doesn't work on Value axis.\r\n\t *\r\n\t * * 0 - Full first cell is shown.\r\n\t * * 0.5 - Half of first cell is shown.\r\n\t * * 1 - None of the first cell is visible. (you probably don't want that)\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"startLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Axis end location. Works on Date/Category axis, doesn't work on Value axis.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"endLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Axis\"] = Axis;\r\nregistry.registeredClasses[\"AxisDataItem\"] = AxisDataItem;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Disable axis tooltips.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Axis && target.tooltip) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.cursorTooltipEnabled = false;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});"],"sourceRoot":""},"metadata":{},"sourceType":"module"}