{"ast":null,"code":"/**\n * Legend-related functionality.\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\n\nimport { Component } from \"../core/Component\";\nimport { DataItem } from \"../core/DataItem\";\nimport { ListTemplate, ListDisposer } from \"../core/utils/List\";\nimport { RoundedRectangle } from \"../core/elements/RoundedRectangle\";\nimport { Container } from \"../core/Container\";\nimport { Label } from \"../core/elements/Label\";\nimport { keyboard } from \"../core/utils/Keyboard\";\nimport { registry } from \"../core/Registry\";\nimport { getInteraction } from \"../core/interaction/Interaction\";\nimport { percent } from \"../core/utils/Percent\";\nimport { InterfaceColorSet } from \"../core/utils/InterfaceColorSet\";\nimport * as $utils from \"../core/utils/Utils\";\nimport * as $type from \"../core/utils/Type\";\nimport { Sprite } from \"../core/Sprite\";\nimport { Disposer } from \"../core/utils/Disposer\";\nimport { MouseCursorStyle } from \"../core/interaction/Mouse\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../core/utils/Responsive\";\n/**\n * ============================================================================\n * DATA ITEM\n * ============================================================================\n * @hidden\n */\n\n/**\n * Defines a [[DataItem]] for [[Legend]].\n *\n * @see {@link DataItem}\n */\n\nvar LegendDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(LegendDataItem, _super);\n  /**\n   * Constructor\n   */\n\n\n  function LegendDataItem() {\n    var _this = _super.call(this) || this;\n    /**\n     * @ignore\n     */\n\n\n    _this.childrenCreated = false;\n    _this.className = \"LegendDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(LegendDataItem.prototype, \"label\", {\n    /**\n     * A legend item's [[Label]] element.\n     *\n     * @return Label\n     */\n    get: function get() {\n      var _this = this;\n\n      if (!this._label) {\n        var label_1 = this.component.labels.create();\n        this._label = label_1;\n        this.addSprite(label_1);\n\n        this._disposers.push(label_1);\n\n        label_1.parent = this.itemContainer;\n\n        this._disposers.push(new Disposer(function () {\n          if ($type.hasValue(_this.component)) {\n            _this.component.labels.removeValue(label_1);\n          }\n        }));\n      }\n\n      return this._label;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LegendDataItem.prototype, \"color\", {\n    /**\n     * @return Main color\n     */\n    get: function get() {\n      return this.properties.color;\n    },\n\n    /**\n     * Main color of legend data item.\n     *\n     * This is set by the target element this legend item represents, like\n     * a Series or a Slice.\n     *\n     * It can be used to derive a color in legend's sub-items, like label:\n     *\n     * ```TypeScript\n     * chart.legend.labels.template.text = \"[{color}]{name}[/]\";\n     * ```\n     * ```JavaScript\n     * chart.legend.labels.template.text = \"[{color}]{name}[/]\";\n     * ```\n     * ```JSON\n     * {\n     *   // ...\n     *   \"legend\": {\n     *     // ...\n     *     \"labels\": {\n     *       \"text\": \"[{color}]{name}[/]\"\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/#Legend_labels} For more information about configuring legend labels.\n     * @param value  Main color\n     */\n    set: function set(value) {\n      this.setProperty(\"color\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LegendDataItem.prototype, \"valueLabel\", {\n    /**\n     * A legend item's [[Label]] element for \"value label\".\n     *\n     * @return Label\n     */\n    get: function get() {\n      var _this = this;\n\n      if (!this._valueLabel) {\n        var valueLabel_1 = this.component.valueLabels.create();\n        this._valueLabel = valueLabel_1;\n        this.addSprite(valueLabel_1);\n\n        this._disposers.push(valueLabel_1);\n\n        valueLabel_1.parent = this.itemContainer;\n\n        this._disposers.push(new Disposer(function () {\n          if ($type.hasValue(_this.component)) {\n            _this.component.valueLabels.removeValue(valueLabel_1);\n          }\n        }));\n      }\n\n      return this._valueLabel;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LegendDataItem.prototype, \"itemContainer\", {\n    /**\n     * A reference to the main [[Container]] that holds legend item's elements:\n     * marker and labels.\n     *\n     * @return Item container\n     */\n    get: function get() {\n      var _this = this;\n\n      if (!this._itemContainer) {\n        var component_1 = this.component;\n        var itemContainer_1 = component_1.itemContainers.create();\n        this._itemContainer = itemContainer_1;\n        this.addSprite(itemContainer_1);\n\n        this._disposers.push(itemContainer_1); // Add click/tap event to toggle item\n\n\n        if (itemContainer_1.togglable) {\n          itemContainer_1.events.on(\"toggled\", function (ev) {\n            component_1.toggleDataItem(ev.target.dataItem);\n          }, undefined, false);\n        } // Add focus event so that we can track which object is currently in focus\n        // for keyboard toggling\n\n\n        itemContainer_1.events.on(\"focus\", function (ev) {\n          component_1.focusedItem = ev.target.dataItem;\n        }, undefined, false);\n        itemContainer_1.events.on(\"blur\", function (ev) {\n          component_1.focusedItem = undefined;\n        }, undefined, false);\n\n        this._disposers.push(new Disposer(function () {\n          if ($type.hasValue(_this.component)) {\n            _this.component.itemContainers.removeValue(itemContainer_1);\n          }\n        }));\n\n        if (this.dataContext.uidAttr) {\n          itemContainer_1.readerControls = this.dataContext.uidAttr();\n          itemContainer_1.readerLabelledBy = this.dataContext.uidAttr();\n        }\n\n        var sprite = this.dataContext;\n\n        if (sprite instanceof DataItem || sprite instanceof Sprite) {\n          itemContainer_1.addDisposer(sprite.events.on(\"visibilitychanged\", function (ev) {\n            itemContainer_1.readerChecked = ev.visible;\n            itemContainer_1.events.disableType(\"toggled\");\n            itemContainer_1.isActive = !ev.visible;\n            itemContainer_1.events.enableType(\"toggled\");\n          }, undefined, false));\n          sprite.addDisposer(new Disposer(function () {\n            if (_this.component) {\n              _this.component.dataItems.remove(_this);\n            }\n          }));\n\n          if (sprite instanceof Sprite) {\n            itemContainer_1.addDisposer(sprite.events.on(\"hidden\", function (ev) {\n              itemContainer_1.readerChecked = false;\n              itemContainer_1.events.disableType(\"toggled\");\n              itemContainer_1.isActive = true;\n              itemContainer_1.events.enableType(\"toggled\");\n            }, undefined, false));\n            itemContainer_1.addDisposer(sprite.events.on(\"shown\", function (ev) {\n              itemContainer_1.readerChecked = true;\n              itemContainer_1.events.disableType(\"toggled\");\n              itemContainer_1.isActive = false;\n              itemContainer_1.events.enableType(\"toggled\");\n            }, undefined, false));\n          }\n        }\n      }\n\n      return this._itemContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LegendDataItem.prototype, \"marker\", {\n    /**\n     * A [[Container]] that holds legend item's marker element.\n     *\n     * @return Marker\n     */\n    get: function get() {\n      var _this = this;\n\n      if (!this._marker) {\n        var marker_1 = this.component.markers.create();\n        this._marker = marker_1;\n        marker_1.parent = this.itemContainer;\n        this.addSprite(marker_1);\n\n        this._disposers.push(marker_1);\n\n        this._disposers.push(new Disposer(function () {\n          if ($type.hasValue(_this.component)) {\n            _this.component.markers.removeValue(marker_1);\n          }\n        }));\n      }\n\n      return this._marker;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return LegendDataItem;\n}(DataItem);\n\nexport { LegendDataItem };\n/**\n * ============================================================================\n * REQUISITES\n * ============================================================================\n * @hidden\n */\n\n/**\n * Defines a class that carries legend settings.\n *\n * A legend might change its settings dynamically. Legend can also be shared\n * by several elements, requiring different settings.\n *\n * Having legend's settings in a separate object is a good way to \"hot swap\"\n * a set of settings for the legend.\n */\n\nvar LegendSettings =\n/** @class */\nfunction () {\n  function LegendSettings() {\n    /**\n     * Should marker be created for each legend item.\n     */\n    this.createMarker = true;\n  }\n\n  return LegendSettings;\n}();\n\nexport { LegendSettings };\n/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * [[Legend]] class is used to create legend for the chart.\n *\n * @see {@link ILegendEvents} for a list of available events\n * @see {@link ILegendAdapters} for a list of available Adapters\n * @todo Verify/implement dynamic updating of legend items once the properties of related Series change\n */\n\nvar Legend =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Legend, _super);\n  /**\n   * Constructor\n   */\n\n\n  function Legend() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Legend\"; // Set defaults\n\n    _this.layout = \"grid\";\n\n    _this.setPropertyValue(\"useDefaultMarker\", false);\n\n    _this.setPropertyValue(\"contentAlign\", \"center\"); // Create a template container and list for legend items\n\n\n    var itemContainer = new Container();\n    itemContainer.applyOnClones = true;\n    itemContainer.padding(10, 0, 10, 0);\n    itemContainer.margin(0, 10, 0, 0);\n    itemContainer.layout = \"horizontal\";\n    itemContainer.clickable = true;\n    itemContainer.focusable = true;\n    itemContainer.role = \"switch\";\n    itemContainer.togglable = true;\n    itemContainer.cursorOverStyle = MouseCursorStyle.pointer;\n    itemContainer.background.fillOpacity = 0; // creates hit area\n    // Create container list using item template we just created\n\n    _this.itemContainers = new ListTemplate(itemContainer);\n\n    _this._disposers.push(new ListDisposer(_this.itemContainers));\n\n    _this._disposers.push(_this.itemContainers.template); // Set up global keyboard events for toggling elements\n\n\n    _this._disposers.push(getInteraction().body.events.on(\"keyup\", function (ev) {\n      if (keyboard.isKey(ev.event, \"enter\") && _this.focusedItem) {\n        _this.toggleDataItem(_this.focusedItem);\n      }\n    }, _this));\n\n    var interfaceColors = new InterfaceColorSet(); // Create a template container and list for the a marker\n\n    var marker = new Container();\n    marker.width = 23;\n    marker.height = 23;\n    marker.interactionsEnabled = false;\n    marker.applyOnClones = true;\n    marker.setStateOnChildren = true;\n    marker.background.fillOpacity = 0;\n    marker.background.strokeOpacity = 0;\n    marker.propertyFields.fill = \"fill\";\n    marker.valign = \"middle\";\n    var disabledColor = interfaceColors.getFor(\"disabledBackground\");\n    marker.events.on(\"childadded\", function (event) {\n      var child = event.newValue;\n      var activeState = child.states.create(\"active\");\n      activeState.properties.stroke = disabledColor;\n      activeState.properties.fill = disabledColor;\n    });\n    _this.markers = new ListTemplate(marker);\n\n    _this._disposers.push(new ListDisposer(_this.markers));\n\n    _this._disposers.push(_this.markers.template); // Create a legend background element\n\n\n    var rectangle = marker.createChild(RoundedRectangle);\n    rectangle.width = percent(100);\n    rectangle.height = percent(100);\n    rectangle.applyOnClones = true;\n    rectangle.propertyFields.fill = \"fill\";\n    rectangle.strokeOpacity = 0; // Create a template container and list for item labels\n\n    var label = new Label();\n    label.text = \"{name}\";\n    label.margin(0, 5, 0, 5);\n    label.valign = \"middle\";\n    label.applyOnClones = true;\n    label.states.create(\"active\").properties.fill = interfaceColors.getFor(\"disabledBackground\");\n    _this.labels = new ListTemplate(label);\n\n    _this._disposers.push(new ListDisposer(_this.labels));\n\n    _this._disposers.push(_this.labels.template);\n\n    label.interactionsEnabled = false; // Create a template container and list for item value labels\n\n    var valueLabel = new Label();\n    valueLabel.margin(0, 5, 0, 0);\n    valueLabel.valign = \"middle\";\n    valueLabel.width = 50; // to avoid rearranging legend entries when value changes.\n\n    valueLabel.align = \"right\";\n    valueLabel.textAlign = \"end\";\n    valueLabel.applyOnClones = true;\n    valueLabel.states.create(\"active\").properties.fill = interfaceColors.getFor(\"disabledBackground\");\n    valueLabel.interactionsEnabled = false;\n    _this.valueLabels = new ListTemplate(valueLabel);\n\n    _this._disposers.push(new ListDisposer(_this.valueLabels));\n\n    _this._disposers.push(_this.valueLabels.template);\n\n    _this.position = \"bottom\"; // don't use setPropertyValue here!\n    // Create a state for disabled legend items\n\n    itemContainer.states.create(\"active\");\n    itemContainer.setStateOnChildren = true; // Apply accessibility settings\n\n    _this.role = \"group\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\n   * Sets defaults that instantiate some objects that rely on parent, so they\n   * cannot be set in constructor.\n   */\n\n\n  Legend.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Legend\");\n    }\n  };\n  /**\n   * Returns a new/empty DataItem of the type appropriate for this object.\n   *\n   * @see {@link DataItem}\n   * @return Data Item\n   */\n\n\n  Legend.prototype.createDataItem = function () {\n    return new LegendDataItem();\n  };\n  /**\n   * [validateDataElement description]\n   *\n   * @ignore Exclude from docs\n   * @param dataItem Data item\n   * @todo Description\n   * @todo Figure out how to update appearance of legend item without losing focus\n   * @todo Update legend marker appearance as apperance of related series changes\n   */\n\n\n  Legend.prototype.validateDataElement = function (dataItem) {\n    _super.prototype.validateDataElement.call(this, dataItem); // Get data item (legend item's) container\n\n\n    var container = dataItem.itemContainer;\n    var marker = dataItem.marker;\n    $utils.used(dataItem.label);\n    var valueLabel = dataItem.valueLabel; // Set parent and update current state\n\n    container.parent = this;\n    container.readerChecked = dataItem.dataContext.visible; // Tell series its legend data item\n\n    dataItem.dataContext.legendDataItem = dataItem;\n    var legendSettings = dataItem.dataContext.legendSettings; // If we are not using default markers, create a unique legend marker based\n    // on the data item type\n\n    var dataContext = dataItem.dataContext;\n\n    if (dataContext.createLegendMarker && (!this.useDefaultMarker || !(dataContext instanceof Sprite))) {\n      if (!dataItem.childrenCreated) {\n        dataContext.createLegendMarker(marker);\n        dataItem.childrenCreated = true;\n      }\n    }\n\n    if (dataContext.updateLegendValue) {\n      dataContext.updateLegendValue(); // this solves issue with external legend, as legend is created after chart updates legend values\n    }\n\n    if (valueLabel.invalid) {\n      valueLabel.validate();\n    }\n\n    if (valueLabel.currentText == \"\" || valueLabel.currentText == undefined) {\n      valueLabel.__disabled = true;\n    } else {\n      valueLabel.__disabled = false;\n    }\n\n    if (legendSettings && (legendSettings.itemValueText != undefined || legendSettings.valueText != undefined)) {\n      valueLabel.__disabled = false;\n    }\n\n    var visible = dataItem.dataContext.visible;\n\n    if (visible === undefined) {\n      visible = true;\n    }\n\n    visible = $type.toBoolean(visible);\n    dataItem.dataContext.visible = visible;\n    container.events.disableType(\"toggled\");\n    container.isActive = !visible;\n    container.events.enableType(\"toggled\");\n  };\n\n  Object.defineProperty(Legend.prototype, \"position\", {\n    /**\n     * @return Position\n     */\n    get: function get() {\n      return this.getPropertyValue(\"position\");\n    },\n\n    /**\n     * Position of the legend.\n     *\n     * Options: \"left\", \"right\", \"top\", \"bottom\" (default), or \"absolute\".\n     *\n     * IMPORTANT: [[MapChart]] will ignore this setting, as it is using different\n     * layout structure than other charts.\n     *\n     * To position legend in [[MapChart]] set legend's `align` (`\"left\"` or\n     * `\"right\"`) and `valign` (`\"top\"` or `\"bottom\"`) properties instead.\n     *\n     * @default \"bottom\"\n     * @param value  Position\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"position\", value)) {\n        if (value == \"left\" || value == \"right\") {\n          this.margin(10, 20, 10, 20);\n          this.valign = \"middle\";\n          this.itemContainers.template.width = percent(100);\n          this.valueLabels.template.width = percent(100);\n          this.labels.template.truncate = true;\n          this.labels.template.fullWords = false;\n        } else {\n          this.itemContainers.template.width = undefined;\n          this.itemContainers.template.maxWidth = undefined;\n          this.valueLabels.template.width = 50;\n          this.labels.template.truncate = false;\n          this.width = percent(100);\n        }\n\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Legend.prototype, \"useDefaultMarker\", {\n    /**\n     * @return Use default marker?\n     */\n    get: function get() {\n      return this.getPropertyValue(\"useDefaultMarker\");\n    },\n\n    /**\n     * Should legend try to mirror the look of the related item when building\n     * the marker for legend item?\n     *\n     * If set to `true` it will try to make the marker look like its related\n     * item.\n     *\n     * E.g. if an item is for a Line Series, it will display a line of the\n     * same thickness, color, and will use the same bullets if series have them.\n     *\n     * @default false\n     * @param value Use default marker?\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"useDefaultMarker\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Toggles a legend item.\n   *\n   * @ignore Exclude from docs\n   * @param item Legend item\n   * @todo Maybe do it with togglable instead\n   */\n\n  Legend.prototype.toggleDataItem = function (item) {\n    var dataContext = item.dataContext;\n\n    if (!dataContext.visible || dataContext.isHiding || dataContext instanceof Sprite && dataContext.isHidden) {\n      item.color = item.colorOrig;\n      item.itemContainer.isActive = false;\n\n      if (dataContext.hidden === true) {\n        dataContext.hidden = false;\n      }\n\n      if (dataContext.show) {\n        dataContext.show();\n      } else {\n        dataContext.visible = true;\n      }\n    } else {\n      item.itemContainer.isActive = true;\n\n      if (dataContext.hide) {\n        dataContext.hide();\n      } else {\n        dataContext.visible = false;\n      }\n\n      item.color = new InterfaceColorSet().getFor(\"disabledBackground\");\n    }\n  };\n\n  Object.defineProperty(Legend.prototype, \"preloader\", {\n    /**\n     * Override preloader method so that legend does not accidentally show its\n     * own preloader.\n     *\n     * @ignore Exclude from docs\n     * @return Always `undefined`\n     */\n    get: function get() {\n      return;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * [handleDataItemPropertyChange description]\n   *\n   * @ignore Exclude from docs\n   */\n\n  Legend.prototype.handleDataItemPropertyChange = function (dataItem, name) {\n    dataItem.valueLabel.invalidate();\n    dataItem.label.invalidate();\n  };\n\n  return Legend;\n}(Component);\n\nexport { Legend };\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n *\n * @ignore\n */\n\nregistry.registeredClasses[\"Legend\"] = Legend;\n/**\n * Add default responsive rules\n */\n\n/**\n * Move legend to below the chart if chart is narrow\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.widthXS,\n  state: function state(target, stateId) {\n    if (target instanceof Legend && (target.position == \"left\" || target.position == \"right\")) {\n      var state = target.states.create(stateId);\n      state.properties.position = \"bottom\";\n      return state;\n    }\n\n    return null;\n  }\n});\n/**\n * Move legend to the right if chart is very short\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.heightXS,\n  state: function state(target, stateId) {\n    if (target instanceof Legend && (target.position == \"top\" || target.position == \"bottom\")) {\n      var state = target.states.create(stateId);\n      state.properties.position = \"right\";\n      return state;\n    }\n\n    return null;\n  }\n});\n/**\n * Disable legend altogether on small charts\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.isXS,\n  state: function state(target, stateId) {\n    if (target instanceof Legend) {\n      var state = target.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n\n    return null;\n  }\n});","map":{"version":3,"sources":["../../../../src/.internal/charts/Legend.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Legend-related functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentAdapters, IComponentEvents } from \"../core/Component\";\r\nimport { DataItem } from \"../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../core/utils/List\";\r\nimport { RoundedRectangle } from \"../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../core/Container\";\r\nimport { Label } from \"../core/elements/Label\";\r\nimport { Optional } from \"../core/utils/Type\";\r\nimport { Preloader } from \"../core/elements/Preloader\";\r\nimport { keyboard } from \"../core/utils/Keyboard\";\r\nimport { registry } from \"../core/Registry\";\r\nimport { getInteraction } from \"../core/interaction/Interaction\";\r\nimport { percent } from \"../core/utils/Percent\";\r\nimport { InterfaceColorSet } from \"../core/utils/InterfaceColorSet\";\r\nimport { Color } from \"../core/utils/Color\";\r\nimport { RadialGradient } from \"../core/rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../core/rendering/fills/LinearGradient\";\r\nimport { Pattern } from \"../core/rendering/fills/Pattern\";\r\nimport * as $utils from \"../core/utils/Utils\";\r\nimport * as $type from \"../core/utils/Type\";\r\nimport { Sprite } from \"../core/Sprite\";\r\nimport { Disposer } from \"../core/utils/Disposer\";\r\nimport { MouseCursorStyle } from \"../core/interaction/Mouse\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Legend]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LegendDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * A container data item's elements will be placed in.\r\n\t */\r\n\tprotected _itemContainer: Container;\r\n\r\n\t/**\r\n\t * A [[Label]] element for the item label.\r\n\t */\r\n\tprotected _label: Label;\r\n\r\n\t/**\r\n\t * A [[Container]] for legend item marker.\r\n\t */\r\n\tprotected _marker: Container;\r\n\r\n\t/**\r\n\t * A [[Label]] element for the value label.\r\n\t */\r\n\tprotected _valueLabel: Label;\r\n\r\n\t/**\r\n\t * A data context for legend item.\r\n\t */\r\n\tpublic dataContext: any;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Legend;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic childrenCreated: boolean = false;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic colorOrig: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LegendDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A legend item's [[Label]] element.\r\n\t *\r\n\t * @return Label\r\n\t */\r\n\tpublic get label(): Label {\r\n\t\tif (!this._label) {\r\n\t\t\tlet label = this.component.labels.create();\r\n\t\t\tthis._label = label;\r\n\t\t\tthis.addSprite(label);\r\n\t\t\tthis._disposers.push(label);\r\n\t\t\tlabel.parent = this.itemContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.labels.removeValue(label);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * Main color of legend data item.\r\n\t *\r\n\t * This is set by the target element this legend item represents, like\r\n\t * a Series or a Slice.\r\n\t *\r\n\t * It can be used to derive a color in legend's sub-items, like label:\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.legend.labels.template.text = \"[{color}]{name}[/]\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.legend.labels.template.text = \"[{color}]{name}[/]\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"legend\": {\r\n\t *     // ...\r\n\t *     \"labels\": {\r\n\t *       \"text\": \"[{color}]{name}[/]\"\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/#Legend_labels} For more information about configuring legend labels.\r\n\t * @param value  Main color\r\n\t */\r\n\tpublic set color(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Main color\r\n\t */\r\n\tpublic get color(): $type.Optional<Color | Pattern | LinearGradient | RadialGradient> {\r\n\t\treturn this.properties.color;\r\n\t}\r\n\r\n\t/**\r\n\t * A legend item's [[Label]] element for \"value label\".\r\n\t *\r\n\t * @return Label\r\n\t */\r\n\tpublic get valueLabel(): Label {\r\n\t\tif (!this._valueLabel) {\r\n\t\t\tlet valueLabel = this.component.valueLabels.create();\r\n\t\t\tthis._valueLabel = valueLabel;\r\n\r\n\t\t\tthis.addSprite(valueLabel);\r\n\t\t\tthis._disposers.push(valueLabel);\r\n\t\t\tvalueLabel.parent = this.itemContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.valueLabels.removeValue(valueLabel);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._valueLabel;\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to the main [[Container]] that holds legend item's elements:\r\n\t * marker and labels.\r\n\t *\r\n\t * @return Item container\r\n\t */\r\n\tpublic get itemContainer(): Container {\r\n\t\tif (!this._itemContainer) {\r\n\r\n\t\t\tlet component = this.component;\r\n\r\n\t\t\tlet itemContainer = component.itemContainers.create();\r\n\t\t\tthis._itemContainer = itemContainer;\r\n\t\t\tthis.addSprite(itemContainer);\r\n\t\t\tthis._disposers.push(itemContainer);\r\n\r\n\r\n\t\t\t// Add click/tap event to toggle item\r\n\t\t\tif(itemContainer.togglable){\r\n\t\t\t\titemContainer.events.on(\"toggled\", (ev) => {\r\n\t\t\t\t\tcomponent.toggleDataItem(<this>ev.target.dataItem);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\r\n\t\t\t// Add focus event so that we can track which object is currently in focus\r\n\t\t\t// for keyboard toggling\r\n\t\t\titemContainer.events.on(\"focus\", (ev) => {\r\n\t\t\t\tcomponent.focusedItem = <this>ev.target.dataItem;\r\n\t\t\t}, undefined, false);\r\n\t\t\titemContainer.events.on(\"blur\", (ev) => {\r\n\t\t\t\tcomponent.focusedItem = undefined;\r\n\t\t\t}, undefined, false);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.itemContainers.removeValue(itemContainer);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tif (this.dataContext.uidAttr) {\r\n\t\t\t\titemContainer.readerControls = this.dataContext.uidAttr();\r\n\t\t\t\titemContainer.readerLabelledBy = this.dataContext.uidAttr();\r\n\t\t\t}\r\n\r\n\t\t\tlet sprite = <any>this.dataContext;\r\n\t\t\tif (sprite instanceof DataItem || sprite instanceof Sprite) {\r\n\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\tsprite.events.on(\"visibilitychanged\", (ev) => {\r\n\t\t\t\t\t\titemContainer.readerChecked = ev.visible;\r\n\t\t\t\t\t\titemContainer.events.disableType(\"toggled\");\r\n\t\t\t\t\t\titemContainer.isActive = !ev.visible;\r\n\t\t\t\t\t\titemContainer.events.enableType(\"toggled\");\r\n\t\t\t\t\t}, undefined, false)\r\n\t\t\t\t)\r\n\r\n\t\t\t\tsprite.addDisposer(new Disposer(() => {\r\n\t\t\t\t\tif (this.component) {\r\n\t\t\t\t\t\tthis.component.dataItems.remove(this);\r\n\t\t\t\t\t}\r\n\t\t\t\t}))\r\n\r\n\t\t\t\tif (sprite instanceof Sprite) {\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"hidden\", (ev) => {\r\n\t\t\t\t\t\t\titemContainer.readerChecked = false;\r\n\t\t\t\t\t\t\titemContainer.events.disableType(\"toggled\");\r\n\t\t\t\t\t\t\titemContainer.isActive = true;\r\n\t\t\t\t\t\t\titemContainer.events.enableType(\"toggled\");\r\n\t\t\t\t\t\t}, undefined, false)\r\n\t\t\t\t\t)\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"shown\", (ev) => {\r\n\t\t\t\t\t\t\titemContainer.readerChecked = true;\r\n\t\t\t\t\t\t\titemContainer.events.disableType(\"toggled\");\r\n\t\t\t\t\t\t\titemContainer.isActive = false;\r\n\t\t\t\t\t\t\titemContainer.events.enableType(\"toggled\");\r\n\t\t\t\t\t\t}, undefined, false)\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._itemContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Container]] that holds legend item's marker element.\r\n\t *\r\n\t * @return Marker\r\n\t */\r\n\tpublic get marker(): Container {\r\n\t\tif (!this._marker) {\r\n\t\t\tlet marker = this.component.markers.create();\r\n\t\t\tthis._marker = marker;\r\n\t\t\tmarker.parent = this.itemContainer;\r\n\t\t\tthis.addSprite(marker);\r\n\t\t\tthis._disposers.push(marker);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.markers.removeValue(marker);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._marker;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a class that carries legend settings.\r\n *\r\n * A legend might change its settings dynamically. Legend can also be shared\r\n * by several elements, requiring different settings.\r\n *\r\n * Having legend's settings in a separate object is a good way to \"hot swap\"\r\n * a set of settings for the legend.\r\n */\r\nexport class LegendSettings {\r\n\r\n\t/**\r\n\t * [valueText description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic valueText: string;\r\n\r\n\t/**\r\n\t * [labelText description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic labelText: string;\r\n\r\n\t/**\r\n\t * A text template for the value part of the legend item.\r\n\t */\r\n\tpublic itemValueText: string;\r\n\r\n\t/**\r\n\t * A text template for the label part of the legend item.\r\n\t */\r\n\tpublic itemLabelText: string;\r\n\r\n\t/**\r\n\t * Should marker be created for each legend item.\r\n\t */\r\n\tpublic createMarker: boolean = true;\r\n}\r\n\r\n/**\r\n * Represents types available for Legend position. Not all charts will pay attention to this, like MapChart. You'll need to use legend.align and legend.valign properties to position legend on MapChart.\r\n */\r\nexport type LegendPosition = \"left\" | \"right\" | \"top\" | \"bottom\" | \"absolute\";\r\n\r\n/**\r\n * Defines data fields for [[Legend]].\r\n */\r\nexport interface ILegendDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * A field name in the data item which holds name of the legend item.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A field name in data item which holds boolean value whether item should\r\n\t * be displayed in legend or not.\r\n\t */\r\n\tvisible?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[Legend]].\r\n */\r\nexport interface ILegendProperties extends IComponentProperties {\r\n\r\n\t/**\r\n\t * Should legend use default marker?\r\n\t *\r\n\t * If set to `false`, the legend will try to mirror the look of the actual\r\n\t * item, like series.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tuseDefaultMarker?: boolean;\r\n\r\n\t/**\r\n\t * Position of the legend.\r\n\t *\r\n\t * Options: \"left\", \"right\", \"top\", \"bottom\" (default), or \"absolute\".\r\n\t *\r\n\t * @default \"bottom\"\r\n\t */\r\n\tposition?: LegendPosition\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Legend]].\r\n */\r\nexport interface ILegendEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Legend]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILegendAdapters extends IComponentAdapters, ILegendProperties { }\r\n\r\nexport interface ILegendItemEvents {\r\n\tpropertychanged: {\r\n\t\t/**\r\n\t\t * Property key.\r\n\t\t */\r\n\t\tproperty: string;\r\n\t};\r\n}\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * [[Legend]] class is used to create legend for the chart.\r\n *\r\n * @see {@link ILegendEvents} for a list of available events\r\n * @see {@link ILegendAdapters} for a list of available Adapters\r\n * @todo Verify/implement dynamic updating of legend items once the properties of related Series change\r\n */\r\nexport class Legend extends Component {\r\n\r\n\t/**\r\n\t * Defines the type of the data fields.\r\n\t */\r\n\tpublic _dataFields: ILegendDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILegendProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILegendAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILegendEvents;\r\n\r\n\t/**\r\n\t * Defines data item type.\r\n\t */\r\n\tpublic _dataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * List of legend Item containers. Legend item containers contain marker, title label and value label.\r\n\t */\r\n\tpublic itemContainers: ListTemplate<Container>;\r\n\r\n\t/**\r\n\t * List of legend item labels.\r\n\t */\r\n\tpublic labels: ListTemplate<Label>;\r\n\r\n\t/**\r\n\t * List of legend item markers.\r\n\t */\r\n\tpublic markers: ListTemplate<Container>;\r\n\r\n\t/**\r\n\t * List of legend item value labels.\r\n\t */\r\n\tpublic valueLabels: ListTemplate<Label>;\r\n\r\n\t/**\r\n\t * Currently focused legend item (for toggling via keyboard)\r\n\t */\r\n\tpublic focusedItem: Optional<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Legend\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.setPropertyValue(\"useDefaultMarker\", false);\r\n\t\tthis.setPropertyValue(\"contentAlign\", \"center\");\r\n\r\n\t\t// Create a template container and list for legend items\r\n\t\tlet itemContainer: Container = new Container();\r\n\t\titemContainer.applyOnClones = true;\r\n\t\titemContainer.padding(10, 0, 10, 0);\r\n\t\titemContainer.margin(0, 10, 0, 0);\r\n\t\titemContainer.layout = \"horizontal\";\r\n\t\titemContainer.clickable = true;\r\n\t\titemContainer.focusable = true;\r\n\t\titemContainer.role = \"switch\";\r\n\t\titemContainer.togglable = true;\r\n\t\titemContainer.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\titemContainer.background.fillOpacity = 0; // creates hit area\r\n\r\n\t\t// Create container list using item template we just created\r\n\t\tthis.itemContainers = new ListTemplate<Container>(itemContainer);\r\n\t\tthis._disposers.push(new ListDisposer(this.itemContainers));\r\n\t\tthis._disposers.push(this.itemContainers.template);\r\n\r\n\t\t// Set up global keyboard events for toggling elements\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\tif (keyboard.isKey(ev.event, \"enter\") && this.focusedItem) {\r\n\t\t\t\tthis.toggleDataItem(this.focusedItem);\r\n\t\t\t}\r\n\t\t}, this));\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create a template container and list for the a marker\r\n\t\tlet marker: Container = new Container();\r\n\t\tmarker.width = 23;\r\n\t\tmarker.height = 23;\r\n\t\tmarker.interactionsEnabled = false;\r\n\t\tmarker.applyOnClones = true;\r\n\t\tmarker.setStateOnChildren = true;\r\n\t\tmarker.background.fillOpacity = 0;\r\n\t\tmarker.background.strokeOpacity = 0;\r\n\t\tmarker.propertyFields.fill = \"fill\";\r\n\t\tmarker.valign = \"middle\";\r\n\r\n\t\tlet disabledColor = interfaceColors.getFor(\"disabledBackground\");\r\n\r\n\t\tmarker.events.on(\"childadded\", (event) => {\r\n\t\t\tlet child = event.newValue;\r\n\t\t\tlet activeState = child.states.create(\"active\");\r\n\t\t\tactiveState.properties.stroke = disabledColor;\r\n\t\t\tactiveState.properties.fill = disabledColor;\r\n\t\t});\r\n\r\n\t\tthis.markers = new ListTemplate<Container>(marker);\r\n\t\tthis._disposers.push(new ListDisposer(this.markers));\r\n\t\tthis._disposers.push(this.markers.template);\r\n\r\n\t\t// Create a legend background element\r\n\t\tlet rectangle: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\trectangle.width = percent(100);\r\n\t\trectangle.height = percent(100);\r\n\t\trectangle.applyOnClones = true;\r\n\t\trectangle.propertyFields.fill = \"fill\";\r\n\t\trectangle.strokeOpacity = 0;\r\n\r\n\t\t// Create a template container and list for item labels\r\n\t\tlet label: Label = new Label();\r\n\t\tlabel.text = \"{name}\";\r\n\t\tlabel.margin(0, 5, 0, 5);\r\n\t\tlabel.valign = \"middle\";\r\n\t\tlabel.applyOnClones = true;\r\n\t\tlabel.states.create(\"active\").properties.fill = interfaceColors.getFor(\"disabledBackground\");\r\n\t\tthis.labels = new ListTemplate<Label>(label);\r\n\t\tthis._disposers.push(new ListDisposer(this.labels));\r\n\t\tthis._disposers.push(this.labels.template);\r\n\t\tlabel.interactionsEnabled = false;\r\n\r\n\t\t// Create a template container and list for item value labels\r\n\t\tlet valueLabel: Label = new Label();\r\n\t\tvalueLabel.margin(0, 5, 0, 0);\r\n\t\tvalueLabel.valign = \"middle\";\r\n\t\tvalueLabel.width = 50; // to avoid rearranging legend entries when value changes.\r\n\t\tvalueLabel.align = \"right\";\r\n\t\tvalueLabel.textAlign = \"end\";\r\n\t\tvalueLabel.applyOnClones = true;\r\n\t\tvalueLabel.states.create(\"active\").properties.fill = interfaceColors.getFor(\"disabledBackground\");\r\n\t\tvalueLabel.interactionsEnabled = false;\r\n\r\n\t\tthis.valueLabels = new ListTemplate<Label>(valueLabel);\r\n\t\tthis._disposers.push(new ListDisposer(this.valueLabels));\r\n\t\tthis._disposers.push(this.valueLabels.template);\r\n\r\n\t\tthis.position = \"bottom\"; // don't use setPropertyValue here!\r\n\r\n\t\t// Create a state for disabled legend items\r\n\t\titemContainer.states.create(\"active\");\r\n\t\titemContainer.setStateOnChildren = true;\r\n\r\n\t\t// Apply accessibility settings\r\n\t\tthis.role = \"group\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Legend\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LegendDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t * @todo Description\r\n\t * @todo Figure out how to update appearance of legend item without losing focus\r\n\t * @todo Update legend marker appearance as apperance of related series changes\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\t// Get data item (legend item's) container\r\n\t\tlet container = dataItem.itemContainer;\r\n\r\n\t\tlet marker = dataItem.marker;\r\n\t\t$utils.used(dataItem.label);\r\n\t\tlet valueLabel = dataItem.valueLabel;\r\n\r\n\t\t// Set parent and update current state\r\n\t\tcontainer.parent = this;\r\n\t\tcontainer.readerChecked = dataItem.dataContext.visible;\r\n\r\n\t\t// Tell series its legend data item\r\n\t\tdataItem.dataContext.legendDataItem = dataItem;\r\n\r\n\t\tlet legendSettings = dataItem.dataContext.legendSettings;\r\n\r\n\t\t// If we are not using default markers, create a unique legend marker based\r\n\t\t// on the data item type\r\n\t\tlet dataContext = dataItem.dataContext;\r\n\r\n\t\tif (dataContext.createLegendMarker && (!this.useDefaultMarker || !(dataContext instanceof Sprite))) {\r\n\t\t\tif (!dataItem.childrenCreated) {\r\n\t\t\t\tdataContext.createLegendMarker(marker);\r\n\t\t\t\tdataItem.childrenCreated = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataContext.updateLegendValue) {\r\n\t\t\tdataContext.updateLegendValue(); // this solves issue with external legend, as legend is created after chart updates legend values\r\n\t\t}\t\t\r\n\r\n\t\tif (valueLabel.invalid) {\r\n\t\t\tvalueLabel.validate();\r\n\t\t}\r\n\r\n\t\tif (valueLabel.currentText == \"\" || valueLabel.currentText == undefined) {\r\n\t\t\tvalueLabel.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvalueLabel.__disabled = false;\r\n\t\t}\r\n\r\n\t\tif (legendSettings && (legendSettings.itemValueText != undefined || legendSettings.valueText != undefined)) {\r\n\t\t\tvalueLabel.__disabled = false;\r\n\t\t}\r\n\r\n\r\n\t\tlet visible = dataItem.dataContext.visible;\r\n\t\tif (visible === undefined) {\r\n\t\t\tvisible = true;\r\n\t\t}\r\n\t\tvisible = $type.toBoolean(visible);\r\n\t\tdataItem.dataContext.visible = visible;\r\n\r\n\t\tcontainer.events.disableType(\"toggled\");\r\n\t\tcontainer.isActive = !visible;\r\n\t\tcontainer.events.enableType(\"toggled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Position of the legend.\r\n\t *\r\n\t * Options: \"left\", \"right\", \"top\", \"bottom\" (default), or \"absolute\".\r\n\t *\r\n\t * IMPORTANT: [[MapChart]] will ignore this setting, as it is using different\r\n\t * layout structure than other charts.\r\n\t *\r\n\t * To position legend in [[MapChart]] set legend's `align` (`\"left\"` or\r\n\t * `\"right\"`) and `valign` (`\"top\"` or `\"bottom\"`) properties instead.\r\n\t *\r\n\t * @default \"bottom\"\r\n\t * @param value  Position\r\n\t */\r\n\tpublic set position(value: LegendPosition) {\r\n\t\tif (this.setPropertyValue(\"position\", value)) {\r\n\t\t\tif (value == \"left\" || value == \"right\") {\r\n\t\t\t\tthis.margin(10, 20, 10, 20);\r\n\t\t\t\tthis.valign = \"middle\";\r\n\t\t\t\tthis.itemContainers.template.width = percent(100);\r\n\t\t\t\tthis.valueLabels.template.width = percent(100);\r\n\t\t\t\tthis.labels.template.truncate = true;\r\n\t\t\t\tthis.labels.template.fullWords = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.itemContainers.template.width = undefined;\r\n\t\t\t\tthis.itemContainers.template.maxWidth = undefined;\r\n\t\t\t\tthis.valueLabels.template.width = 50;\r\n\t\t\t\tthis.labels.template.truncate = false;\r\n\t\t\t\tthis.width = percent(100);\r\n\t\t\t}\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position\r\n\t */\r\n\tpublic get position(): LegendPosition {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should legend try to mirror the look of the related item when building\r\n\t * the marker for legend item?\r\n\t *\r\n\t * If set to `true` it will try to make the marker look like its related\r\n\t * item.\r\n\t *\r\n\t * E.g. if an item is for a Line Series, it will display a line of the\r\n\t * same thickness, color, and will use the same bullets if series have them.\r\n\t *\r\n\t * @default false\r\n\t * @param value Use default marker?\r\n\t */\r\n\tpublic set useDefaultMarker(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useDefaultMarker\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use default marker?\r\n\t */\r\n\tpublic get useDefaultMarker(): boolean {\r\n\t\treturn this.getPropertyValue(\"useDefaultMarker\");\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles a legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item Legend item\r\n\t * @todo Maybe do it with togglable instead\r\n\t */\r\n\tpublic toggleDataItem(item: this[\"_dataItem\"]): void {\r\n\t\tlet dataContext = item.dataContext;\r\n\r\n\t\tif (!dataContext.visible || dataContext.isHiding || (dataContext instanceof Sprite && dataContext.isHidden)) {\r\n\t\t\titem.color = item.colorOrig;\r\n\r\n\t\t\titem.itemContainer.isActive = false;\r\n\r\n\t\t\tif (dataContext.hidden === true) {\r\n\t\t\t\tdataContext.hidden = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (dataContext.show) {\r\n\t\t\t\tdataContext.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataContext.visible = true;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\titem.itemContainer.isActive = true;\r\n\r\n\t\t\tif (dataContext.hide) {\r\n\t\t\t\tdataContext.hide();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataContext.visible = false;\r\n\t\t\t}\r\n\r\n\t\t\titem.color = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Override preloader method so that legend does not accidentally show its\r\n\t * own preloader.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Always `undefined`\r\n\t */\r\n\tpublic get preloader(): Optional<Preloader> {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemPropertyChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemPropertyChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tdataItem.valueLabel.invalidate();\r\n\t\tdataItem.label.invalidate();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Legend\"] = Legend;\r\n\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Move legend to below the chart if chart is narrow\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Legend && (target.position == \"left\" || target.position == \"right\")) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.position = \"bottom\";\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Move legend to the right if chart is very short\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Legend && (target.position == \"top\" || target.position == \"bottom\")) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.position = \"right\";\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Disable legend altogether on small charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.isXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Legend) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}