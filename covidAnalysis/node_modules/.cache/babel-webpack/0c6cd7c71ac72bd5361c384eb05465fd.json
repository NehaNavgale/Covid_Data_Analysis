{"ast":null,"code":"/**\n * Defines Pictorial Stacked Series.\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\n\nimport { PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport { percent } from \"../../core/utils/Percent\";\n/**\n * ============================================================================\n * DATA ITEM\n * ============================================================================\n * @hidden\n */\n//@todo: sequenced?\n\n/**\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\n *\n * @see {@link DataItem}\n */\n\nvar PictorialStackedSeriesDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PictorialStackedSeriesDataItem, _super);\n  /**\n   * Constructor\n   */\n\n\n  function PictorialStackedSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PictorialStackedSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return PictorialStackedSeriesDataItem;\n}(PyramidSeriesDataItem);\n\nexport { PictorialStackedSeriesDataItem };\n/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\n *\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\n * @important\n */\n\nvar PictorialStackedSeries =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PictorialStackedSeries, _super);\n  /**\n   * Constructor\n   */\n\n\n  function PictorialStackedSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PictorialStackedSeries\";\n    _this.topWidth = percent(100);\n    _this.bottomWidth = percent(100);\n    _this.valueIs = \"height\";\n\n    _this.applyTheme();\n\n    _this.startLocation = 0;\n    _this.endLocation = 1;\n    _this._maskSprite = _this.slicesContainer.createChild(Sprite);\n    _this._maskSprite.visible = false;\n    _this._maskSprite.zIndex = 100;\n    _this._maskSprite.shouldClone = false;\n    return _this;\n  }\n  /**\n   * Sizes the mask to fit the series.\n   *\n   * @ignore\n   */\n\n\n  PictorialStackedSeries.prototype.validateDataElements = function () {\n    var maxWidth = this.slicesContainer.maxWidth;\n    var maxHeight = this.slicesContainer.maxHeight;\n    var maskSprite = this._maskSprite; //maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\n\n    var pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\n    var pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\n    var scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\n\n    if (scale == Infinity) {\n      scale = 1; // can't return here, won't draw legend properly\n    }\n\n    scale = $math.max(0.001, scale);\n    var startLocation = this.startLocation;\n    var endLocation = this.endLocation;\n    var newWidth = $math.min(maxWidth, pictureWidth * scale);\n    var newHeight = $math.min(maxHeight, pictureHeight * scale);\n    maskSprite.scale = scale;\n\n    if (this.orientation == \"vertical\") {\n      this.topWidth = newWidth + 4;\n      this.bottomWidth = newWidth + 4;\n      this.pyramidHeight = newHeight * (endLocation - startLocation);\n      maskSprite.x = maxWidth / 2;\n      maskSprite.y = newHeight / 2;\n    } else {\n      this.topWidth = newHeight + 4;\n      this.bottomWidth = newHeight + 4;\n      this.pyramidHeight = newWidth * (endLocation - startLocation);\n      maskSprite.valign = \"middle\";\n      maskSprite.x = newWidth / 2;\n      maskSprite.y = maxHeight / 2;\n    }\n\n    maskSprite.verticalCenter = \"middle\";\n    maskSprite.horizontalCenter = \"middle\";\n\n    _super.prototype.validateDataElements.call(this);\n\n    if (this.orientation == \"vertical\") {\n      var y = (maxHeight - newHeight) / 2;\n      this.slicesContainer.y = y;\n      this.labelsContainer.y = y;\n      this.ticksContainer.y = y;\n      this.slices.template.dy = startLocation * newHeight;\n    } else {\n      var x = (maxWidth - newWidth) / 2;\n      this.slicesContainer.x = x;\n      this.labelsContainer.x = x;\n      this.ticksContainer.x = x;\n      this.slices.template.dx = startLocation * newWidth;\n    }\n\n    this.slicesContainer.mask = this._maskSprite;\n  };\n  /**\n   * Sets defaults that instantiate some objects that rely on parent, so they\n   * cannot be set in constructor.\n   */\n\n\n  PictorialStackedSeries.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Pyramid Series\");\n    }\n  };\n  /**\n   * Returns a new/empty DataItem of the type appropriate for this object.\n   *\n   * @see {@link DataItem}\n   * @return Data Item\n   */\n\n\n  PictorialStackedSeries.prototype.createDataItem = function () {\n    return new PictorialStackedSeriesDataItem();\n  };\n\n  Object.defineProperty(PictorialStackedSeries.prototype, \"maskSprite\", {\n    /**\n     * A [[Sprite]] element that is used as a series mask.\n     *\n     * If set, this element's shape will be used to apply shape to the whole\n     * stacked pictorial series.\n     *\n     * You can use this element's `path` property to set an SVG path for the\n     * shape:\n     *\n     * ```TypeScript\n     * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\n     * // ...\n     * series.maskSprite.path = iconPath;\n     * ```\n     * ```JavaScript\n     * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\n     * // ...\n     * series.maskSprite.path = iconPath;\n     * ```\n     * ```JSON\n     * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\n     * // ...\n     * {\n     *   // ...\n     *   \"series\": [{\n     *     \"type\": \"PictorialStackedSeries\",\n     *     // ...\n     *     \"maskSprite\": {\n     *       \"path\": iconPath\n     *     }\n     *   }]\n     * }\n     * ```\n     *\n     * @return Mask sprite\n     */\n    get: function get() {\n      return this._maskSprite;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Inits FunnelSlice.\n   *\n   * @param slice to init\n   */\n\n  PictorialStackedSeries.prototype.initSlice = function (slice) {\n    _super.prototype.initSlice.call(this, slice);\n\n    var hs = slice.states.getKey(\"hover\");\n\n    if (hs) {\n      hs.properties.expandDistance = 0;\n    }\n  };\n\n  Object.defineProperty(PictorialStackedSeries.prototype, \"startLocation\", {\n    /**\n     * @return  Start location\n     */\n    get: function get() {\n      return this.getPropertyValue(\"startLocation\");\n    },\n\n    /**\n     * Relative location to start series from.\n     *\n     * Range of values: 0 to 1.\n     *\n     * This setting indicates where actual slices will start relatively to the\n     * whole height/width of the series.\n     *\n     * For example, if we want slices to start at 30% from the top/left of the\n     * series, we can set `startLocation = 0.3`.\n     *\n     * To fill shape outside of the location range, use background of the\n     * property `slicesContainer`.\n     *\n     * ```TypeScript\n     * series.startLocation = 0.2;\n     * series.endLocation = 0.8;\n     * series.slicesContainer.background.fill = am4core.color(\"#eee\");\n     * ```\n     * ```JavaScript\n     * series.startLocation = 0.2;\n     * series.endLocation = 0.8;\n     * series.slicesContainer.background.fill = am4core.color(\"#eee\");\n     * ```\n     * ```JSON\n     * {\n     *   // ...\n     *   \"series\": [{\n     *     // ...\n     *     \"startLocation\": 0.2,\n     *     \"endLocation\": 0.8,\n     *     \"slicesContainer\": {\n     *       \"background\": {\n     *         \"fill\": \"#eee\"\n     *       }\n     *     }\n     *   }]\n     * }\n     * ```\n     *\n     * @default 0\n     * @since 4.1.13\n     * @param  value  Start location\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"startLocation\", value)) {\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PictorialStackedSeries.prototype, \"endLocation\", {\n    /**\n     * @return End location\n     */\n    get: function get() {\n      return this.getPropertyValue(\"endLocation\");\n    },\n\n    /**\n     * Relative location to end series at.\n     *\n     * Range of values: 0 to 1.\n     *\n     * This setting indicates where actual slices will end relatively to the\n     * whole height/width of the series.\n     *\n     * For example, if we want slices to end at 70% from the top/left of the\n     * series, we can set `endLocation = 0.7`.\n     *\n     * To fill shape outside of the location range, use background of the\n     * property `slicesContainer`.\n     *\n     * ```TypeScript\n     * series.startLocation = 0.2;\n     * series.endLocation = 0.8;\n     * series.slicesContainer.background.fill = am4core.color(\"#eee\");\n     * ```\n     * ```JavaScript\n     * series.startLocation = 0.2;\n     * series.endLocation = 0.8;\n     * series.slicesContainer.background.fill = am4core.color(\"#eee\");\n     * ```\n     * ```JSON\n     * {\n     *   // ...\n     *   \"series\": [{\n     *     // ...\n     *     \"startLocation\": 0.2,\n     *     \"endLocation\": 0.8,\n     *     \"slicesContainer\": {\n     *       \"background\": {\n     *         \"fill\": \"#eee\"\n     *       }\n     *     }\n     *   }]\n     * }\n     * ```\n     *\n     * @default 1\n     * @since 4.1.13\n     * @param  value  End location\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"endLocation\", value)) {\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PictorialStackedSeries;\n}(PyramidSeries);\n\nexport { PictorialStackedSeries };\n/**\n * bboxter class in system, so that it can be instantiated using its name from\n * anywhere.\n *\n * @ignore\n */\n\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/charts/series/PictorialStackedSeries.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Defines Pictorial Stacked Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PictorialStackedSeriesDataItem extends PyramidSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PictorialStackedSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PictorialStackedSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesDataFields extends IPyramidSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesProperties extends IPyramidSeriesProperties {\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendLocation?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesEvents extends IPyramidSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPictorialStackedSeriesAdapters extends IPyramidSeriesAdapters, IPictorialStackedSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PictorialStackedSeries extends PyramidSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPictorialStackedSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPictorialStackedSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPictorialStackedSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPictorialStackedSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PictorialStackedSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds a Sprite that acts as an intelligent mask for the serries.\r\n\t */\r\n\tprotected _maskSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PictorialStackedSeries\";\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.valueIs = \"height\";\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\r\n\t\tthis._maskSprite = this.slicesContainer.createChild(Sprite);\r\n\t\tthis._maskSprite.visible = false;\r\n\t\tthis._maskSprite.zIndex = 100;\r\n\t\tthis._maskSprite.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Sizes the mask to fit the series.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\r\n\t\tlet maxWidth = this.slicesContainer.maxWidth;\r\n\t\tlet maxHeight = this.slicesContainer.maxHeight;\r\n\r\n\t\tlet maskSprite = this._maskSprite;\r\n\t\t//maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\r\n\r\n\t\tlet pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n\t\tlet pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n\r\n\t\tlet scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n\r\n\t\tif (scale == Infinity) {\r\n\t\t\tscale = 1; // can't return here, won't draw legend properly\r\n\t\t}\r\n\r\n\t\tscale = $math.max(0.001, scale);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet newWidth = $math.min(maxWidth, pictureWidth * scale);\r\n\t\tlet newHeight = $math.min(maxHeight, pictureHeight * scale);\r\n\r\n\t\tmaskSprite.scale = scale;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tthis.topWidth = newWidth + 4;\r\n\t\t\tthis.bottomWidth = newWidth + 4;\r\n\t\t\tthis.pyramidHeight = newHeight * (endLocation - startLocation);\r\n\t\t\tmaskSprite.x = maxWidth / 2;\r\n\t\t\tmaskSprite.y = newHeight / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.topWidth = newHeight + 4;\r\n\t\t\tthis.bottomWidth = newHeight + 4;\r\n\t\t\tthis.pyramidHeight = newWidth * (endLocation - startLocation);\r\n\t\t\tmaskSprite.valign = \"middle\";\r\n\t\t\tmaskSprite.x = newWidth / 2;\r\n\t\t\tmaskSprite.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tmaskSprite.verticalCenter = \"middle\";\r\n\t\tmaskSprite.horizontalCenter = \"middle\";\r\n\r\n\t\tsuper.validateDataElements();\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - newHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y;\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t\tthis.slices.template.dy = startLocation * newHeight;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - newWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t\tthis.slices.template.dx = startLocation * newWidth;\r\n\t\t}\r\n\r\n\t\tthis.slicesContainer.mask = this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PictorialStackedSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] element that is used as a series mask.\r\n\t *\r\n\t * If set, this element's shape will be used to apply shape to the whole\r\n\t * stacked pictorial series.\r\n\t *\r\n\t * You can use this element's `path` property to set an SVG path for the\r\n\t * shape:\r\n\t *\r\n\t * ```TypeScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JSON\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"PictorialStackedSeries\",\r\n\t *     // ...\r\n\t *     \"maskSprite\": {\r\n\t *       \"path\": iconPath\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Mask sprite\r\n\t */\r\n\tpublic get maskSprite(): Sprite {\r\n\t\treturn this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tsuper.initSlice(slice);\r\n\r\n\t\tlet hs = slice.states.getKey(\"hover\");\r\n\t\tif (hs) {\r\n\t\t\ths.properties.expandDistance = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will start relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to start at 30% from the top/left of the\r\n\t * series, we can set `startLocation = 0.3`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.1.13\r\n\t * @param  value  Start location\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"startLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return  Start location\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will end relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to end at 70% from the top/left of the\r\n\t * series, we can set `endLocation = 0.7`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 1\r\n\t * @since 4.1.13\r\n\t * @param  value  End location\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"endLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End location\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\r\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}