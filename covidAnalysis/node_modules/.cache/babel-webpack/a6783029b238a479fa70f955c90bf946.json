{"ast":null,"code":"/**\n * Rectangular pattern module.\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\n\nimport { Pattern } from \"./Pattern\";\nimport { registry } from \"../../Registry\";\n;\n/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Rectangular pattern\n */\n\nvar RectPattern =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(RectPattern, _super);\n  /**\n   * Constructor\n   */\n\n\n  function RectPattern() {\n    var _this = _super.call(this) || this;\n\n    _this.rectHeight = 1;\n    _this.rectWidth = 1;\n    return _this;\n  }\n  /**\n   * Draws the rectangular element.\n   */\n\n\n  RectPattern.prototype.draw = function () {\n    if (this._rect) {\n      this.removeElement(this._rect);\n    }\n\n    this._rect = this.paper.add(\"rect\");\n\n    this._rect.attr({\n      \"width\": this.rectWidth,\n      \"height\": this.rectHeight\n    });\n\n    this.addElement(this._rect);\n\n    _super.prototype.draw.call(this);\n  };\n\n  Object.defineProperty(RectPattern.prototype, \"rectWidth\", {\n    /**\n     * @return Width (px)\n     */\n    get: function get() {\n      return this.properties[\"rectWidth\"];\n    },\n\n    /**\n     * Rectangle width in pixels.\n     *\n     * @param value Width (px)\n     */\n    set: function set(value) {\n      this.properties[\"rectWidth\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RectPattern.prototype, \"rectHeight\", {\n    /**\n     * @return Height (px)\n     */\n    get: function get() {\n      return this.properties[\"rectHeight\"];\n    },\n\n    /**\n     * Rectangle height in pixels.\n     *\n     * @param value Height (px)\n     */\n    set: function set(value) {\n      this.properties[\"rectHeight\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return RectPattern;\n}(Pattern);\n\nexport { RectPattern };\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n *\n * @ignore\n */\n\nregistry.registeredClasses[\"RectPattern\"] = RectPattern;","map":{"version":3,"sources":["../../../../../../src/.internal/core/rendering/fills/RectPattern.ts"],"names":[],"mappings":"AAAA;;AAEG;;AAEH;;;;;AAKG;;AACH,SAAS,OAAT,QAA2C,WAA3C;AAEA,SAAS,QAAT,QAAyB,gBAAzB;AAiBC;AAGD;;;;;AAKG;;AAEH;;AAEG;;AACH,IAAA,WAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAiC,EAAA,OAAA,CAAA,SAAA,CAAA,WAAA,EAAA,MAAA;AAYhC;;AAEG;;;AACH,WAAA,WAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;AAEC,IAAA,KAAI,CAAC,UAAL,GAAkB,CAAlB;AACA,IAAA,KAAI,CAAC,SAAL,GAAiB,CAAjB;;AACA;AAED;;AAEG;;;AACO,EAAA,WAAA,CAAA,SAAA,CAAA,IAAA,GAAV,YAAA;AACC,QAAI,KAAK,KAAT,EAAgB;AACf,WAAK,aAAL,CAAmB,KAAK,KAAxB;AACA;;AAED,SAAK,KAAL,GAAa,KAAK,KAAL,CAAW,GAAX,CAAe,MAAf,CAAb;;AACA,SAAK,KAAL,CAAW,IAAX,CAAgB;AAAE,eAAS,KAAK,SAAhB;AAA2B,gBAAU,KAAK;AAA1C,KAAhB;;AACA,SAAK,UAAL,CAAgB,KAAK,KAArB;;AAEA,IAAA,MAAA,CAAA,SAAA,CAAM,IAAN,CAAU,IAAV,CAAU,IAAV;AACA,GAVS;;AAiBV,EAAA,MAAA,CAAA,cAAA,CAAW,WAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;AAKpB;;AAEG;SACH,eAAA;AACC,aAAO,KAAK,UAAL,CAAgB,WAAhB,CAAP;AACA,KAVmB;;AALpB;;;;AAIG;SACH,aAAqB,KAArB,EAAkC;AACjC,WAAK,UAAL,CAAgB,WAAhB,IAA+B,KAA/B;AACA,WAAK,IAAL;AACA,KAHmB;oBAAA;;AAAA,GAApB;AAiBA,EAAA,MAAA,CAAA,cAAA,CAAW,WAAA,CAAA,SAAX,EAAW,YAAX,EAAqB;AAKrB;;AAEG;SACH,eAAA;AACC,aAAO,KAAK,UAAL,CAAgB,YAAhB,CAAP;AACA,KAVoB;;AALrB;;;;AAIG;SACH,aAAsB,KAAtB,EAAmC;AAClC,WAAK,UAAL,CAAgB,YAAhB,IAAgC,KAAhC;AACA,WAAK,IAAL;AACA,KAHoB;oBAAA;;AAAA,GAArB;AAYD,SAAA,WAAA;AAAC,CAtED,CAAiC,OAAjC,CAAA;;;AAwEA;;;;;AAKG;;AACH,QAAQ,CAAC,iBAAT,CAA2B,aAA3B,IAA4C,WAA5C","sourcesContent":["/**\r\n * Rectangular pattern module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern, PatternProperties } from \"./Pattern\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for rectangular pattern\r\n */\r\nexport interface RectPatternProperties extends PatternProperties {\r\n\trectWidth: number;\r\n\trectHeight: number;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Rectangular pattern\r\n */\r\nexport class RectPattern extends Pattern {\r\n\r\n\t/**\r\n\t * Reference to `<rect>` element used in pattern.\r\n\t */\r\n\tprotected _rect: $type.Optional<AMElement>;\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: RectPatternProperties;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.rectHeight = 1;\r\n\t\tthis.rectWidth = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the rectangular element.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tif (this._rect) {\r\n\t\t\tthis.removeElement(this._rect);\r\n\t\t}\r\n\r\n\t\tthis._rect = this.paper.add(\"rect\");\r\n\t\tthis._rect.attr({ \"width\": this.rectWidth, \"height\": this.rectHeight });\r\n\t\tthis.addElement(this._rect);\r\n\r\n\t\tsuper.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * Rectangle width in pixels.\r\n\t *\r\n\t * @param value Width (px)\r\n\t */\r\n\tpublic set rectWidth(value: number) {\r\n\t\tthis.properties[\"rectWidth\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get rectWidth(): number {\r\n\t\treturn this.properties[\"rectWidth\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Rectangle height in pixels.\r\n\t *\r\n\t * @param value Height (px)\r\n\t */\r\n\tpublic set rectHeight(value: number) {\r\n\t\tthis.properties[\"rectHeight\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Height (px)\r\n\t */\r\n\tpublic get rectHeight(): number {\r\n\t\treturn this.properties[\"rectHeight\"];\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RectPattern\"] = RectPattern;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}