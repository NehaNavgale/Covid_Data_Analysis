{"ast":null,"code":"/**\n * Defines Pyramid Series.\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\n\nimport { FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport { percent } from \"../../core/utils/Percent\";\n/**\n * ============================================================================\n * DATA ITEM\n * ============================================================================\n * @hidden\n */\n//@todo: sequenced?\n\n/**\n * Defines a [[DataItem]] for [[PyramidSeries]].\n *\n * @see {@link DataItem}\n */\n\nvar PyramidSeriesDataItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PyramidSeriesDataItem, _super);\n  /**\n   * Constructor\n   */\n\n\n  function PyramidSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PyramidSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return PyramidSeriesDataItem;\n}(FunnelSeriesDataItem);\n\nexport { PyramidSeriesDataItem };\n/**\n * ============================================================================\n * MAIN CLASS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\n *\n * @see {@link IPyramidSeriesEvents} for a list of available Events\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\n * @important\n */\n\nvar PyramidSeries =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PyramidSeries, _super);\n  /**\n   * Constructor\n   */\n\n\n  function PyramidSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PyramidSeries\";\n    _this.topWidth = percent(0);\n    _this.bottomWidth = percent(100);\n    _this.pyramidHeight = percent(100);\n    _this.valueIs = \"area\";\n    _this.sliceLinks.template.width = 0;\n    _this.sliceLinks.template.height = 0;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\n   * Sets defaults that instantiate some objects that rely on parent, so they\n   * cannot be set in constructor.\n   */\n\n\n  PyramidSeries.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Pyramid Series\");\n    }\n  };\n  /**\n   * Returns a new/empty DataItem of the type appropriate for this object.\n   *\n   * @see {@link DataItem}\n   * @return Data Item\n   */\n\n\n  PyramidSeries.prototype.createDataItem = function () {\n    return new PyramidSeriesDataItem();\n  };\n  /**\n   * (Re)validates the whole series, effectively causing it to redraw.\n   *\n   * @ignore Exclude from docs\n   */\n\n\n  PyramidSeries.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    this._nextWidth = undefined;\n  };\n  /**\n   * [getNextValue description]\n   *\n   * @todo Description\n   * @param dataItem [description]\n   * @return [description]\n   */\n\n\n  PyramidSeries.prototype.getNextValue = function (dataItem) {\n    var index = dataItem.index;\n    var nextValue = dataItem.getWorkingValue(\"value\");\n\n    if (index < this.dataItems.length - 1) {\n      var nextItem = this.dataItems.getIndex(index + 1);\n      nextValue = nextItem.getWorkingValue(\"value\");\n    }\n\n    if (nextValue == 0) {\n      nextValue = 0.000001;\n    }\n\n    return nextValue;\n  };\n  /**\n   * [validateDataElements description]\n   *\n   * @todo Description\n   * @ignore Exclude from docs\n   */\n\n\n  PyramidSeries.prototype.validateDataElements = function () {\n    var _this = this;\n\n    var maxWidth = this.slicesContainer.innerWidth;\n    var maxHeight = this.slicesContainer.innerHeight;\n    this.dataItems.each(function (dataItem) {\n      var relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\n      var sliceLink = dataItem.sliceLink;\n\n      if (_this.orientation == \"vertical\") {\n        maxHeight -= sliceLink.pixelHeight * relValue;\n      } else {\n        maxWidth -= sliceLink.pixelWidth * relValue;\n      }\n    });\n    this._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\n    this._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\n\n    if (this.orientation == \"vertical\") {\n      var y = (maxHeight - this._pyramidHeight) / 2;\n      this.slicesContainer.y = y;\n      this.labelsContainer.y = y;\n      this.ticksContainer.y = y;\n    } else {\n      var x = (maxWidth - this._pyramidWidth) / 2;\n      this.slicesContainer.x = x;\n      this.labelsContainer.x = x;\n      this.ticksContainer.x = x;\n    }\n\n    _super.prototype.validateDataElements.call(this);\n  };\n  /**\n   * [decorateSlice description]\n   *\n   * @todo Description\n   * @param dataItem [description]\n   */\n\n\n  PyramidSeries.prototype.decorateSlice = function (dataItem) {\n    var sum = this.dataItem.values.value.sum;\n\n    if (sum == 0) {\n      return;\n    }\n\n    var slice = dataItem.slice;\n    var sliceLink = dataItem.sliceLink;\n    var label = dataItem.label;\n    var tick = dataItem.tick; // TODO can this be removed ?\n\n    this.getNextValue(dataItem);\n    var workingValue = dataItem.getWorkingValue(\"value\");\n\n    if (workingValue == 0) {\n      workingValue = 0.000001;\n    }\n\n    var pyramidWidth = this._pyramidWidth;\n    var pyramidHeight = this._pyramidHeight;\n    var maxWidth = this.slicesContainer.innerWidth;\n    var maxHeight = this.slicesContainer.innerHeight;\n    var linkWidth = sliceLink.pixelWidth;\n    var linkHeight = sliceLink.pixelHeight;\n\n    if (this.orientation == \"vertical\") {\n      var topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\n\n      if (!$type.isNumber(this._nextWidth)) {\n        this._nextWidth = topWidth;\n      }\n\n      var bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\n      var sliceTopWidth = this._nextWidth;\n      var angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\n      var c = Math.tan(Math.PI / 2 - angle);\n\n      if (c == 0) {\n        c = 0.00000001;\n      }\n\n      var sliceHeight = void 0;\n      var sliceBottomWidth = void 0;\n\n      if (this.valueIs == \"area\") {\n        var totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\n        var square = totalSquare * workingValue / sum;\n        var s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\n        sliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\n        sliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\n      } else {\n        var sum_1 = this.dataItem.values.value.sum;\n        sliceHeight = pyramidHeight * workingValue / sum_1;\n        sliceBottomWidth = sliceTopWidth - sliceHeight * c;\n      }\n\n      slice.height = sliceHeight;\n      slice.width = maxWidth;\n      slice.bottomWidth = sliceBottomWidth;\n      slice.topWidth = sliceTopWidth;\n      sliceLink.topWidth = slice.bottomWidth;\n      sliceLink.bottomWidth = slice.bottomWidth;\n      slice.y = this._nextY; //slice.x = maxWidth / 2;\n\n      if (!this.alignLabels) {\n        label.x = maxWidth / 2;\n      } else {\n        label.x = 0;\n      }\n\n      label.y = slice.pixelY + slice.pixelHeight * tick.locationY + slice.dy;\n      this._nextY += slice.pixelHeight + linkHeight * workingValue / dataItem.value;\n      sliceLink.y = this._nextY - linkHeight;\n      sliceLink.x = maxWidth / 2;\n    } else {\n      var topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\n\n      if (!$type.isNumber(this._nextWidth)) {\n        this._nextWidth = topWidth;\n      }\n\n      var bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\n      var sliceTopWidth = this._nextWidth;\n      var angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\n      var c = Math.tan(Math.PI / 2 - angle);\n\n      if (c == 0) {\n        c = 0.00000001;\n      }\n\n      var sliceWidth = void 0;\n      var sliceBottomWidth = void 0;\n\n      if (this.valueIs == \"area\") {\n        var totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\n        var square = totalSquare * workingValue / this.dataItem.values.value.sum;\n        sliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\n        sliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\n      } else {\n        sliceWidth = pyramidWidth * workingValue / this.dataItem.values.value.sum;\n        sliceBottomWidth = sliceTopWidth - sliceWidth * c;\n      }\n\n      slice.width = sliceWidth;\n      slice.height = maxHeight;\n      slice.bottomWidth = sliceBottomWidth;\n      slice.topWidth = sliceTopWidth;\n      sliceLink.topWidth = slice.bottomWidth;\n      sliceLink.bottomWidth = slice.bottomWidth;\n      slice.x = this._nextY;\n\n      if (!this.alignLabels) {\n        label.y = maxHeight / 2;\n      } else {\n        label.y = this.labelsContainer.measuredHeight;\n      }\n\n      label.x = slice.pixelX + slice.pixelWidth * tick.locationX + slice.dx;\n      this._nextY += slice.pixelWidth + linkWidth * workingValue / dataItem.value;\n      sliceLink.x = this._nextY - linkWidth;\n      sliceLink.y = maxHeight / 2;\n    }\n\n    this._nextWidth = slice.bottomWidth;\n  };\n\n  Object.defineProperty(PyramidSeries.prototype, \"topWidth\", {\n    /**\n     * @return {number | Percent}\n     */\n    get: function get() {\n      return this.getPropertyValue(\"topWidth\");\n    },\n\n    /**\n     * Width of the pyramid's tip in pixels or relative (`Percent`).\n     *\n     * `0%` (default) means the pyramid will be perfectly pointy.\n     * `50%` will have a cut off / blunt top that is half the width of the chart.\n     * `100%` will take the whole width of the chart.\n     *\n     * If you need the downward-pointing pyramid, you might want to `topWidth` to\n     * `100%` and `bottomWidth` to `0%`.\n     *\n     * @default 0%\n     * @param {number | Percent}\n     */\n    set: function set(value) {\n      if (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PyramidSeries.prototype, \"pyramidHeight\", {\n    /**\n     * @return {number | Percent}\n     */\n    get: function get() {\n      return this.getPropertyValue(\"pyramidHeight\");\n    },\n\n    /**\n     * Height of pyramid\n     *\n     *\n     * @default 100%\n     * @param {number | Percent}\n     */\n    set: function set(value) {\n      if (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PyramidSeries.prototype, \"bottomWidth\", {\n    /**\n     * @return {number | Percent}\n     */\n    get: function get() {\n      return this.getPropertyValue(\"bottomWidth\");\n    },\n\n    /**\n     * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\n     *\n     * `0%` means the pyramid's botto will be pointy.\n     * `50%` will have a cut off / blunt bottom that is half the width of the chart.\n     * `100%` (default) will take the whole width of the chart.\n     *\n     * If you need the downward-pointing pyramid, you might want to `topWidth` to\n     * `100%` and `bottomWidth` to `0%`.\n     *\n     * @param {number | Percent}\n     */\n    set: function set(value) {\n      if (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PyramidSeries.prototype, \"valueIs\", {\n    /**\n     * @return {\"area\" | \"height\"}\n     */\n    get: function get() {\n      return this.getPropertyValue(\"valueIs\");\n    },\n\n    /**\n     * Indicates how slice's value will influence its size.\n     *\n     * `\"area\"` (default) means that the whole area of the pyramid (counting in\n     * modifications by `topWidth` and `bottomWidth`) will be divvied up between\n     * slices based on their value.\n     *\n     * With this setting at `\"area\"` the area of the trapezoids of each slice\n     * will represent their value relatively to values of the other slices.\n     *\n     * This is a correct way to depict \"weight\" of each slice based on their\n     * values.\n     *\n     * `\"height\"` means whole height (as opposed to area) of the pyramid will be\n     * divvied up between slices. Actual slice width or area is not counted in.\n     *\n     * From the data-viz standpoint this does not make a lot of sense, since\n     * slices with lesser values might appear more prominent if they are placed\n     * towards thick end of the pyramid since their areas will be bigger.\n     *\n     * @default \"area\"\n     * @param {\"area\" | \"height\"}\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"valueIs\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PyramidSeries;\n}(FunnelSeries);\n\nexport { PyramidSeries };\n/**\n * bboxter class in system, so that it can be instantiated using its name from\n * anywhere.\n *\n * @ignore\n */\n\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/charts/series/PyramidSeries.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Defines Pyramid Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties, FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PyramidSeriesDataItem extends FunnelSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PyramidSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PyramidSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesDataFields extends IFunnelSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesProperties extends IFunnelSeriesProperties {\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Top width in pixels or percent\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t */\r\n\tpyramidHeight?: number | Percent;\r\n\r\n\t/**\r\n\t * Indicates whether slice value should sould influence its height or area\r\n\t * size.\r\n\t *\r\n\t * @default \"area\"\r\n\t */\r\n\tvalueIs?: \"height\" | \"area\";\r\n}\r\n\r\n/**\r\n * Defines events for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesEvents extends IFunnelSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PyramidSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPyramidSeriesAdapters extends IFunnelSeriesAdapters, IPyramidSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PyramidSeries extends FunnelSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPyramidSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPyramidSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPyramidSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPyramidSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PyramidSeriesDataItem;\r\n\r\n\t/**\r\n\t * [_nextWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nextWidth: number;\r\n\r\n\tprotected _pyramidHeight: number;\r\n\r\n\tprotected _pyramidWidth: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PyramidSeries\";\r\n\t\tthis.topWidth = percent(0);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.pyramidHeight = percent(100);\r\n\t\tthis.valueIs = \"area\";\r\n\r\n\t\tthis.sliceLinks.template.width = 0;\r\n\t\tthis.sliceLinks.template.height = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PyramidSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\t\t}\r\n\t\tif (nextValue == 0) {\r\n\t\t\tnextValue = 0.000001;\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tmaxHeight -= (sliceLink.pixelHeight * relValue);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmaxWidth -= (sliceLink.pixelWidth * relValue);\r\n\t\t\t}\r\n\r\n\t\t})\r\n\r\n\t\tthis._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n\t\tthis._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - this._pyramidHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - this._pyramidWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]) {\r\n\r\n\t\tlet sum = this.dataItem.values.value.sum;\r\n\r\n\t\tif(sum == 0){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tthis.getNextValue(dataItem);\r\n\r\n\t\tlet workingValue = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\tif (workingValue == 0) {\r\n\t\t\tworkingValue = 0.000001;\r\n\t\t}\r\n\r\n\t\tlet pyramidWidth = this._pyramidWidth;\r\n\t\tlet pyramidHeight = this._pyramidHeight;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet linkWidth = sliceLink.pixelWidth;\r\n\t\tlet linkHeight = sliceLink.pixelHeight;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceHeight: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\r\n\t\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n\r\n\t\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet sum = this.dataItem.values.value.sum;\r\n\t\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tslice.height = sliceHeight;\r\n\t\t\tslice.width = maxWidth;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\t//slice.x = maxWidth / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = maxWidth / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY + slice.dy;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight * workingValue / dataItem.value;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = maxWidth / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceWidth: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n\t\t\t\tlet square = totalSquare * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceWidth = pyramidWidth * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.width = sliceWidth;\r\n\t\t\tslice.height = maxHeight;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = maxHeight / 2;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX + slice.dx;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth * workingValue / dataItem.value;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\t\t\tsliceLink.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tthis._nextWidth = slice.bottomWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` (default) means the pyramid will be perfectly pointy.\r\n\t * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n\t * `100%` will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @default 0%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t *\r\n\t * @default 100%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set pyramidHeight(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get pyramidHeight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"pyramidHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` means the pyramid's botto will be pointy.\r\n\t * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n\t * `100%` (default) will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's value will influence its size.\r\n\t *\r\n\t * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n\t * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n\t * slices based on their value.\r\n\t *\r\n\t * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n\t * will represent their value relatively to values of the other slices.\r\n\t *\r\n\t * This is a correct way to depict \"weight\" of each slice based on their\r\n\t * values.\r\n\t *\r\n\t * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n\t * divvied up between slices. Actual slice width or area is not counted in.\r\n\t *\r\n\t * From the data-viz standpoint this does not make a lot of sense, since\r\n\t * slices with lesser values might appear more prominent if they are placed\r\n\t * towards thick end of the pyramid since their areas will be bigger.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @param {\"area\" | \"height\"}\r\n\t */\r\n\tpublic set valueIs(value: \"area\" | \"height\") {\r\n\t\tif (this.setPropertyValue(\"valueIs\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"area\" | \"height\"}\r\n\t */\r\n\tpublic get valueIs(): \"area\" | \"height\" {\r\n\t\treturn this.getPropertyValue(\"valueIs\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}